// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPCorrectedGroundModeImagery.h"

#if defined(ENABLE_GARDAR) && ENABLE_GARDAR

#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPCorrectedGroundModeImagery

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readMapSnapshot {
    if (_flags.read_mapSnapshot) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_mapSnapshot) {
            static const uint32_t tags[] = {1, 0};
            GEORPCorrectedGroundModeImageryReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasMapSnapshot
{
    [self _readMapSnapshot];
    return _mapSnapshot != nil;
}
- (NSData *)mapSnapshot
{
    [self _readMapSnapshot];
    return _mapSnapshot;
}
- (void)setMapSnapshot:(NSData *)v
{
    _flags.read_mapSnapshot = 1;
    _flags.wrote_mapSnapshot = 1;
    _mapSnapshot = v;
}

- (void)_readCategoryId {
    if (_flags.read_categoryId) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_categoryId) {
            static const uint32_t tags[] = {2, 0};
            GEORPCorrectedGroundModeImageryReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCategoryId
{
    [self _readCategoryId];
    return _categoryId != nil;
}
- (NSString *)categoryId
{
    [self _readCategoryId];
    return _categoryId;
}
- (void)setCategoryId:(NSString *)v
{
    _flags.read_categoryId = 1;
    _flags.wrote_categoryId = 1;
    _categoryId = v;
}

- (void)_readCategoryDisplayString {
    if (_flags.read_categoryDisplayString) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_categoryDisplayString) {
            static const uint32_t tags[] = {3, 0};
            GEORPCorrectedGroundModeImageryReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCategoryDisplayString
{
    [self _readCategoryDisplayString];
    return _categoryDisplayString != nil;
}
- (NSString *)categoryDisplayString
{
    [self _readCategoryDisplayString];
    return _categoryDisplayString;
}
- (void)setCategoryDisplayString:(NSString *)v
{
    _flags.read_categoryDisplayString = 1;
    _flags.wrote_categoryDisplayString = 1;
    _categoryDisplayString = v;
}

- (void)_readCategoryLocale {
    if (_flags.read_categoryLocale) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_categoryLocale) {
            static const uint32_t tags[] = {4, 0};
            GEORPCorrectedGroundModeImageryReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCategoryLocale
{
    [self _readCategoryLocale];
    return _categoryLocale != nil;
}
- (NSString *)categoryLocale
{
    [self _readCategoryLocale];
    return _categoryLocale;
}
- (void)setCategoryLocale:(NSString *)v
{
    _flags.read_categoryLocale = 1;
    _flags.wrote_categoryLocale = 1;
    _categoryLocale = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        NSData * value = self.mapSnapshot;
        if (value) {
            [dict setObject:value forKey:@"map_snapshot"];
        }
    }

    {
        NSString * value = self.categoryId;
        if (value) {
            [dict setObject:value forKey:@"category_id"];
        }
    }

    {
        NSString * value = self.categoryDisplayString;
        if (value) {
            [dict setObject:value forKey:@"category_display_string"];
        }
    }

    {
        NSString * value = self.categoryLocale;
        if (value) {
            [dict setObject:value forKey:@"category_locale"];
        }
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPCorrectedGroundModeImageryReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPCorrectedGroundModeImageryReadAllFrom(__unsafe_unretained GEORPCorrectedGroundModeImagery *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPCorrectedGroundModeImageryReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPCorrectedGroundModeImageryReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPCorrectedGroundModeImageryReadFrom(__unsafe_unretained GEORPCorrectedGroundModeImagery *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPCorrectedGroundModeImageryReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPCorrectedGroundModeImageryReadSpecified(__unsafe_unretained GEORPCorrectedGroundModeImagery *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_mapSnapshot
        + self->_flags.read_categoryId
        + self->_flags.read_categoryDisplayString
        + self->_flags.read_categoryLocale
        ;
    #define requiredLazyFieldCount 3 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* mapSnapshot */:
            {
                if (!shouldParseTag || self->_flags.read_mapSnapshot) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_mapSnapshot) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSData * new_mapSnapshot = PBReaderReadData(reader);
                self->_mapSnapshot = new_mapSnapshot;

                --tagsRemaining;
            }
            break;
            case 2 /* categoryId */:
            {
                if (!shouldParseTag || self->_flags.read_categoryId) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_categoryId) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_categoryId = PBReaderReadString(reader);
                self->_categoryId = new_categoryId;

                --tagsRemaining;
            }
            break;
            case 3 /* categoryDisplayString */:
            {
                if (!shouldParseTag || self->_flags.read_categoryDisplayString) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_categoryDisplayString) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_categoryDisplayString = PBReaderReadString(reader);
                self->_categoryDisplayString = new_categoryDisplayString;

                --tagsRemaining;
            }
            break;
            case 4 /* categoryLocale */:
            {
                if (!shouldParseTag || self->_flags.read_categoryLocale) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_categoryLocale) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_categoryLocale = PBReaderReadString(reader);
                self->_categoryLocale = new_categoryLocale;

                --tagsRemaining;
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
        }
        self->_flags.read_mapSnapshot = YES;
        self->_flags.read_categoryId = YES;
        self->_flags.read_categoryDisplayString = YES;
        self->_flags.read_categoryLocale = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* mapSnapshot */:
                    self->_flags.read_mapSnapshot = YES;
                    break;
                case 2 /* categoryId */:
                    self->_flags.read_categoryId = YES;
                    break;
                case 3 /* categoryDisplayString */:
                    self->_flags.read_categoryDisplayString = YES;
                    break;
                case 4 /* categoryLocale */:
                    self->_flags.read_categoryLocale = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPCorrectedGroundModeImageryIsValid(reader);
}

BOOL GEORPCorrectedGroundModeImageryIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* mapSnapshot */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 2 /* categoryId */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 3 /* categoryDisplayString */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 4 /* categoryLocale */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPCorrectedGroundModeImageryReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPCorrectedGroundModeImageryIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* mapSnapshot */
    {
        if (self->_mapSnapshot)
        {
            PBDataWriterWriteDataField(writer, self->_mapSnapshot, 1);
        }
    }

    /* categoryId */
    {
        if (self->_categoryId)
        {
            PBDataWriterWriteStringField(writer, self->_categoryId, 2);
        }
    }

    /* categoryDisplayString */
    {
        if (self->_categoryDisplayString)
        {
            PBDataWriterWriteStringField(writer, self->_categoryDisplayString, 3);
        }
    }

    /* categoryLocale */
    {
        if (self->_categoryLocale)
        {
            PBDataWriterWriteStringField(writer, self->_categoryLocale, 4);
        }
    }
}

BOOL GEORPCorrectedGroundModeImageryIsDirty(__unsafe_unretained GEORPCorrectedGroundModeImagery *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_mapSnapshot
        || self->_flags.read_mapSnapshot
        || self->_flags.wrote_categoryId
        || self->_flags.read_categoryId
        || self->_flags.wrote_categoryDisplayString
        || self->_flags.read_categoryDisplayString
        || self->_flags.wrote_categoryLocale
        || self->_flags.read_categoryLocale
    ;


    return dirty;
}


- (void)copyTo:(GEORPCorrectedGroundModeImagery *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_mapSnapshot)
    {
        other.mapSnapshot = _mapSnapshot;
    }
    if (_categoryId)
    {
        other.categoryId = _categoryId;
    }
    if (_categoryDisplayString)
    {
        other.categoryDisplayString = _categoryDisplayString;
    }
    if (_categoryLocale)
    {
        other.categoryLocale = _categoryLocale;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPCorrectedGroundModeImagery *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_mapSnapshot
                || _flags.wrote_categoryId
                || _flags.wrote_categoryDisplayString
                || _flags.wrote_categoryLocale
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPCorrectedGroundModeImageryReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_mapSnapshot = [_mapSnapshot copyWithZone:zone];
    copy->_categoryId = [_categoryId copyWithZone:zone];
    copy->_categoryDisplayString = [_categoryDisplayString copyWithZone:zone];
    copy->_categoryLocale = [_categoryLocale copyWithZone:zone];
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPCorrectedGroundModeImagery *other = (GEORPCorrectedGroundModeImagery *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_mapSnapshot && !other->_mapSnapshot) || [self->_mapSnapshot isEqual:other->_mapSnapshot])
    &&
    ((!self->_categoryId && !other->_categoryId) || [self->_categoryId isEqual:other->_categoryId])
    &&
    ((!self->_categoryDisplayString && !other->_categoryDisplayString) || [self->_categoryDisplayString isEqual:other->_categoryDisplayString])
    &&
    ((!self->_categoryLocale && !other->_categoryLocale) || [self->_categoryLocale isEqual:other->_categoryLocale])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_mapSnapshot hash]
    ^
    [self->_categoryId hash]
    ^
    [self->_categoryDisplayString hash]
    ^
    [self->_categoryLocale hash]
    ;
}

- (void)mergeFrom:(GEORPCorrectedGroundModeImagery *)other
{
    [other readAll:NO];
    if (other->_mapSnapshot)
    {
        [self setMapSnapshot:other->_mapSnapshot];
    }
    if (other->_categoryId)
    {
        [self setCategoryId:other->_categoryId];
    }
    if (other->_categoryDisplayString)
    {
        [self setCategoryDisplayString:other->_categoryDisplayString];
    }
    if (other->_categoryLocale)
    {
        [self setCategoryLocale:other->_categoryLocale];
    }
}


@end


#endif // defined(ENABLE_GARDAR) && ENABLE_GARDAR
