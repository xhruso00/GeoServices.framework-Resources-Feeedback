// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPFeedbackSubmissionParameters.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEORPFeedbackCommonContext.h>
#import <GeoServices/GEORPFeedbackCommonCorrections.h>
#import <GeoServices/GEORPFeedbackDetails.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPFeedbackSubmissionParameters

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readClientSubmissionUuid {
    if (_flags.read_clientSubmissionUuid) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_clientSubmissionUuid) {
            static const uint32_t tags[] = {1, 0};
            GEORPFeedbackSubmissionParametersReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasClientSubmissionUuid
{
    [self _readClientSubmissionUuid];
    return _clientSubmissionUuid != nil;
}
- (NSString *)clientSubmissionUuid
{
    [self _readClientSubmissionUuid];
    return _clientSubmissionUuid;
}
- (void)setClientSubmissionUuid:(NSString *)v
{
    _flags.read_clientSubmissionUuid = 1;
    _flags.wrote_clientSubmissionUuid = 1;
    _clientSubmissionUuid = v;
}

- (GEORPFeedbackType)type
{
    return _flags.has_type ? _type : GEORPFeedbackType_FEEDBACK_TYPE_UNKNOWN;
}
- (void)setType:(GEORPFeedbackType)v
{
    _flags.wrote_type = 1;
    _flags.has_type = 1;
    _type = v;
}
- (void)setHasType:(BOOL)f
{
    _flags.wrote_type = 1;
    _flags.has_type = f ? 1 : 0;
}
- (BOOL)hasType
{
    return (BOOL)_flags.has_type;
}
- (NSString *)typeAsString:(GEORPFeedbackType)value
{
    return GEORPFeedbackTypeAsString(value);
}
- (GEORPFeedbackType)StringAsType:(NSString *)str
{
    return StringAsGEORPFeedbackType(str);
}

- (void)_readDetails {
    if (_flags.read_details) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_details) {
            static const uint32_t tags[] = {3, 0};
            GEORPFeedbackSubmissionParametersReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasDetails
{
    [self _readDetails];
    return _details != nil;
}
- (GEORPFeedbackDetails *)details
{
    [self _readDetails];
    return _details;
}
- (void)setDetails:(GEORPFeedbackDetails *)v
{
    _flags.read_details = 1;
    _flags.wrote_details = 1;
    _details = v;
}

- (void)_readCommonContext {
    if (_flags.read_commonContext) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_commonContext) {
            static const uint32_t tags[] = {4, 0};
            GEORPFeedbackSubmissionParametersReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCommonContext
{
    [self _readCommonContext];
    return _commonContext != nil;
}
- (GEORPFeedbackCommonContext *)commonContext
{
    [self _readCommonContext];
    return _commonContext;
}
- (void)setCommonContext:(GEORPFeedbackCommonContext *)v
{
    _flags.read_commonContext = 1;
    _flags.wrote_commonContext = 1;
    _commonContext = v;
}

- (void)_readCommonCorrections {
    if (_flags.read_commonCorrections) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_commonCorrections) {
            static const uint32_t tags[] = {5, 0};
            GEORPFeedbackSubmissionParametersReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCommonCorrections
{
    [self _readCommonCorrections];
    return _commonCorrections != nil;
}
- (GEORPFeedbackCommonCorrections *)commonCorrections
{
    [self _readCommonCorrections];
    return _commonCorrections;
}
- (void)setCommonCorrections:(GEORPFeedbackCommonCorrections *)v
{
    _flags.read_commonCorrections = 1;
    _flags.wrote_commonCorrections = 1;
    _commonCorrections = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        NSString * value = self.clientSubmissionUuid;
        if (value) {
            [dict setObject:value forKey:@"client_submission_uuid"];
        }
    }

    if (self->_flags.has_type)
    {
        [dict setObject:GEORPFeedbackTypeAsString(self->_type) forKey:@"type"];
    }

    {
        GEORPFeedbackDetails * value = self.details;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"details"];
        }
    }

    {
        GEORPFeedbackCommonContext * value = self.commonContext;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"common_context"];
        }
    }

    {
        GEORPFeedbackCommonCorrections * value = self.commonCorrections;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"common_corrections"];
        }
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPFeedbackSubmissionParametersReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPFeedbackSubmissionParametersReadAllFrom(__unsafe_unretained GEORPFeedbackSubmissionParameters *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPFeedbackSubmissionParametersReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPFeedbackSubmissionParametersReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPFeedbackSubmissionParametersReadFrom(__unsafe_unretained GEORPFeedbackSubmissionParameters *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPFeedbackSubmissionParametersReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPFeedbackSubmissionParametersReadSpecified(__unsafe_unretained GEORPFeedbackSubmissionParameters *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_clientSubmissionUuid
        + self->_flags.read_details
        + self->_flags.read_commonContext
        + self->_flags.read_commonCorrections
        + self->_flags.read_unknownFields
        ;
    #define requiredLazyFieldCount 3 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL shouldParseUnknown = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            case TAG_UNKNOWN_FIELDS:
                shouldParseUnknown = YES;
                ++readLazyCount;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
        shouldParseUnknown = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !(readAll || shouldParseUnknown);
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* clientSubmissionUuid */:
            {
                if (!shouldParseTag || self->_flags.read_clientSubmissionUuid) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_clientSubmissionUuid) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_clientSubmissionUuid = PBReaderReadString(reader);
                self->_clientSubmissionUuid = new_clientSubmissionUuid;

                --tagsRemaining;
            }
            break;
            case 2 /* type */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_type = YES;
                self->_type = PBReaderReadInt32(reader);

            }
            break;
            case 3 /* details */:
            {
                if (!shouldParseTag || self->_flags.read_details) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_details) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPFeedbackDetails *new_details = [[GEORPFeedbackDetails alloc] init];
                self->_details = new_details;
                PBDataReaderMark mark_details;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_details);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackDetailsReadAllFrom(new_details, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_details);

                --tagsRemaining;
            }
            break;
            case 4 /* commonContext */:
            {
                if (!shouldParseTag || self->_flags.read_commonContext) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_commonContext) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPFeedbackCommonContext *new_commonContext = [[GEORPFeedbackCommonContext alloc] init];
                self->_commonContext = new_commonContext;
                PBDataReaderMark mark_commonContext;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_commonContext);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackCommonContextReadAllFrom(new_commonContext, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_commonContext);

                --tagsRemaining;
            }
            break;
            case 5 /* commonCorrections */:
            {
                if (!shouldParseTag || self->_flags.read_commonCorrections) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_commonCorrections) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPFeedbackCommonCorrections *new_commonCorrections = [[GEORPFeedbackCommonCorrections alloc] init];
                self->_commonCorrections = new_commonCorrections;
                PBDataReaderMark mark_commonCorrections;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_commonCorrections);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackCommonCorrectionsReadAllFrom(new_commonCorrections, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_commonCorrections);

                --tagsRemaining;
            }
            break;
            default:
                if (!shouldParseUnknown || self->_flags.read_unknownFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }

    if (shouldParseUnknown) {
        self->_flags.read_unknownFields = YES;
    }

    if (readAll) {
        if (recursively) {
            [self->_details readAll:YES];
            [self->_commonContext readAll:YES];
            [self->_commonCorrections readAll:YES];
        }
        self->_flags.read_clientSubmissionUuid = YES;
        self->_flags.read_details = YES;
        self->_flags.read_commonContext = YES;
        self->_flags.read_commonCorrections = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* clientSubmissionUuid */:
                    self->_flags.read_clientSubmissionUuid = YES;
                    break;
                case 3 /* details */:
                    self->_flags.read_details = YES;
                    break;
                case 4 /* commonContext */:
                    self->_flags.read_commonContext = YES;
                    break;
                case 5 /* commonCorrections */:
                    self->_flags.read_commonCorrections = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPFeedbackSubmissionParametersIsValid(reader);
}

BOOL GEORPFeedbackSubmissionParametersIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* clientSubmissionUuid */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 2 /* type */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 3 /* details */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_details;
                    if (!PBReaderPlaceMark(reader, &mark_details))
                        returnValue(NO);
                    if (!GEORPFeedbackDetailsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_details);
                }
                break;
            case 4 /* commonContext */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_commonContext;
                    if (!PBReaderPlaceMark(reader, &mark_commonContext))
                        returnValue(NO);
                    if (!GEORPFeedbackCommonContextIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_commonContext);
                }
                break;
            case 5 /* commonCorrections */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_commonCorrections;
                    if (!PBReaderPlaceMark(reader, &mark_commonCorrections))
                        returnValue(NO);
                    if (!GEORPFeedbackCommonCorrectionsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_commonCorrections);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPFeedbackSubmissionParametersReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPFeedbackSubmissionParametersIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* clientSubmissionUuid */
    {
        if (self->_clientSubmissionUuid)
        {
            PBDataWriterWriteStringField(writer, self->_clientSubmissionUuid, 1);
        }
    }

    /* type */
    {
        if (self->_flags.has_type)
        {
            PBDataWriterWriteInt32Field(writer, self->_type, 2);
        }
    }

    /* details */
    {
        if (self->_details != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_details, 3);
        }
    }

    /* commonContext */
    {
        if (self->_commonContext != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_commonContext, 4);
        }
    }

    /* commonCorrections */
    {
        if (self->_commonCorrections != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_commonCorrections, 5);
        }
    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}

BOOL GEORPFeedbackSubmissionParametersIsDirty(__unsafe_unretained GEORPFeedbackSubmissionParameters *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_clientSubmissionUuid
        || self->_flags.read_clientSubmissionUuid
        || self->_flags.wrote_type
        || self->_flags.wrote_details
        || (self->_flags.read_details && GEORPFeedbackDetailsIsDirty(self->_details))
        || self->_flags.wrote_commonContext
        || (self->_flags.read_commonContext && GEORPFeedbackCommonContextIsDirty(self->_commonContext))
        || self->_flags.wrote_commonCorrections
        || (self->_flags.read_commonCorrections && GEORPFeedbackCommonCorrectionsIsDirty(self->_commonCorrections))
        || self->_flags.wrote_unknownFields
    ;


    return dirty;
}


- (void)copyTo:(GEORPFeedbackSubmissionParameters *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_clientSubmissionUuid)
    {
        other.clientSubmissionUuid = _clientSubmissionUuid;
    }
    if (self->_flags.has_type)
    {
        other->_type = _type;
        other->_flags.has_type = YES;
    }
    if (_details)
    {
        other.details = _details;
    }
    if (_commonContext)
    {
        other.commonContext = _commonContext;
    }
    if (_commonCorrections)
    {
        other.commonCorrections = _commonCorrections;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPFeedbackSubmissionParameters *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_clientSubmissionUuid
                || _flags.wrote_type
                || _flags.wrote_details
                || _flags.wrote_commonContext
                || _flags.wrote_commonCorrections
                || _flags.wrote_unknownFields
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPFeedbackSubmissionParametersReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_clientSubmissionUuid = [_clientSubmissionUuid copyWithZone:zone];
    if (self->_flags.has_type)
    {
        copy->_type = _type;
        copy->_flags.has_type = YES;
    }
    copy->_details = [_details copyWithZone:zone];
    copy->_commonContext = [_commonContext copyWithZone:zone];
    copy->_commonCorrections = [_commonCorrections copyWithZone:zone];
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPFeedbackSubmissionParameters *other = (GEORPFeedbackSubmissionParameters *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_clientSubmissionUuid && !other->_clientSubmissionUuid) || [self->_clientSubmissionUuid isEqual:other->_clientSubmissionUuid])
    &&
    ((self->_flags.has_type && other->_flags.has_type && self->_type == other->_type) || (!self->_flags.has_type && !other->_flags.has_type))
    &&
    ((!self->_details && !other->_details) || [self->_details isEqual:other->_details])
    &&
    ((!self->_commonContext && !other->_commonContext) || [self->_commonContext isEqual:other->_commonContext])
    &&
    ((!self->_commonCorrections && !other->_commonCorrections) || [self->_commonCorrections isEqual:other->_commonCorrections])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_clientSubmissionUuid hash]
    ^
    (self->_flags.has_type ? PBHashInt((NSUInteger)self->_type) : 0)
    ^
    [self->_details hash]
    ^
    [self->_commonContext hash]
    ^
    [self->_commonCorrections hash]
    ;
}

- (void)mergeFrom:(GEORPFeedbackSubmissionParameters *)other
{
    [other readAll:NO];
    if (other->_clientSubmissionUuid)
    {
        [self setClientSubmissionUuid:other->_clientSubmissionUuid];
    }
    if (other->_flags.has_type)
    {
        self->_type = other->_type;
        self->_flags.has_type = 1;
    }
    if (self->_details && other->_details)
    {
        [self->_details mergeFrom:other->_details];
    }
    else if (!self->_details && other->_details)
    {
        [self setDetails:other->_details];
    }
    if (self->_commonContext && other->_commonContext)
    {
        [self->_commonContext mergeFrom:other->_commonContext];
    }
    else if (!self->_commonContext && other->_commonContext)
    {
        [self setCommonContext:other->_commonContext];
    }
    if (self->_commonCorrections && other->_commonCorrections)
    {
        [self->_commonCorrections mergeFrom:other->_commonCorrections];
    }
    else if (!self->_commonCorrections && other->_commonCorrections)
    {
        [self setCommonCorrections:other->_commonCorrections];
    }
}

- (PBUnknownFields *)unknownFields
{
    if (_flags.read_unknownFields) return _unknownFields;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return _unknownFields;
    @synchronized(reader) {
        if (!_flags.read_unknownFields) {
            static const uint32_t tags[] = {TAG_UNKNOWN_FIELDS, 0};
            GEORPFeedbackSubmissionParametersReadSpecified(self, reader, tags);
        }
    }
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _flags.read_unknownFields = 1;
    _flags.wrote_unknownFields = 1;
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
    [_details clearUnknownFields:YES];
    [_commonContext clearUnknownFields:YES];
    [_commonCorrections clearUnknownFields:YES];
}

@end


