// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPSortParameters.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPSortParameters


- (GEORPFeedbackQueryParameters_SortType)sortBy
{
    return _flags.has_sortBy ? _sortBy : GEORPFeedbackQueryParameters_SortType_SORT_TYPE_UNKNOWN;
}
- (void)setSortBy:(GEORPFeedbackQueryParameters_SortType)v
{
    _flags.has_sortBy = 1;
    _sortBy = v;
}
- (void)setHasSortBy:(BOOL)f
{
    _flags.has_sortBy = f ? 1 : 0;
}
- (BOOL)hasSortBy
{
    return (BOOL)_flags.has_sortBy;
}
- (NSString *)sortByAsString:(GEORPFeedbackQueryParameters_SortType)value
{
    return GEORPFeedbackQueryParameters_SortTypeAsString(value);
}
- (GEORPFeedbackQueryParameters_SortType)StringAsSortBy:(NSString *)str
{
    return StringAsGEORPFeedbackQueryParameters_SortType(str);
}

- (GEORPFeedbackQueryParameters_SortDirection)sortDirection
{
    return _flags.has_sortDirection ? _sortDirection : GEORPFeedbackQueryParameters_SortDirection_SORT_DIRECTION_UNKNOWN;
}
- (void)setSortDirection:(GEORPFeedbackQueryParameters_SortDirection)v
{
    _flags.has_sortDirection = 1;
    _sortDirection = v;
}
- (void)setHasSortDirection:(BOOL)f
{
    _flags.has_sortDirection = f ? 1 : 0;
}
- (BOOL)hasSortDirection
{
    return (BOOL)_flags.has_sortDirection;
}
- (NSString *)sortDirectionAsString:(GEORPFeedbackQueryParameters_SortDirection)value
{
    return GEORPFeedbackQueryParameters_SortDirectionAsString(value);
}
- (GEORPFeedbackQueryParameters_SortDirection)StringAsSortDirection:(NSString *)str
{
    return StringAsGEORPFeedbackQueryParameters_SortDirection(str);
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_sortBy)
    {
        [dict setObject:GEORPFeedbackQueryParameters_SortTypeAsString(self->_sortBy) forKey:@"sort_by"];
    }

    if (self->_flags.has_sortDirection)
    {
        [dict setObject:GEORPFeedbackQueryParameters_SortDirectionAsString(self->_sortDirection) forKey:@"sort_direction"];
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively { /* noop */ }
BOOL GEORPSortParametersReadAllFrom(__unsafe_unretained GEORPSortParameters *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};

    @synchronized(reader) {
        BOOL result = GEORPSortParametersReadSpecified(self, reader, recursively ? recursiveTag : nil);
        return result;
    }
}
BOOL GEORPSortParametersReadFrom(__unsafe_unretained GEORPSortParameters *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPSortParametersReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPSortParametersReadSpecified(__unsafe_unretained GEORPSortParameters *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    #define shouldParseUnknown YES
    __attribute__((unused)) BOOL const recursively = (tags != nil && tags[0] == TAG_PARSE_ALL_RECURSIVE);
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
    #define shouldParseTag YES

        switch (tag) {

            case 1 /* sortBy */:
            {
                self->_flags.has_sortBy = YES;
                self->_sortBy = PBReaderReadInt32(reader);

            }
            break;
            case 2 /* sortDirection */:
            {
                self->_flags.has_sortDirection = YES;
                self->_sortDirection = PBReaderReadInt32(reader);

            }
            break;
            default:
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
    }



    #undef shouldParseTag
    #undef shouldParseUnknown
    #undef recursively
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPSortParametersIsValid(reader);
}

BOOL GEORPSortParametersIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* sortBy */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 2 /* sortDirection */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPSortParametersReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{

    /* sortBy */
    {
        if (self->_flags.has_sortBy)
        {
            PBDataWriterWriteInt32Field(writer, self->_sortBy, 1);
        }
    }

    /* sortDirection */
    {
        if (self->_flags.has_sortDirection)
        {
            PBDataWriterWriteInt32Field(writer, self->_sortDirection, 2);
        }
    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}



- (void)copyTo:(GEORPSortParameters *)other
{
    [self readAll:NO];
    if (self->_flags.has_sortBy)
    {
        other->_sortBy = _sortBy;
        other->_flags.has_sortBy = YES;
    }
    if (self->_flags.has_sortDirection)
    {
        other->_sortDirection = _sortDirection;
        other->_flags.has_sortDirection = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPSortParameters *copy = [[[self class] allocWithZone:zone] init];
    if (self->_flags.has_sortBy)
    {
        copy->_sortBy = _sortBy;
        copy->_flags.has_sortBy = YES;
    }
    if (self->_flags.has_sortDirection)
    {
        copy->_sortDirection = _sortDirection;
        copy->_flags.has_sortDirection = YES;
    }
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPSortParameters *other = (GEORPSortParameters *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_sortBy && other->_flags.has_sortBy && self->_sortBy == other->_sortBy) || (!self->_flags.has_sortBy && !other->_flags.has_sortBy))
    &&
    ((self->_flags.has_sortDirection && other->_flags.has_sortDirection && self->_sortDirection == other->_sortDirection) || (!self->_flags.has_sortDirection && !other->_flags.has_sortDirection))
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_sortBy ? PBHashInt((NSUInteger)self->_sortBy) : 0)
    ^
    (self->_flags.has_sortDirection ? PBHashInt((NSUInteger)self->_sortDirection) : 0)
    ;
}

- (void)mergeFrom:(GEORPSortParameters *)other
{
    [other readAll:NO];
    if (other->_flags.has_sortBy)
    {
        self->_sortBy = other->_sortBy;
        self->_flags.has_sortBy = 1;
    }
    if (other->_flags.has_sortDirection)
    {
        self->_sortDirection = other->_sortDirection;
        self->_flags.has_sortDirection = 1;
    }
}

- (PBUnknownFields *)unknownFields
{
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
}

@end


