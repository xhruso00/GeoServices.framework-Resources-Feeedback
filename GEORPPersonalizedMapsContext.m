// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPPersonalizedMapsContext.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPPersonalizedMapsContext


- (GEORPAddressType)addressType
{
    return _flags.has_addressType ? _addressType : GEORPAddressType_ADDRESS_TYPE_UNKNOWN;
}
- (void)setAddressType:(GEORPAddressType)v
{
    _flags.has_addressType = 1;
    _addressType = v;
}
- (void)setHasAddressType:(BOOL)f
{
    _flags.has_addressType = f ? 1 : 0;
}
- (BOOL)hasAddressType
{
    return (BOOL)_flags.has_addressType;
}
- (NSString *)addressTypeAsString:(GEORPAddressType)value
{
    return GEORPAddressTypeAsString(value);
}
- (GEORPAddressType)StringAsAddressType:(NSString *)str
{
    return StringAsGEORPAddressType(str);
}

- (GEORPPlaceType)placeType
{
    return _flags.has_placeType ? _placeType : GEORPPlaceType_PLACE_TYPE_UNKNOWN;
}
- (void)setPlaceType:(GEORPPlaceType)v
{
    _flags.has_placeType = 1;
    _placeType = v;
}
- (void)setHasPlaceType:(BOOL)f
{
    _flags.has_placeType = f ? 1 : 0;
}
- (BOOL)hasPlaceType
{
    return (BOOL)_flags.has_placeType;
}
- (NSString *)placeTypeAsString:(GEORPPlaceType)value
{
    return GEORPPlaceTypeAsString(value);
}
- (GEORPPlaceType)StringAsPlaceType:(NSString *)str
{
    return StringAsGEORPPlaceType(str);
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_addressType)
    {
        [dict setObject:GEORPAddressTypeAsString(self->_addressType) forKey:@"address_type"];
    }

    if (self->_flags.has_placeType)
    {
        [dict setObject:GEORPPlaceTypeAsString(self->_placeType) forKey:@"place_type"];
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively { /* noop */ }
BOOL GEORPPersonalizedMapsContextReadAllFrom(__unsafe_unretained GEORPPersonalizedMapsContext *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};

    @synchronized(reader) {
        BOOL result = GEORPPersonalizedMapsContextReadSpecified(self, reader, recursively ? recursiveTag : nil);
        return result;
    }
}
BOOL GEORPPersonalizedMapsContextReadFrom(__unsafe_unretained GEORPPersonalizedMapsContext *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPPersonalizedMapsContextReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPPersonalizedMapsContextReadSpecified(__unsafe_unretained GEORPPersonalizedMapsContext *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    #define shouldParseUnknown YES
    __attribute__((unused)) BOOL const recursively = (tags != nil && tags[0] == TAG_PARSE_ALL_RECURSIVE);
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
    #define shouldParseTag YES

        switch (tag) {

            case 1 /* addressType */:
            {
                self->_flags.has_addressType = YES;
                self->_addressType = PBReaderReadInt32(reader);

            }
            break;
            case 2 /* placeType */:
            {
                self->_flags.has_placeType = YES;
                self->_placeType = PBReaderReadInt32(reader);

            }
            break;
            default:
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
    }



    #undef shouldParseTag
    #undef shouldParseUnknown
    #undef recursively
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPPersonalizedMapsContextIsValid(reader);
}

BOOL GEORPPersonalizedMapsContextIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* addressType */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 2 /* placeType */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPPersonalizedMapsContextReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{

    /* addressType */
    {
        if (self->_flags.has_addressType)
        {
            PBDataWriterWriteInt32Field(writer, self->_addressType, 1);
        }
    }

    /* placeType */
    {
        if (self->_flags.has_placeType)
        {
            PBDataWriterWriteInt32Field(writer, self->_placeType, 2);
        }
    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}



- (void)copyTo:(GEORPPersonalizedMapsContext *)other
{
    [self readAll:NO];
    if (self->_flags.has_addressType)
    {
        other->_addressType = _addressType;
        other->_flags.has_addressType = YES;
    }
    if (self->_flags.has_placeType)
    {
        other->_placeType = _placeType;
        other->_flags.has_placeType = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPPersonalizedMapsContext *copy = [[[self class] allocWithZone:zone] init];
    if (self->_flags.has_addressType)
    {
        copy->_addressType = _addressType;
        copy->_flags.has_addressType = YES;
    }
    if (self->_flags.has_placeType)
    {
        copy->_placeType = _placeType;
        copy->_flags.has_placeType = YES;
    }
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPPersonalizedMapsContext *other = (GEORPPersonalizedMapsContext *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_addressType && other->_flags.has_addressType && self->_addressType == other->_addressType) || (!self->_flags.has_addressType && !other->_flags.has_addressType))
    &&
    ((self->_flags.has_placeType && other->_flags.has_placeType && self->_placeType == other->_placeType) || (!self->_flags.has_placeType && !other->_flags.has_placeType))
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_addressType ? PBHashInt((NSUInteger)self->_addressType) : 0)
    ^
    (self->_flags.has_placeType ? PBHashInt((NSUInteger)self->_placeType) : 0)
    ;
}

- (void)mergeFrom:(GEORPPersonalizedMapsContext *)other
{
    [other readAll:NO];
    if (other->_flags.has_addressType)
    {
        self->_addressType = other->_addressType;
        self->_flags.has_addressType = 1;
    }
    if (other->_flags.has_placeType)
    {
        self->_placeType = other->_placeType;
        self->_flags.has_placeType = 1;
    }
}

- (PBUnknownFields *)unknownFields
{
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
}

@end


