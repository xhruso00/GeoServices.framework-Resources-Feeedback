// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPDirectionsFeedbackContext.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEODirectionsRequest.h>
#import <GeoServices/GEODirectionsResponse.h>
#import <GeoServices/GEORPPlaceRequestResponse.h>
#import <GeoServices/GEORPUserSearchInput.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPDirectionsFeedbackContext

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readDirectionsRequests {
    if (_flags.read_directionsRequests) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_directionsRequests) {
            static const uint32_t tags[] = {1, 0};
            GEORPDirectionsFeedbackContextReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEODirectionsRequest *> *)directionsRequests
{
    [self _readDirectionsRequests];
    return _directionsRequests;
}
- (void)setDirectionsRequests:(NSMutableArray<GEODirectionsRequest *> *)v
{
    _flags.read_directionsRequests = 1;
    _flags.wrote_directionsRequests = 1;
    _directionsRequests = v;
}
- (void)clearDirectionsRequests
{
    _flags.read_directionsRequests = 1;
    _flags.wrote_directionsRequests = 1;
    [_directionsRequests removeAllObjects];
}
- (void)addDirectionsRequest:(GEODirectionsRequest *)i
{
    [self _readDirectionsRequests];
    [self _addNoFlagsDirectionsRequest:i];
    _flags.read_directionsRequests = 1;
    _flags.wrote_directionsRequests = 1;
}
- (void)_addNoFlagsDirectionsRequest:(GEODirectionsRequest *)i
{
    if (!_directionsRequests)
    {
        _directionsRequests = [[NSMutableArray alloc] init];
    }
    [_directionsRequests addObject:i];
}
- (NSUInteger)directionsRequestsCount
{
    [self _readDirectionsRequests];
    return [_directionsRequests count];
}
- (GEODirectionsRequest *)directionsRequestAtIndex:(NSUInteger)idx
{
    [self _readDirectionsRequests];
    return [_directionsRequests objectAtIndex:idx];
}
+ (Class)directionsRequestType
{
    return [GEODirectionsRequest class];
}

- (void)_readDirectionsResponses {
    if (_flags.read_directionsResponses) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_directionsResponses) {
            static const uint32_t tags[] = {2, 0};
            GEORPDirectionsFeedbackContextReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEODirectionsResponse *> *)directionsResponses
{
    [self _readDirectionsResponses];
    return _directionsResponses;
}
- (void)setDirectionsResponses:(NSMutableArray<GEODirectionsResponse *> *)v
{
    _flags.read_directionsResponses = 1;
    _flags.wrote_directionsResponses = 1;
    _directionsResponses = v;
}
- (void)clearDirectionsResponses
{
    _flags.read_directionsResponses = 1;
    _flags.wrote_directionsResponses = 1;
    [_directionsResponses removeAllObjects];
}
- (void)addDirectionsResponse:(GEODirectionsResponse *)i
{
    [self _readDirectionsResponses];
    [self _addNoFlagsDirectionsResponse:i];
    _flags.read_directionsResponses = 1;
    _flags.wrote_directionsResponses = 1;
}
- (void)_addNoFlagsDirectionsResponse:(GEODirectionsResponse *)i
{
    if (!_directionsResponses)
    {
        _directionsResponses = [[NSMutableArray alloc] init];
    }
    [_directionsResponses addObject:i];
}
- (NSUInteger)directionsResponsesCount
{
    [self _readDirectionsResponses];
    return [_directionsResponses count];
}
- (GEODirectionsResponse *)directionsResponseAtIndex:(NSUInteger)idx
{
    [self _readDirectionsResponses];
    return [_directionsResponses objectAtIndex:idx];
}
+ (Class)directionsResponseType
{
    return [GEODirectionsResponse class];
}

- (void)_readDirectionsWaypointPlaceInfos {
    if (_flags.read_directionsWaypointPlaceInfos) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_directionsWaypointPlaceInfos) {
            static const uint32_t tags[] = {3, 0};
            GEORPDirectionsFeedbackContextReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPPlaceRequestResponse *> *)directionsWaypointPlaceInfos
{
    [self _readDirectionsWaypointPlaceInfos];
    return _directionsWaypointPlaceInfos;
}
- (void)setDirectionsWaypointPlaceInfos:(NSMutableArray<GEORPPlaceRequestResponse *> *)v
{
    _flags.read_directionsWaypointPlaceInfos = 1;
    _flags.wrote_directionsWaypointPlaceInfos = 1;
    _directionsWaypointPlaceInfos = v;
}
- (void)clearDirectionsWaypointPlaceInfos
{
    _flags.read_directionsWaypointPlaceInfos = 1;
    _flags.wrote_directionsWaypointPlaceInfos = 1;
    [_directionsWaypointPlaceInfos removeAllObjects];
}
- (void)addDirectionsWaypointPlaceInfo:(GEORPPlaceRequestResponse *)i
{
    [self _readDirectionsWaypointPlaceInfos];
    [self _addNoFlagsDirectionsWaypointPlaceInfo:i];
    _flags.read_directionsWaypointPlaceInfos = 1;
    _flags.wrote_directionsWaypointPlaceInfos = 1;
}
- (void)_addNoFlagsDirectionsWaypointPlaceInfo:(GEORPPlaceRequestResponse *)i
{
    if (!_directionsWaypointPlaceInfos)
    {
        _directionsWaypointPlaceInfos = [[NSMutableArray alloc] init];
    }
    [_directionsWaypointPlaceInfos addObject:i];
}
- (NSUInteger)directionsWaypointPlaceInfosCount
{
    [self _readDirectionsWaypointPlaceInfos];
    return [_directionsWaypointPlaceInfos count];
}
- (GEORPPlaceRequestResponse *)directionsWaypointPlaceInfoAtIndex:(NSUInteger)idx
{
    [self _readDirectionsWaypointPlaceInfos];
    return [_directionsWaypointPlaceInfos objectAtIndex:idx];
}
+ (Class)directionsWaypointPlaceInfoType
{
    return [GEORPPlaceRequestResponse class];
}

- (void)_readStartWaypoint {
    if (_flags.read_startWaypoint) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_startWaypoint) {
            static const uint32_t tags[] = {4, 0};
            GEORPDirectionsFeedbackContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasStartWaypoint
{
    [self _readStartWaypoint];
    return _startWaypoint != nil;
}
- (GEORPUserSearchInput *)startWaypoint
{
    [self _readStartWaypoint];
    return _startWaypoint;
}
- (void)setStartWaypoint:(GEORPUserSearchInput *)v
{
    _flags.read_startWaypoint = 1;
    _flags.wrote_startWaypoint = 1;
    _startWaypoint = v;
}

- (void)_readEndWaypoint {
    if (_flags.read_endWaypoint) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_endWaypoint) {
            static const uint32_t tags[] = {5, 0};
            GEORPDirectionsFeedbackContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasEndWaypoint
{
    [self _readEndWaypoint];
    return _endWaypoint != nil;
}
- (GEORPUserSearchInput *)endWaypoint
{
    [self _readEndWaypoint];
    return _endWaypoint;
}
- (void)setEndWaypoint:(GEORPUserSearchInput *)v
{
    _flags.read_endWaypoint = 1;
    _flags.wrote_endWaypoint = 1;
    _endWaypoint = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if ([self->_directionsRequests count])
    {
        NSMutableArray *directionsRequestsDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_directionsRequests count]];
        for (GEODirectionsRequest * i_directionsRequest in self->_directionsRequests)
        {
            [directionsRequestsDictReprs addObject:[i_directionsRequest dictionaryRepresentation]];
        }
        [dict setObject:directionsRequestsDictReprs forKey:@"directions_request"];
    }

    if ([self->_directionsResponses count])
    {
        NSMutableArray *directionsResponsesDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_directionsResponses count]];
        for (GEODirectionsResponse * i_directionsResponse in self->_directionsResponses)
        {
            [directionsResponsesDictReprs addObject:[i_directionsResponse dictionaryRepresentation]];
        }
        [dict setObject:directionsResponsesDictReprs forKey:@"directions_response"];
    }

    if ([self->_directionsWaypointPlaceInfos count])
    {
        NSMutableArray *directionsWaypointPlaceInfosDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_directionsWaypointPlaceInfos count]];
        for (GEORPPlaceRequestResponse * i_directionsWaypointPlaceInfo in self->_directionsWaypointPlaceInfos)
        {
            [directionsWaypointPlaceInfosDictReprs addObject:[i_directionsWaypointPlaceInfo dictionaryRepresentation]];
        }
        [dict setObject:directionsWaypointPlaceInfosDictReprs forKey:@"directions_waypoint_place_info"];
    }

    {
        GEORPUserSearchInput * value = self.startWaypoint;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"start_waypoint"];
        }
    }

    {
        GEORPUserSearchInput * value = self.endWaypoint;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"end_waypoint"];
        }
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPDirectionsFeedbackContextReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPDirectionsFeedbackContextReadAllFrom(__unsafe_unretained GEORPDirectionsFeedbackContext *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPDirectionsFeedbackContextReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPDirectionsFeedbackContextReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPDirectionsFeedbackContextReadFrom(__unsafe_unretained GEORPDirectionsFeedbackContext *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPDirectionsFeedbackContextReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPDirectionsFeedbackContextReadSpecified(__unsafe_unretained GEORPDirectionsFeedbackContext *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_directionsRequests
        + self->_flags.read_directionsResponses
        + self->_flags.read_directionsWaypointPlaceInfos
        + self->_flags.read_startWaypoint
        + self->_flags.read_endWaypoint
        + self->_flags.read_unknownFields
        ;
    #define requiredLazyFieldCount 4 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL shouldParseUnknown = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            case TAG_UNKNOWN_FIELDS:
                shouldParseUnknown = YES;
                ++readLazyCount;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
        shouldParseUnknown = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !(readAll || shouldParseUnknown);
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* directionsRequests */:
            {
                if (!shouldParseTag || self->_flags.read_directionsRequests) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEODirectionsRequest *new_directionsRequest = [[GEODirectionsRequest alloc] init];
                [self _addNoFlagsDirectionsRequest:new_directionsRequest];
                PBDataReaderMark mark_directionsRequest;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_directionsRequest);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEODirectionsRequestReadAllFrom(new_directionsRequest, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_directionsRequest);

            }
            break;
            case 2 /* directionsResponses */:
            {
                if (!shouldParseTag || self->_flags.read_directionsResponses) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEODirectionsResponse *new_directionsResponse = [[GEODirectionsResponse alloc] init];
                [self _addNoFlagsDirectionsResponse:new_directionsResponse];
                PBDataReaderMark mark_directionsResponse;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_directionsResponse);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEODirectionsResponseReadAllFrom(new_directionsResponse, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_directionsResponse);

            }
            break;
            case 3 /* directionsWaypointPlaceInfos */:
            {
                if (!shouldParseTag || self->_flags.read_directionsWaypointPlaceInfos) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPPlaceRequestResponse *new_directionsWaypointPlaceInfo = [[GEORPPlaceRequestResponse alloc] init];
                [self _addNoFlagsDirectionsWaypointPlaceInfo:new_directionsWaypointPlaceInfo];
                PBDataReaderMark mark_directionsWaypointPlaceInfo;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_directionsWaypointPlaceInfo);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPPlaceRequestResponseReadAllFrom(new_directionsWaypointPlaceInfo, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_directionsWaypointPlaceInfo);

            }
            break;
            case 4 /* startWaypoint */:
            {
                if (!shouldParseTag || self->_flags.read_startWaypoint) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_startWaypoint) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPUserSearchInput *new_startWaypoint = [[GEORPUserSearchInput alloc] init];
                self->_startWaypoint = new_startWaypoint;
                PBDataReaderMark mark_startWaypoint;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_startWaypoint);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPUserSearchInputReadAllFrom(new_startWaypoint, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_startWaypoint);

                --tagsRemaining;
            }
            break;
            case 5 /* endWaypoint */:
            {
                if (!shouldParseTag || self->_flags.read_endWaypoint) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_endWaypoint) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPUserSearchInput *new_endWaypoint = [[GEORPUserSearchInput alloc] init];
                self->_endWaypoint = new_endWaypoint;
                PBDataReaderMark mark_endWaypoint;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_endWaypoint);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPUserSearchInputReadAllFrom(new_endWaypoint, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_endWaypoint);

                --tagsRemaining;
            }
            break;
            default:
                if (!shouldParseUnknown || self->_flags.read_unknownFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }

    if (shouldParseUnknown) {
        self->_flags.read_unknownFields = YES;
    }

    if (readAll) {
        if (recursively) {
            for (GEODirectionsRequest * i in self->_directionsRequests)
                [i readAll:YES];
            for (GEODirectionsResponse * i in self->_directionsResponses)
                [i readAll:YES];
            for (GEORPPlaceRequestResponse * i in self->_directionsWaypointPlaceInfos)
                [i readAll:YES];
            [self->_startWaypoint readAll:YES];
            [self->_endWaypoint readAll:YES];
        }
        self->_flags.read_directionsRequests = YES;
        self->_flags.read_directionsResponses = YES;
        self->_flags.read_directionsWaypointPlaceInfos = YES;
        self->_flags.read_startWaypoint = YES;
        self->_flags.read_endWaypoint = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* directionsRequests */:
                    self->_flags.read_directionsRequests = YES;
                    break;
                case 2 /* directionsResponses */:
                    self->_flags.read_directionsResponses = YES;
                    break;
                case 3 /* directionsWaypointPlaceInfos */:
                    self->_flags.read_directionsWaypointPlaceInfos = YES;
                    break;
                case 4 /* startWaypoint */:
                    self->_flags.read_startWaypoint = YES;
                    break;
                case 5 /* endWaypoint */:
                    self->_flags.read_endWaypoint = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPDirectionsFeedbackContextIsValid(reader);
}

BOOL GEORPDirectionsFeedbackContextIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* directionsRequests */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_directionsRequest;
                    if (!PBReaderPlaceMark(reader, &mark_directionsRequest))
                        returnValue(NO);
                    if (!GEODirectionsRequestIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_directionsRequest);
                }
                break;
            case 2 /* directionsResponses */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_directionsResponse;
                    if (!PBReaderPlaceMark(reader, &mark_directionsResponse))
                        returnValue(NO);
                    if (!GEODirectionsResponseIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_directionsResponse);
                }
                break;
            case 3 /* directionsWaypointPlaceInfos */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_directionsWaypointPlaceInfo;
                    if (!PBReaderPlaceMark(reader, &mark_directionsWaypointPlaceInfo))
                        returnValue(NO);
                    if (!GEORPPlaceRequestResponseIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_directionsWaypointPlaceInfo);
                }
                break;
            case 4 /* startWaypoint */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_startWaypoint;
                    if (!PBReaderPlaceMark(reader, &mark_startWaypoint))
                        returnValue(NO);
                    if (!GEORPUserSearchInputIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_startWaypoint);
                }
                break;
            case 5 /* endWaypoint */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_endWaypoint;
                    if (!PBReaderPlaceMark(reader, &mark_endWaypoint))
                        returnValue(NO);
                    if (!GEORPUserSearchInputIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_endWaypoint);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPDirectionsFeedbackContextReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPDirectionsFeedbackContextIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* directionsRequests */
    {
        for (GEODirectionsRequest * i_directionsRequest in self->_directionsRequests)
        {
            PBDataWriterWriteSubmessage(writer, i_directionsRequest, 1);
        }

    }

    /* directionsResponses */
    {
        for (GEODirectionsResponse * i_directionsResponse in self->_directionsResponses)
        {
            PBDataWriterWriteSubmessage(writer, i_directionsResponse, 2);
        }

    }

    /* directionsWaypointPlaceInfos */
    {
        for (GEORPPlaceRequestResponse * i_directionsWaypointPlaceInfo in self->_directionsWaypointPlaceInfos)
        {
            PBDataWriterWriteSubmessage(writer, i_directionsWaypointPlaceInfo, 3);
        }

    }

    /* startWaypoint */
    {
        if (self->_startWaypoint != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_startWaypoint, 4);
        }
    }

    /* endWaypoint */
    {
        if (self->_endWaypoint != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_endWaypoint, 5);
        }
    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}

BOOL GEORPDirectionsFeedbackContextIsDirty(__unsafe_unretained GEORPDirectionsFeedbackContext *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_directionsRequests
        || self->_flags.wrote_directionsResponses
        || self->_flags.wrote_directionsWaypointPlaceInfos
        || self->_flags.wrote_startWaypoint
        || (self->_flags.read_startWaypoint && GEORPUserSearchInputIsDirty(self->_startWaypoint))
        || self->_flags.wrote_endWaypoint
        || (self->_flags.read_endWaypoint && GEORPUserSearchInputIsDirty(self->_endWaypoint))
        || self->_flags.wrote_unknownFields
    ;

    if (!dirty) {

            if (self->_flags.read_directionsRequests) {
                for (GEODirectionsRequest *i in self->_directionsRequests) {
                    if (GEODirectionsRequestIsDirty(i)) {
                        return YES;
                    }
                }
            }

            if (self->_flags.read_directionsResponses) {
                for (GEODirectionsResponse *i in self->_directionsResponses) {
                    if (GEODirectionsResponseIsDirty(i)) {
                        return YES;
                    }
                }
            }

            if (self->_flags.read_directionsWaypointPlaceInfos) {
                for (GEORPPlaceRequestResponse *i in self->_directionsWaypointPlaceInfos) {
                    if (GEORPPlaceRequestResponseIsDirty(i)) {
                        return YES;
                    }
                }
            }
    }

    return dirty;
}


- (void)copyTo:(GEORPDirectionsFeedbackContext *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if ([self directionsRequestsCount])
    {
        [other clearDirectionsRequests];
        NSUInteger directionsRequestsCnt = [self directionsRequestsCount];
        for (NSUInteger i = 0; i < directionsRequestsCnt; i++)
        {
            [other addDirectionsRequest:[self directionsRequestAtIndex:i]];
        }
    }
    if ([self directionsResponsesCount])
    {
        [other clearDirectionsResponses];
        NSUInteger directionsResponsesCnt = [self directionsResponsesCount];
        for (NSUInteger i = 0; i < directionsResponsesCnt; i++)
        {
            [other addDirectionsResponse:[self directionsResponseAtIndex:i]];
        }
    }
    if ([self directionsWaypointPlaceInfosCount])
    {
        [other clearDirectionsWaypointPlaceInfos];
        NSUInteger directionsWaypointPlaceInfosCnt = [self directionsWaypointPlaceInfosCount];
        for (NSUInteger i = 0; i < directionsWaypointPlaceInfosCnt; i++)
        {
            [other addDirectionsWaypointPlaceInfo:[self directionsWaypointPlaceInfoAtIndex:i]];
        }
    }
    if (_startWaypoint)
    {
        other.startWaypoint = _startWaypoint;
    }
    if (_endWaypoint)
    {
        other.endWaypoint = _endWaypoint;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPDirectionsFeedbackContext *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_directionsRequests
                || _flags.wrote_directionsResponses
                || _flags.wrote_directionsWaypointPlaceInfos
                || _flags.wrote_startWaypoint
                || _flags.wrote_endWaypoint
                || _flags.wrote_unknownFields
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPDirectionsFeedbackContextReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    for (GEODirectionsRequest * v in _directionsRequests)
    {
        GEODirectionsRequest * vCopy = [v copyWithZone:zone];
        [copy addDirectionsRequest:vCopy];
    }
    for (GEODirectionsResponse * v in _directionsResponses)
    {
        GEODirectionsResponse * vCopy = [v copyWithZone:zone];
        [copy addDirectionsResponse:vCopy];
    }
    for (GEORPPlaceRequestResponse * v in _directionsWaypointPlaceInfos)
    {
        GEORPPlaceRequestResponse * vCopy = [v copyWithZone:zone];
        [copy addDirectionsWaypointPlaceInfo:vCopy];
    }
    copy->_startWaypoint = [_startWaypoint copyWithZone:zone];
    copy->_endWaypoint = [_endWaypoint copyWithZone:zone];
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPDirectionsFeedbackContext *other = (GEORPDirectionsFeedbackContext *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_directionsRequests && !other->_directionsRequests) || [self->_directionsRequests isEqual:other->_directionsRequests])

    &&
    ((!self->_directionsResponses && !other->_directionsResponses) || [self->_directionsResponses isEqual:other->_directionsResponses])

    &&
    ((!self->_directionsWaypointPlaceInfos && !other->_directionsWaypointPlaceInfos) || [self->_directionsWaypointPlaceInfos isEqual:other->_directionsWaypointPlaceInfos])

    &&
    ((!self->_startWaypoint && !other->_startWaypoint) || [self->_startWaypoint isEqual:other->_startWaypoint])
    &&
    ((!self->_endWaypoint && !other->_endWaypoint) || [self->_endWaypoint isEqual:other->_endWaypoint])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_directionsRequests hash]
    ^
    [self->_directionsResponses hash]
    ^
    [self->_directionsWaypointPlaceInfos hash]
    ^
    [self->_startWaypoint hash]
    ^
    [self->_endWaypoint hash]
    ;
}

- (void)mergeFrom:(GEORPDirectionsFeedbackContext *)other
{
    [other readAll:NO];
    for (GEODirectionsRequest * iter_directionsRequests in other->_directionsRequests)
    {
        [self addDirectionsRequest:iter_directionsRequests];
    }
    for (GEODirectionsResponse * iter_directionsResponses in other->_directionsResponses)
    {
        [self addDirectionsResponse:iter_directionsResponses];
    }
    for (GEORPPlaceRequestResponse * iter_directionsWaypointPlaceInfos in other->_directionsWaypointPlaceInfos)
    {
        [self addDirectionsWaypointPlaceInfo:iter_directionsWaypointPlaceInfos];
    }
    if (self->_startWaypoint && other->_startWaypoint)
    {
        [self->_startWaypoint mergeFrom:other->_startWaypoint];
    }
    else if (!self->_startWaypoint && other->_startWaypoint)
    {
        [self setStartWaypoint:other->_startWaypoint];
    }
    if (self->_endWaypoint && other->_endWaypoint)
    {
        [self->_endWaypoint mergeFrom:other->_endWaypoint];
    }
    else if (!self->_endWaypoint && other->_endWaypoint)
    {
        [self setEndWaypoint:other->_endWaypoint];
    }
}

- (PBUnknownFields *)unknownFields
{
    if (_flags.read_unknownFields) return _unknownFields;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return _unknownFields;
    @synchronized(reader) {
        if (!_flags.read_unknownFields) {
            static const uint32_t tags[] = {TAG_UNKNOWN_FIELDS, 0};
            GEORPDirectionsFeedbackContextReadSpecified(self, reader, tags);
        }
    }
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _flags.read_unknownFields = 1;
    _flags.wrote_unknownFields = 1;
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
    for (GEODirectionsRequest * v in self.directionsRequests) {
        [v clearUnknownFields:YES];
    }
    for (GEODirectionsResponse * v in self.directionsResponses) {
        [v clearUnknownFields:YES];
    }
    for (GEORPPlaceRequestResponse * v in self.directionsWaypointPlaceInfos) {
        [v clearUnknownFields:YES];
    }
}

@end


