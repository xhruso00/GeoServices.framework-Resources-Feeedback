// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPFeedbackRequestParameters.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEORPFeedbackIdLookupParameters.h>
#import <GeoServices/GEORPFeedbackImageUploadParameters.h>
#import <GeoServices/GEORPFeedbackLayoutConfigParameters.h>
#import <GeoServices/GEORPFeedbackQueryParameters.h>
#import <GeoServices/GEORPFeedbackSubmissionParameters.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPFeedbackRequestParameters

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readSubmissionParameters {
    if (_flags.read_submissionParameters) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_submissionParameters) {
            static const uint32_t tags[] = {1, 0};
            GEORPFeedbackRequestParametersReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasSubmissionParameters
{
    [self _readSubmissionParameters];
    return _submissionParameters != nil;
}
- (GEORPFeedbackSubmissionParameters *)submissionParameters
{
    [self _readSubmissionParameters];
    return _submissionParameters;
}
- (void)setSubmissionParameters:(GEORPFeedbackSubmissionParameters *)v
{
    _flags.read_submissionParameters = 1;
    _flags.wrote_submissionParameters = 1;
    _submissionParameters = v;
}

- (void)_readIdLookupParameters {
    if (_flags.read_idLookupParameters) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_idLookupParameters) {
            static const uint32_t tags[] = {2, 0};
            GEORPFeedbackRequestParametersReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasIdLookupParameters
{
    [self _readIdLookupParameters];
    return _idLookupParameters != nil;
}
- (GEORPFeedbackIdLookupParameters *)idLookupParameters
{
    [self _readIdLookupParameters];
    return _idLookupParameters;
}
- (void)setIdLookupParameters:(GEORPFeedbackIdLookupParameters *)v
{
    _flags.read_idLookupParameters = 1;
    _flags.wrote_idLookupParameters = 1;
    _idLookupParameters = v;
}

- (void)_readQueryParameters {
    if (_flags.read_queryParameters) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_queryParameters) {
            static const uint32_t tags[] = {3, 0};
            GEORPFeedbackRequestParametersReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasQueryParameters
{
    [self _readQueryParameters];
    return _queryParameters != nil;
}
- (GEORPFeedbackQueryParameters *)queryParameters
{
    [self _readQueryParameters];
    return _queryParameters;
}
- (void)setQueryParameters:(GEORPFeedbackQueryParameters *)v
{
    _flags.read_queryParameters = 1;
    _flags.wrote_queryParameters = 1;
    _queryParameters = v;
}

- (void)_readImageUploadParameters {
    if (_flags.read_imageUploadParameters) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_imageUploadParameters) {
            static const uint32_t tags[] = {4, 0};
            GEORPFeedbackRequestParametersReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasImageUploadParameters
{
    [self _readImageUploadParameters];
    return _imageUploadParameters != nil;
}
- (GEORPFeedbackImageUploadParameters *)imageUploadParameters
{
    [self _readImageUploadParameters];
    return _imageUploadParameters;
}
- (void)setImageUploadParameters:(GEORPFeedbackImageUploadParameters *)v
{
    _flags.read_imageUploadParameters = 1;
    _flags.wrote_imageUploadParameters = 1;
    _imageUploadParameters = v;
}

- (void)_readLayoutConfigParameters {
    if (_flags.read_layoutConfigParameters) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_layoutConfigParameters) {
            static const uint32_t tags[] = {5, 0};
            GEORPFeedbackRequestParametersReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasLayoutConfigParameters
{
    [self _readLayoutConfigParameters];
    return _layoutConfigParameters != nil;
}
- (GEORPFeedbackLayoutConfigParameters *)layoutConfigParameters
{
    [self _readLayoutConfigParameters];
    return _layoutConfigParameters;
}
- (void)setLayoutConfigParameters:(GEORPFeedbackLayoutConfigParameters *)v
{
    _flags.read_layoutConfigParameters = 1;
    _flags.wrote_layoutConfigParameters = 1;
    _layoutConfigParameters = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        GEORPFeedbackSubmissionParameters * value = self.submissionParameters;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"submission_parameters"];
        }
    }

    {
        GEORPFeedbackIdLookupParameters * value = self.idLookupParameters;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"id_lookup_parameters"];
        }
    }

    {
        GEORPFeedbackQueryParameters * value = self.queryParameters;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"query_parameters"];
        }
    }

    {
        GEORPFeedbackImageUploadParameters * value = self.imageUploadParameters;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"image_upload_parameters"];
        }
    }

    {
        GEORPFeedbackLayoutConfigParameters * value = self.layoutConfigParameters;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"layout_config_parameters"];
        }
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPFeedbackRequestParametersReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPFeedbackRequestParametersReadAllFrom(__unsafe_unretained GEORPFeedbackRequestParameters *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPFeedbackRequestParametersReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPFeedbackRequestParametersReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPFeedbackRequestParametersReadFrom(__unsafe_unretained GEORPFeedbackRequestParameters *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPFeedbackRequestParametersReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPFeedbackRequestParametersReadSpecified(__unsafe_unretained GEORPFeedbackRequestParameters *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_submissionParameters
        + self->_flags.read_idLookupParameters
        + self->_flags.read_queryParameters
        + self->_flags.read_imageUploadParameters
        + self->_flags.read_layoutConfigParameters
        + self->_flags.read_unknownFields
        ;
    #define requiredLazyFieldCount 4 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL shouldParseUnknown = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            case TAG_UNKNOWN_FIELDS:
                shouldParseUnknown = YES;
                ++readLazyCount;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
        shouldParseUnknown = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !(readAll || shouldParseUnknown);
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* submissionParameters */:
            {
                if (!shouldParseTag || self->_flags.read_submissionParameters) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_submissionParameters) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPFeedbackSubmissionParameters *new_submissionParameters = [[GEORPFeedbackSubmissionParameters alloc] init];
                self->_submissionParameters = new_submissionParameters;
                PBDataReaderMark mark_submissionParameters;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_submissionParameters);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackSubmissionParametersReadAllFrom(new_submissionParameters, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_submissionParameters);

                --tagsRemaining;
            }
            break;
            case 2 /* idLookupParameters */:
            {
                if (!shouldParseTag || self->_flags.read_idLookupParameters) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_idLookupParameters) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPFeedbackIdLookupParameters *new_idLookupParameters = [[GEORPFeedbackIdLookupParameters alloc] init];
                self->_idLookupParameters = new_idLookupParameters;
                PBDataReaderMark mark_idLookupParameters;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_idLookupParameters);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackIdLookupParametersReadAllFrom(new_idLookupParameters, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_idLookupParameters);

                --tagsRemaining;
            }
            break;
            case 3 /* queryParameters */:
            {
                if (!shouldParseTag || self->_flags.read_queryParameters) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_queryParameters) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPFeedbackQueryParameters *new_queryParameters = [[GEORPFeedbackQueryParameters alloc] init];
                self->_queryParameters = new_queryParameters;
                PBDataReaderMark mark_queryParameters;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_queryParameters);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackQueryParametersReadAllFrom(new_queryParameters, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_queryParameters);

                --tagsRemaining;
            }
            break;
            case 4 /* imageUploadParameters */:
            {
                if (!shouldParseTag || self->_flags.read_imageUploadParameters) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_imageUploadParameters) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPFeedbackImageUploadParameters *new_imageUploadParameters = [[GEORPFeedbackImageUploadParameters alloc] init];
                self->_imageUploadParameters = new_imageUploadParameters;
                PBDataReaderMark mark_imageUploadParameters;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_imageUploadParameters);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackImageUploadParametersReadAllFrom(new_imageUploadParameters, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_imageUploadParameters);

                --tagsRemaining;
            }
            break;
            case 5 /* layoutConfigParameters */:
            {
                if (!shouldParseTag || self->_flags.read_layoutConfigParameters) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_layoutConfigParameters) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPFeedbackLayoutConfigParameters *new_layoutConfigParameters = [[GEORPFeedbackLayoutConfigParameters alloc] init];
                self->_layoutConfigParameters = new_layoutConfigParameters;
                PBDataReaderMark mark_layoutConfigParameters;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_layoutConfigParameters);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackLayoutConfigParametersReadAllFrom(new_layoutConfigParameters, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_layoutConfigParameters);

                --tagsRemaining;
            }
            break;
            default:
                if (!shouldParseUnknown || self->_flags.read_unknownFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }

    if (shouldParseUnknown) {
        self->_flags.read_unknownFields = YES;
    }

    if (readAll) {
        if (recursively) {
            [self->_submissionParameters readAll:YES];
            [self->_idLookupParameters readAll:YES];
            [self->_queryParameters readAll:YES];
            [self->_imageUploadParameters readAll:YES];
            [self->_layoutConfigParameters readAll:YES];
        }
        self->_flags.read_submissionParameters = YES;
        self->_flags.read_idLookupParameters = YES;
        self->_flags.read_queryParameters = YES;
        self->_flags.read_imageUploadParameters = YES;
        self->_flags.read_layoutConfigParameters = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* submissionParameters */:
                    self->_flags.read_submissionParameters = YES;
                    break;
                case 2 /* idLookupParameters */:
                    self->_flags.read_idLookupParameters = YES;
                    break;
                case 3 /* queryParameters */:
                    self->_flags.read_queryParameters = YES;
                    break;
                case 4 /* imageUploadParameters */:
                    self->_flags.read_imageUploadParameters = YES;
                    break;
                case 5 /* layoutConfigParameters */:
                    self->_flags.read_layoutConfigParameters = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPFeedbackRequestParametersIsValid(reader);
}

BOOL GEORPFeedbackRequestParametersIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* submissionParameters */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_submissionParameters;
                    if (!PBReaderPlaceMark(reader, &mark_submissionParameters))
                        returnValue(NO);
                    if (!GEORPFeedbackSubmissionParametersIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_submissionParameters);
                }
                break;
            case 2 /* idLookupParameters */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_idLookupParameters;
                    if (!PBReaderPlaceMark(reader, &mark_idLookupParameters))
                        returnValue(NO);
                    if (!GEORPFeedbackIdLookupParametersIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_idLookupParameters);
                }
                break;
            case 3 /* queryParameters */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_queryParameters;
                    if (!PBReaderPlaceMark(reader, &mark_queryParameters))
                        returnValue(NO);
                    if (!GEORPFeedbackQueryParametersIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_queryParameters);
                }
                break;
            case 4 /* imageUploadParameters */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_imageUploadParameters;
                    if (!PBReaderPlaceMark(reader, &mark_imageUploadParameters))
                        returnValue(NO);
                    if (!GEORPFeedbackImageUploadParametersIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_imageUploadParameters);
                }
                break;
            case 5 /* layoutConfigParameters */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_layoutConfigParameters;
                    if (!PBReaderPlaceMark(reader, &mark_layoutConfigParameters))
                        returnValue(NO);
                    if (!GEORPFeedbackLayoutConfigParametersIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_layoutConfigParameters);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPFeedbackRequestParametersReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPFeedbackRequestParametersIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* submissionParameters */
    {
        if (self->_submissionParameters != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_submissionParameters, 1);
        }
    }

    /* idLookupParameters */
    {
        if (self->_idLookupParameters != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_idLookupParameters, 2);
        }
    }

    /* queryParameters */
    {
        if (self->_queryParameters != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_queryParameters, 3);
        }
    }

    /* imageUploadParameters */
    {
        if (self->_imageUploadParameters != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_imageUploadParameters, 4);
        }
    }

    /* layoutConfigParameters */
    {
        if (self->_layoutConfigParameters != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_layoutConfigParameters, 5);
        }
    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}

BOOL GEORPFeedbackRequestParametersIsDirty(__unsafe_unretained GEORPFeedbackRequestParameters *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_submissionParameters
        || (self->_flags.read_submissionParameters && GEORPFeedbackSubmissionParametersIsDirty(self->_submissionParameters))
        || self->_flags.wrote_idLookupParameters
        || (self->_flags.read_idLookupParameters && GEORPFeedbackIdLookupParametersIsDirty(self->_idLookupParameters))
        || self->_flags.wrote_queryParameters
        || (self->_flags.read_queryParameters && GEORPFeedbackQueryParametersIsDirty(self->_queryParameters))
        || self->_flags.wrote_imageUploadParameters
        || self->_flags.read_imageUploadParameters
        || self->_flags.wrote_layoutConfigParameters
        || (self->_flags.read_layoutConfigParameters && GEORPFeedbackLayoutConfigParametersIsDirty(self->_layoutConfigParameters))
        || self->_flags.wrote_unknownFields
    ;


    return dirty;
}


- (void)copyTo:(GEORPFeedbackRequestParameters *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_submissionParameters)
    {
        other.submissionParameters = _submissionParameters;
    }
    if (_idLookupParameters)
    {
        other.idLookupParameters = _idLookupParameters;
    }
    if (_queryParameters)
    {
        other.queryParameters = _queryParameters;
    }
    if (_imageUploadParameters)
    {
        other.imageUploadParameters = _imageUploadParameters;
    }
    if (_layoutConfigParameters)
    {
        other.layoutConfigParameters = _layoutConfigParameters;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPFeedbackRequestParameters *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_submissionParameters
                || _flags.wrote_idLookupParameters
                || _flags.wrote_queryParameters
                || _flags.wrote_imageUploadParameters
                || _flags.wrote_layoutConfigParameters
                || _flags.wrote_unknownFields
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPFeedbackRequestParametersReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_submissionParameters = [_submissionParameters copyWithZone:zone];
    copy->_idLookupParameters = [_idLookupParameters copyWithZone:zone];
    copy->_queryParameters = [_queryParameters copyWithZone:zone];
    copy->_imageUploadParameters = [_imageUploadParameters copyWithZone:zone];
    copy->_layoutConfigParameters = [_layoutConfigParameters copyWithZone:zone];
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPFeedbackRequestParameters *other = (GEORPFeedbackRequestParameters *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_submissionParameters && !other->_submissionParameters) || [self->_submissionParameters isEqual:other->_submissionParameters])
    &&
    ((!self->_idLookupParameters && !other->_idLookupParameters) || [self->_idLookupParameters isEqual:other->_idLookupParameters])
    &&
    ((!self->_queryParameters && !other->_queryParameters) || [self->_queryParameters isEqual:other->_queryParameters])
    &&
    ((!self->_imageUploadParameters && !other->_imageUploadParameters) || [self->_imageUploadParameters isEqual:other->_imageUploadParameters])
    &&
    ((!self->_layoutConfigParameters && !other->_layoutConfigParameters) || [self->_layoutConfigParameters isEqual:other->_layoutConfigParameters])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_submissionParameters hash]
    ^
    [self->_idLookupParameters hash]
    ^
    [self->_queryParameters hash]
    ^
    [self->_imageUploadParameters hash]
    ^
    [self->_layoutConfigParameters hash]
    ;
}

- (void)mergeFrom:(GEORPFeedbackRequestParameters *)other
{
    [other readAll:NO];
    if (self->_submissionParameters && other->_submissionParameters)
    {
        [self->_submissionParameters mergeFrom:other->_submissionParameters];
    }
    else if (!self->_submissionParameters && other->_submissionParameters)
    {
        [self setSubmissionParameters:other->_submissionParameters];
    }
    if (self->_idLookupParameters && other->_idLookupParameters)
    {
        [self->_idLookupParameters mergeFrom:other->_idLookupParameters];
    }
    else if (!self->_idLookupParameters && other->_idLookupParameters)
    {
        [self setIdLookupParameters:other->_idLookupParameters];
    }
    if (self->_queryParameters && other->_queryParameters)
    {
        [self->_queryParameters mergeFrom:other->_queryParameters];
    }
    else if (!self->_queryParameters && other->_queryParameters)
    {
        [self setQueryParameters:other->_queryParameters];
    }
    if (self->_imageUploadParameters && other->_imageUploadParameters)
    {
        [self->_imageUploadParameters mergeFrom:other->_imageUploadParameters];
    }
    else if (!self->_imageUploadParameters && other->_imageUploadParameters)
    {
        [self setImageUploadParameters:other->_imageUploadParameters];
    }
    if (self->_layoutConfigParameters && other->_layoutConfigParameters)
    {
        [self->_layoutConfigParameters mergeFrom:other->_layoutConfigParameters];
    }
    else if (!self->_layoutConfigParameters && other->_layoutConfigParameters)
    {
        [self setLayoutConfigParameters:other->_layoutConfigParameters];
    }
}

- (PBUnknownFields *)unknownFields
{
    if (_flags.read_unknownFields) return _unknownFields;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return _unknownFields;
    @synchronized(reader) {
        if (!_flags.read_unknownFields) {
            static const uint32_t tags[] = {TAG_UNKNOWN_FIELDS, 0};
            GEORPFeedbackRequestParametersReadSpecified(self, reader, tags);
        }
    }
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _flags.read_unknownFields = 1;
    _flags.wrote_unknownFields = 1;
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
    [_submissionParameters clearUnknownFields:YES];
    [_idLookupParameters clearUnknownFields:YES];
    [_queryParameters clearUnknownFields:YES];
    [_imageUploadParameters clearUnknownFields:YES];
    [_layoutConfigParameters clearUnknownFields:YES];
}

@end


