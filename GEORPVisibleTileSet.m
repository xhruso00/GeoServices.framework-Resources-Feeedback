// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPVisibleTileSet.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPVisibleTileSet


- (void)dealloc
{
    [self clearTileKeys];
}

- (GEOTileSetStyle)style
{
    return _flags.has_style ? _style : GEOTileSetStyle_RASTER_STANDARD;
}
- (void)setStyle:(GEOTileSetStyle)v
{
    _flags.has_style = 1;
    _style = v;
}
- (void)setHasStyle:(BOOL)f
{
    _flags.has_style = f ? 1 : 0;
}
- (BOOL)hasStyle
{
    return (BOOL)_flags.has_style;
}
- (NSString *)styleAsString:(GEOTileSetStyle)value
{
    return GEOTileSetStyleAsString(value);
}
- (GEOTileSetStyle)StringAsStyle:(NSString *)str
{
    return StringAsGEOTileSetStyle(str);
}

- (uint32_t)identifier
{
    return _identifier;
}
- (void)setIdentifier:(uint32_t)v
{
    _flags.has_identifier = 1;
    _identifier = v;
}
- (void)setHasIdentifier:(BOOL)f
{
    _flags.has_identifier = f ? 1 : 0;
}
- (BOOL)hasIdentifier
{
    return (BOOL)_flags.has_identifier;
}

- (NSUInteger)tileKeysCount
{
    return _tileKeysCount;
}
- (GEORPVisibleTileKey *)tileKeys
{
    return _tileKeys;
}
static BOOL _reserveTileKeys(GEORPVisibleTileSet *self, NSUInteger count)
{
    if (count == 0) return NO;
    if (self->_tileKeysCount + count <= self->_tileKeysCount) return NO;
    if (self->_tileKeysSpace >= self->_tileKeysCount + count) return YES;
    NSUInteger newSpace = PBNextPowerOf2NSUInteger(self->_tileKeysSpace + count);
    if (newSpace < count) return NO;
    NSUInteger newSize = newSpace * sizeof(GEORPVisibleTileKey);
    if (newSize < newSpace) return NO;
    void *newList = realloc(self->_tileKeys, newSize);
    if (!newList) return NO;
    self->_tileKeysSpace = newSpace;
    self->_tileKeys = newList;
    bzero(self->_tileKeys + self->_tileKeysCount, sizeof(GEORPVisibleTileKey) * (self->_tileKeysSpace - self->_tileKeysCount));
    return YES;
}
- (void)clearTileKeys
{
    self->_tileKeysSpace = 0;
    self->_tileKeysCount = 0;
    free(self->_tileKeys);
    self->_tileKeys = NULL;
}
- (void)addTileKey:(GEORPVisibleTileKey)i
{
    if (_reserveTileKeys(self, 1))
    {
        self->_tileKeys[self->_tileKeysCount] = i;
        self->_tileKeysCount++;
    }
}
- (GEORPVisibleTileKey)tileKeyAtIndex:(NSUInteger)idx
{
    if (_tileKeysCount <= idx)
    {
        [[NSException exceptionWithName:NSRangeException reason:[NSString stringWithFormat:@"idx (%tu) is out of range (%tu)", idx, _tileKeysCount] userInfo:nil] raise];
    }
    return _tileKeys[idx];
}
- (void)setTileKeys:(GEORPVisibleTileKey *)list count:(NSUInteger)count
{
    [self clearTileKeys];
    if (_reserveTileKeys(self, count))
    {
        memcpy(_tileKeys, list, sizeof(GEORPVisibleTileKey) * count);
        _tileKeysCount = count;
    }
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_style)
    {
        [dict setObject:GEOTileSetStyleAsString(self->_style) forKey:@"style"];
    }

    if (self->_flags.has_identifier)
    {
        [dict setObject:@(self->_identifier) forKey:@"identifier"];
    }

    if (self->_tileKeysCount)
    {
        NSMutableArray *tileKeysDictReprs = [[NSMutableArray alloc] initWithCapacity:self->_tileKeysCount];
        for (NSUInteger i_tileKey = 0; i_tileKey < self->_tileKeysCount; i_tileKey++)
        {
            [tileKeysDictReprs addObject:GEORPVisibleTileKeyDictionaryRepresentation(self->_tileKeys + i_tileKey)];
        }
        [dict setObject:tileKeysDictReprs forKey:@"tile_key"];
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively { /* noop */ }
BOOL GEORPVisibleTileSetReadAllFrom(__unsafe_unretained GEORPVisibleTileSet *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};

    @synchronized(reader) {
        BOOL result = GEORPVisibleTileSetReadSpecified(self, reader, recursively ? recursiveTag : nil);
        return result;
    }
}
BOOL GEORPVisibleTileSetReadFrom(__unsafe_unretained GEORPVisibleTileSet *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPVisibleTileSetReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPVisibleTileSetReadSpecified(__unsafe_unretained GEORPVisibleTileSet *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    #define shouldParseUnknown YES
    __attribute__((unused)) BOOL const recursively = (tags != nil && tags[0] == TAG_PARSE_ALL_RECURSIVE);
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
    #define shouldParseTag YES

        switch (tag) {

            case 1 /* style */:
            {
                self->_flags.has_style = YES;
                self->_style = PBReaderReadInt32(reader);

            }
            break;
            case 2 /* identifier */:
            {
                self->_flags.has_identifier = YES;
                self->_identifier = PBReaderReadUint32(reader);

            }
            break;
            case 3 /* tileKeys */:
            {
                _reserveTileKeys(self, 1);
                GEORPVisibleTileKey *new_tileKey = self->_tileKeys + self->_tileKeysCount;
                self->_tileKeysCount++;
                PBDataReaderMark mark_tileKey;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_tileKey);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPVisibleTileKeyReadAllFrom(new_tileKey, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_tileKey);

            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }



    #undef shouldParseTag
    #undef shouldParseUnknown
    #undef recursively
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPVisibleTileSetIsValid(reader);
}

BOOL GEORPVisibleTileSetIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* style */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 2 /* identifier */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint32(reader);
                break;
            case 3 /* tileKeys */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_tileKey;
                    if (!PBReaderPlaceMark(reader, &mark_tileKey))
                        returnValue(NO);
                    if (!GEORPVisibleTileKeyIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_tileKey);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPVisibleTileSetReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{

    /* style */
    {
        if (self->_flags.has_style)
        {
            PBDataWriterWriteInt32Field(writer, self->_style, 1);
        }
    }

    /* identifier */
    {
        if (self->_flags.has_identifier)
        {
            PBDataWriterWriteUint32Field(writer, self->_identifier, 2);
        }
    }

    /* tileKeys */
    {
        for (NSUInteger i_tileKey = 0; i_tileKey < self->_tileKeysCount; i_tileKey++)
        {
            PBDataWriterMark mark;
            PBDataWriterPlaceMark(writer, &mark, 3);
            GEORPVisibleTileKeyWriteTo(self->_tileKeys + i_tileKey, writer);
            PBDataWriterRecallMark(writer, &mark);

        }

    }
}



- (void)copyTo:(GEORPVisibleTileSet *)other
{
    [self readAll:NO];
    if (self->_flags.has_style)
    {
        other->_style = _style;
        other->_flags.has_style = YES;
    }
    if (self->_flags.has_identifier)
    {
        other->_identifier = _identifier;
        other->_flags.has_identifier = YES;
    }
    if ([self tileKeysCount])
    {
        [other clearTileKeys];
        NSUInteger tileKeysCnt = [self tileKeysCount];
        for (NSUInteger i = 0; i < tileKeysCnt; i++)
        {
            [other addTileKey:[self tileKeyAtIndex:i]];
        }
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPVisibleTileSet *copy = [[[self class] allocWithZone:zone] init];
    if (self->_flags.has_style)
    {
        copy->_style = _style;
        copy->_flags.has_style = YES;
    }
    if (self->_flags.has_identifier)
    {
        copy->_identifier = _identifier;
        copy->_flags.has_identifier = YES;
    }
    if (self->_tileKeysCount)
    {
        _reserveTileKeys(copy, self->_tileKeysCount);
        memcpy(copy->_tileKeys, self->_tileKeys, sizeof(GEORPVisibleTileKey) * self->_tileKeysCount);
        copy->_tileKeysCount = self->_tileKeysCount;
    }
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPVisibleTileSet *other = (GEORPVisibleTileSet *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_style && other->_flags.has_style && self->_style == other->_style) || (!self->_flags.has_style && !other->_flags.has_style))
    &&
    ((self->_flags.has_identifier && other->_flags.has_identifier && self->_identifier == other->_identifier) || (!self->_flags.has_identifier && !other->_flags.has_identifier))
    &&
    (self->_tileKeysCount == other->_tileKeysCount && 0 == (memcmp(self->_tileKeys, other->_tileKeys, sizeof(GEORPVisibleTileKey) * self->_tileKeysCount)))

    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_style ? PBHashInt((NSUInteger)self->_style) : 0)
    ^
    (self->_flags.has_identifier ? PBHashInt((NSUInteger)self->_identifier) : 0)
    ^
    PBHashBytes(self->_tileKeys, sizeof(GEORPVisibleTileKey) * self->_tileKeysCount)
    ;
}

- (void)mergeFrom:(GEORPVisibleTileSet *)other
{
    [other readAll:NO];
    if (other->_flags.has_style)
    {
        self->_style = other->_style;
        self->_flags.has_style = 1;
    }
    if (other->_flags.has_identifier)
    {
        self->_identifier = other->_identifier;
        self->_flags.has_identifier = 1;
    }
    NSUInteger tileKeysCnt = [other tileKeysCount];
    for (NSUInteger i = 0; i < tileKeysCnt; i++)
    {
        [self addTileKey:[other tileKeyAtIndex:i]];
    }
}


@end


