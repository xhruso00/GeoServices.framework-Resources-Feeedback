// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPResolution.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEOMapRegion.h>
#import <GeoServices/GEOPDPlace.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPResolution

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (double)resolutionDate
{
    return _resolutionDate;
}
- (void)setResolutionDate:(double)v
{
    _flags.wrote_resolutionDate = 1;
    _flags.has_resolutionDate = 1;
    _resolutionDate = v;
}
- (void)setHasResolutionDate:(BOOL)f
{
    _flags.wrote_resolutionDate = 1;
    _flags.has_resolutionDate = f ? 1 : 0;
}
- (BOOL)hasResolutionDate
{
    return (BOOL)_flags.has_resolutionDate;
}

- (void)_readDisplayRegion {
    if (_flags.read_displayRegion) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_displayRegion) {
            static const uint32_t tags[] = {3, 0};
            GEORPResolutionReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasDisplayRegion
{
    [self _readDisplayRegion];
    return _displayRegion != nil;
}
- (GEOMapRegion *)displayRegion
{
    [self _readDisplayRegion];
    return _displayRegion;
}
- (void)setDisplayRegion:(GEOMapRegion *)v
{
    _flags.read_displayRegion = 1;
    _flags.wrote_displayRegion = 1;
    _displayRegion = v;
}

- (void)_readLocalizedChangeLists {
    if (_flags.read_localizedChangeLists) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_localizedChangeLists) {
            static const uint32_t tags[] = {4, 0};
            GEORPResolutionReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<NSString *> *)localizedChangeLists
{
    [self _readLocalizedChangeLists];
    return _localizedChangeLists;
}
- (void)setLocalizedChangeLists:(NSMutableArray<NSString *> *)v
{
    _flags.read_localizedChangeLists = 1;
    _flags.wrote_localizedChangeLists = 1;
    _localizedChangeLists = v;
}
- (void)clearLocalizedChangeLists
{
    _flags.read_localizedChangeLists = 1;
    _flags.wrote_localizedChangeLists = 1;
    [_localizedChangeLists removeAllObjects];
}
- (void)addLocalizedChangeList:(NSString *)i
{
    [self _readLocalizedChangeLists];
    [self _addNoFlagsLocalizedChangeList:i];
    _flags.read_localizedChangeLists = 1;
    _flags.wrote_localizedChangeLists = 1;
}
- (void)_addNoFlagsLocalizedChangeList:(NSString *)i
{
    if (!_localizedChangeLists)
    {
        _localizedChangeLists = [[NSMutableArray alloc] init];
    }
    [_localizedChangeLists addObject:i];
}
- (NSUInteger)localizedChangeListsCount
{
    [self _readLocalizedChangeLists];
    return [_localizedChangeLists count];
}
- (NSString *)localizedChangeListAtIndex:(NSUInteger)idx
{
    [self _readLocalizedChangeLists];
    return [_localizedChangeLists objectAtIndex:idx];
}
+ (Class)localizedChangeListType
{
    return [NSString class];
}

- (void)_readUpdatedPlaces {
    if (_flags.read_updatedPlaces) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_updatedPlaces) {
            static const uint32_t tags[] = {5, 0};
            GEORPResolutionReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEOPDPlace *> *)updatedPlaces
{
    [self _readUpdatedPlaces];
    return _updatedPlaces;
}
- (void)setUpdatedPlaces:(NSMutableArray<GEOPDPlace *> *)v
{
    _flags.read_updatedPlaces = 1;
    _flags.wrote_updatedPlaces = 1;
    _updatedPlaces = v;
}
- (void)clearUpdatedPlaces
{
    _flags.read_updatedPlaces = 1;
    _flags.wrote_updatedPlaces = 1;
    [_updatedPlaces removeAllObjects];
}
- (void)addUpdatedPlace:(GEOPDPlace *)i
{
    [self _readUpdatedPlaces];
    [self _addNoFlagsUpdatedPlace:i];
    _flags.read_updatedPlaces = 1;
    _flags.wrote_updatedPlaces = 1;
}
- (void)_addNoFlagsUpdatedPlace:(GEOPDPlace *)i
{
    if (!_updatedPlaces)
    {
        _updatedPlaces = [[NSMutableArray alloc] init];
    }
    [_updatedPlaces addObject:i];
}
- (NSUInteger)updatedPlacesCount
{
    [self _readUpdatedPlaces];
    return [_updatedPlaces count];
}
- (GEOPDPlace *)updatedPlaceAtIndex:(NSUInteger)idx
{
    [self _readUpdatedPlaces];
    return [_updatedPlaces objectAtIndex:idx];
}
+ (Class)updatedPlaceType
{
    return [GEOPDPlace class];
}

- (uint64_t)transitLineMuid
{
    return _transitLineMuid;
}
- (void)setTransitLineMuid:(uint64_t)v
{
    _flags.wrote_transitLineMuid = 1;
    _flags.has_transitLineMuid = 1;
    _transitLineMuid = v;
}
- (void)setHasTransitLineMuid:(BOOL)f
{
    _flags.wrote_transitLineMuid = 1;
    _flags.has_transitLineMuid = f ? 1 : 0;
}
- (BOOL)hasTransitLineMuid
{
    return (BOOL)_flags.has_transitLineMuid;
}

- (void)_readLocalizedDescription {
    if (_flags.read_localizedDescription) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_localizedDescription) {
            static const uint32_t tags[] = {7, 0};
            GEORPResolutionReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasLocalizedDescription
{
    [self _readLocalizedDescription];
    return _localizedDescription != nil;
}
- (NSString *)localizedDescription
{
    [self _readLocalizedDescription];
    return _localizedDescription;
}
- (void)setLocalizedDescription:(NSString *)v
{
    _flags.read_localizedDescription = 1;
    _flags.wrote_localizedDescription = 1;
    _localizedDescription = v;
}

- (void)_readLocalizedAlertText {
    if (_flags.read_localizedAlertText) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_localizedAlertText) {
            static const uint32_t tags[] = {8, 0};
            GEORPResolutionReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasLocalizedAlertText
{
    [self _readLocalizedAlertText];
    return _localizedAlertText != nil;
}
- (NSString *)localizedAlertText
{
    [self _readLocalizedAlertText];
    return _localizedAlertText;
}
- (void)setLocalizedAlertText:(NSString *)v
{
    _flags.read_localizedAlertText = 1;
    _flags.wrote_localizedAlertText = 1;
    _localizedAlertText = v;
}

- (GEORPResolution_DisplayStyle)displayStyle
{
    return _flags.has_displayStyle ? _displayStyle : GEORPResolution_DisplayStyle_SHOW_ALL;
}
- (void)setDisplayStyle:(GEORPResolution_DisplayStyle)v
{
    _flags.wrote_displayStyle = 1;
    _flags.has_displayStyle = 1;
    _displayStyle = v;
}
- (void)setHasDisplayStyle:(BOOL)f
{
    _flags.wrote_displayStyle = 1;
    _flags.has_displayStyle = f ? 1 : 0;
}
- (BOOL)hasDisplayStyle
{
    return (BOOL)_flags.has_displayStyle;
}
- (NSString *)displayStyleAsString:(GEORPResolution_DisplayStyle)value
{
    return GEORPResolution_DisplayStyleAsString(value);
}
- (GEORPResolution_DisplayStyle)StringAsDisplayStyle:(NSString *)str
{
    return StringAsGEORPResolution_DisplayStyle(str);
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_resolutionDate)
    {
        [dict setObject:@(self->_resolutionDate) forKey:@"resolution_date"];
    }

    {
        GEOMapRegion * value = self.displayRegion;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"display_region"];
        }
    }

    if (self->_localizedChangeLists) {
        [dict setObject:self.localizedChangeLists forKey:@"localized_change_list"];
    }

    if ([self->_updatedPlaces count])
    {
        NSMutableArray *updatedPlacesDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_updatedPlaces count]];
        for (GEOPDPlace * i_updatedPlace in self->_updatedPlaces)
        {
            [updatedPlacesDictReprs addObject:[i_updatedPlace dictionaryRepresentation]];
        }
        [dict setObject:updatedPlacesDictReprs forKey:@"updated_place"];
    }

    if (self->_flags.has_transitLineMuid)
    {
        [dict setObject:@(self->_transitLineMuid) forKey:@"transit_line_muid"];
    }

    {
        NSString * value = self.localizedDescription;
        if (value) {
            [dict setObject:value forKey:@"localized_description"];
        }
    }

    {
        NSString * value = self.localizedAlertText;
        if (value) {
            [dict setObject:value forKey:@"localized_alert_text"];
        }
    }

    if (self->_flags.has_displayStyle)
    {
        [dict setObject:GEORPResolution_DisplayStyleAsString(self->_displayStyle) forKey:@"display_style"];
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPResolutionReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPResolutionReadAllFrom(__unsafe_unretained GEORPResolution *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPResolutionReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPResolutionReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPResolutionReadFrom(__unsafe_unretained GEORPResolution *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPResolutionReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPResolutionReadSpecified(__unsafe_unretained GEORPResolution *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_displayRegion
        + self->_flags.read_localizedChangeLists
        + self->_flags.read_updatedPlaces
        + self->_flags.read_localizedDescription
        + self->_flags.read_localizedAlertText
        ;
    #define requiredLazyFieldCount 4 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* resolutionDate */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_resolutionDate = YES;
                self->_resolutionDate = PBReaderReadDouble(reader);

            }
            break;
            case 3 /* displayRegion */:
            {
                if (!shouldParseTag || self->_flags.read_displayRegion) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_displayRegion) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOMapRegion *new_displayRegion = [[GEOMapRegion alloc] init];
                self->_displayRegion = new_displayRegion;
                PBDataReaderMark mark_displayRegion;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_displayRegion);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOMapRegionReadAllFrom(new_displayRegion, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_displayRegion);

                --tagsRemaining;
            }
            break;
            case 4 /* localizedChangeLists */:
            {
                if (!shouldParseTag || self->_flags.read_localizedChangeLists) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
            NSString *new_localizedChangeLists = PBReaderReadString(reader);
                if (new_localizedChangeLists)
                {
                    [self _addNoFlagsLocalizedChangeList:new_localizedChangeLists];
                }

            }
            break;
            case 5 /* updatedPlaces */:
            {
                if (!shouldParseTag || self->_flags.read_updatedPlaces) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEOPDPlace *new_updatedPlace = [[GEOPDPlace alloc] init];
                [self _addNoFlagsUpdatedPlace:new_updatedPlace];
                PBDataReaderMark mark_updatedPlace;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_updatedPlace);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPDPlaceReadAllFrom(new_updatedPlace, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_updatedPlace);

            }
            break;
            case 6 /* transitLineMuid */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_transitLineMuid = YES;
                self->_transitLineMuid = PBReaderReadUint64(reader);

            }
            break;
            case 7 /* localizedDescription */:
            {
                if (!shouldParseTag || self->_flags.read_localizedDescription) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_localizedDescription) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_localizedDescription = PBReaderReadString(reader);
                self->_localizedDescription = new_localizedDescription;

                --tagsRemaining;
            }
            break;
            case 8 /* localizedAlertText */:
            {
                if (!shouldParseTag || self->_flags.read_localizedAlertText) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_localizedAlertText) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_localizedAlertText = PBReaderReadString(reader);
                self->_localizedAlertText = new_localizedAlertText;

                --tagsRemaining;
            }
            break;
            case 9 /* displayStyle */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_displayStyle = YES;
                self->_displayStyle = PBReaderReadInt32(reader);

            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
            [self->_displayRegion readAll:YES];
            for (GEOPDPlace * i in self->_updatedPlaces)
                [i readAll:YES];
        }
        self->_flags.read_displayRegion = YES;
        self->_flags.read_localizedChangeLists = YES;
        self->_flags.read_updatedPlaces = YES;
        self->_flags.read_localizedDescription = YES;
        self->_flags.read_localizedAlertText = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 3 /* displayRegion */:
                    self->_flags.read_displayRegion = YES;
                    break;
                case 4 /* localizedChangeLists */:
                    self->_flags.read_localizedChangeLists = YES;
                    break;
                case 5 /* updatedPlaces */:
                    self->_flags.read_updatedPlaces = YES;
                    break;
                case 7 /* localizedDescription */:
                    self->_flags.read_localizedDescription = YES;
                    break;
                case 8 /* localizedAlertText */:
                    self->_flags.read_localizedAlertText = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPResolutionIsValid(reader);
}

BOOL GEORPResolutionIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* resolutionDate */:
                if (TYPE_FIXED64 != aType)
                    returnValue(NO);
                PBReaderReadDouble(reader);
                break;
            case 3 /* displayRegion */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_displayRegion;
                    if (!PBReaderPlaceMark(reader, &mark_displayRegion))
                        returnValue(NO);
                    if (!GEOMapRegionIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_displayRegion);
                }
                break;
            case 4 /* localizedChangeLists */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 5 /* updatedPlaces */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_updatedPlace;
                    if (!PBReaderPlaceMark(reader, &mark_updatedPlace))
                        returnValue(NO);
                    if (!GEOPDPlaceIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_updatedPlace);
                }
                break;
            case 6 /* transitLineMuid */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint64(reader);
                break;
            case 7 /* localizedDescription */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 8 /* localizedAlertText */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 9 /* displayStyle */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPResolutionReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPResolutionIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* resolutionDate */
    {
        if (self->_flags.has_resolutionDate)
        {
            PBDataWriterWriteDoubleField(writer, self->_resolutionDate, 1);
        }
    }

    /* displayRegion */
    {
        if (self->_displayRegion != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_displayRegion, 3);
        }
    }

    /* localizedChangeLists */
    {
        for (NSString * s_localizedChangeLists in self->_localizedChangeLists)
        {
            PBDataWriterWriteStringField(writer, s_localizedChangeLists, 4);
        }

    }

    /* updatedPlaces */
    {
        for (GEOPDPlace * i_updatedPlace in self->_updatedPlaces)
        {
            PBDataWriterWriteSubmessage(writer, i_updatedPlace, 5);
        }

    }

    /* transitLineMuid */
    {
        if (self->_flags.has_transitLineMuid)
        {
            PBDataWriterWriteUint64Field(writer, self->_transitLineMuid, 6);
        }
    }

    /* localizedDescription */
    {
        if (self->_localizedDescription)
        {
            PBDataWriterWriteStringField(writer, self->_localizedDescription, 7);
        }
    }

    /* localizedAlertText */
    {
        if (self->_localizedAlertText)
        {
            PBDataWriterWriteStringField(writer, self->_localizedAlertText, 8);
        }
    }

    /* displayStyle */
    {
        if (self->_flags.has_displayStyle)
        {
            PBDataWriterWriteInt32Field(writer, self->_displayStyle, 9);
        }
    }
}

BOOL GEORPResolutionIsDirty(__unsafe_unretained GEORPResolution *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_resolutionDate
        || self->_flags.wrote_displayRegion
        || self->_flags.read_displayRegion
        || self->_flags.wrote_localizedChangeLists
        || self->_flags.read_localizedChangeLists
        || self->_flags.wrote_updatedPlaces
        || self->_flags.wrote_transitLineMuid
        || self->_flags.wrote_localizedDescription
        || self->_flags.read_localizedDescription
        || self->_flags.wrote_localizedAlertText
        || self->_flags.read_localizedAlertText
        || self->_flags.wrote_displayStyle
    ;

    if (!dirty) {

            if (self->_flags.read_updatedPlaces) {
                for (GEOPDPlace *i in self->_updatedPlaces) {
                    if (GEOPDPlaceIsDirty(i)) {
                        return YES;
                    }
                }
            }
    }

    return dirty;
}


- (void)copyTo:(GEORPResolution *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (self->_flags.has_resolutionDate)
    {
        other->_resolutionDate = _resolutionDate;
        other->_flags.has_resolutionDate = YES;
    }
    if (_displayRegion)
    {
        other.displayRegion = _displayRegion;
    }
    if ([self localizedChangeListsCount])
    {
        [other clearLocalizedChangeLists];
        NSUInteger localizedChangeListsCnt = [self localizedChangeListsCount];
        for (NSUInteger i = 0; i < localizedChangeListsCnt; i++)
        {
            [other addLocalizedChangeList:[self localizedChangeListAtIndex:i]];
        }
    }
    if ([self updatedPlacesCount])
    {
        [other clearUpdatedPlaces];
        NSUInteger updatedPlacesCnt = [self updatedPlacesCount];
        for (NSUInteger i = 0; i < updatedPlacesCnt; i++)
        {
            [other addUpdatedPlace:[self updatedPlaceAtIndex:i]];
        }
    }
    if (self->_flags.has_transitLineMuid)
    {
        other->_transitLineMuid = _transitLineMuid;
        other->_flags.has_transitLineMuid = YES;
    }
    if (_localizedDescription)
    {
        other.localizedDescription = _localizedDescription;
    }
    if (_localizedAlertText)
    {
        other.localizedAlertText = _localizedAlertText;
    }
    if (self->_flags.has_displayStyle)
    {
        other->_displayStyle = _displayStyle;
        other->_flags.has_displayStyle = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPResolution *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_resolutionDate
                || _flags.wrote_displayRegion
                || _flags.wrote_localizedChangeLists
                || _flags.wrote_updatedPlaces
                || _flags.wrote_transitLineMuid
                || _flags.wrote_localizedDescription
                || _flags.wrote_localizedAlertText
                || _flags.wrote_displayStyle
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPResolutionReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    if (self->_flags.has_resolutionDate)
    {
        copy->_resolutionDate = _resolutionDate;
        copy->_flags.has_resolutionDate = YES;
    }
    copy->_displayRegion = [_displayRegion copyWithZone:zone];
    for (NSString * v in _localizedChangeLists)
    {
        NSString * vCopy = [v copyWithZone:zone];
        [copy addLocalizedChangeList:vCopy];
    }
    for (GEOPDPlace * v in _updatedPlaces)
    {
        GEOPDPlace * vCopy = [v copyWithZone:zone];
        [copy addUpdatedPlace:vCopy];
    }
    if (self->_flags.has_transitLineMuid)
    {
        copy->_transitLineMuid = _transitLineMuid;
        copy->_flags.has_transitLineMuid = YES;
    }
    copy->_localizedDescription = [_localizedDescription copyWithZone:zone];
    copy->_localizedAlertText = [_localizedAlertText copyWithZone:zone];
    if (self->_flags.has_displayStyle)
    {
        copy->_displayStyle = _displayStyle;
        copy->_flags.has_displayStyle = YES;
    }
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPResolution *other = (GEORPResolution *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_resolutionDate && other->_flags.has_resolutionDate && self->_resolutionDate == other->_resolutionDate) || (!self->_flags.has_resolutionDate && !other->_flags.has_resolutionDate))
    &&
    ((!self->_displayRegion && !other->_displayRegion) || [self->_displayRegion isEqual:other->_displayRegion])
    &&
    ((!self->_localizedChangeLists && !other->_localizedChangeLists) || [self->_localizedChangeLists isEqual:other->_localizedChangeLists])

    &&
    ((!self->_updatedPlaces && !other->_updatedPlaces) || [self->_updatedPlaces isEqual:other->_updatedPlaces])

    &&
    ((self->_flags.has_transitLineMuid && other->_flags.has_transitLineMuid && self->_transitLineMuid == other->_transitLineMuid) || (!self->_flags.has_transitLineMuid && !other->_flags.has_transitLineMuid))
    &&
    ((!self->_localizedDescription && !other->_localizedDescription) || [self->_localizedDescription isEqual:other->_localizedDescription])
    &&
    ((!self->_localizedAlertText && !other->_localizedAlertText) || [self->_localizedAlertText isEqual:other->_localizedAlertText])
    &&
    ((self->_flags.has_displayStyle && other->_flags.has_displayStyle && self->_displayStyle == other->_displayStyle) || (!self->_flags.has_displayStyle && !other->_flags.has_displayStyle))
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_resolutionDate ? PBHashDouble(self->_resolutionDate) : 0)
    ^
    [self->_displayRegion hash]
    ^
    [self->_localizedChangeLists hash]
    ^
    [self->_updatedPlaces hash]
    ^
    (self->_flags.has_transitLineMuid ? PBHashInt((NSUInteger)self->_transitLineMuid) : 0)
    ^
    [self->_localizedDescription hash]
    ^
    [self->_localizedAlertText hash]
    ^
    (self->_flags.has_displayStyle ? PBHashInt((NSUInteger)self->_displayStyle) : 0)
    ;
}

- (void)mergeFrom:(GEORPResolution *)other
{
    [other readAll:NO];
    if (other->_flags.has_resolutionDate)
    {
        self->_resolutionDate = other->_resolutionDate;
        self->_flags.has_resolutionDate = 1;
    }
    if (self->_displayRegion && other->_displayRegion)
    {
        [self->_displayRegion mergeFrom:other->_displayRegion];
    }
    else if (!self->_displayRegion && other->_displayRegion)
    {
        [self setDisplayRegion:other->_displayRegion];
    }
    for (NSString * iter_localizedChangeLists in other->_localizedChangeLists)
    {
        [self addLocalizedChangeList:iter_localizedChangeLists];
    }
    for (GEOPDPlace * iter_updatedPlaces in other->_updatedPlaces)
    {
        [self addUpdatedPlace:iter_updatedPlaces];
    }
    if (other->_flags.has_transitLineMuid)
    {
        self->_transitLineMuid = other->_transitLineMuid;
        self->_flags.has_transitLineMuid = 1;
    }
    if (other->_localizedDescription)
    {
        [self setLocalizedDescription:other->_localizedDescription];
    }
    if (other->_localizedAlertText)
    {
        [self setLocalizedAlertText:other->_localizedAlertText];
    }
    if (other->_flags.has_displayStyle)
    {
        self->_displayStyle = other->_displayStyle;
        self->_flags.has_displayStyle = 1;
    }
}


@end


