// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPPoiCorrections.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEORPAddressCorrections.h>
#import <GeoServices/GEORPAmenityCorrections.h>
#import <GeoServices/GEORPCategoryCorrections.h>
#import <GeoServices/GEORPFeedbackBusinessHours.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPPoiCorrections

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readName {
    if (_flags.read_name) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_name) {
            static const uint32_t tags[] = {1, 0};
            GEORPPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasName
{
    [self _readName];
    return _name != nil;
}
- (NSString *)name
{
    [self _readName];
    return _name;
}
- (void)setName:(NSString *)v
{
    _flags.read_name = 1;
    _flags.wrote_name = 1;
    _name = v;
}

- (void)_readPhone {
    if (_flags.read_phone) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_phone) {
            static const uint32_t tags[] = {2, 0};
            GEORPPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasPhone
{
    [self _readPhone];
    return _phone != nil;
}
- (NSString *)phone
{
    [self _readPhone];
    return _phone;
}
- (void)setPhone:(NSString *)v
{
    _flags.read_phone = 1;
    _flags.wrote_phone = 1;
    _phone = v;
}

- (void)_readAddress {
    if (_flags.read_address) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_address) {
            static const uint32_t tags[] = {3, 0};
            GEORPPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasAddress
{
    [self _readAddress];
    return _address != nil;
}
- (GEORPAddressCorrections *)address
{
    [self _readAddress];
    return _address;
}
- (void)setAddress:(GEORPAddressCorrections *)v
{
    _flags.read_address = 1;
    _flags.wrote_address = 1;
    _address = v;
}

- (void)_readBusinessHours {
    if (_flags.read_businessHours) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_businessHours) {
            static const uint32_t tags[] = {4, 0};
            GEORPPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPFeedbackBusinessHours *> *)businessHours
{
    [self _readBusinessHours];
    return _businessHours;
}
- (void)setBusinessHours:(NSMutableArray<GEORPFeedbackBusinessHours *> *)v
{
    _flags.read_businessHours = 1;
    _flags.wrote_businessHours = 1;
    _businessHours = v;
}
- (void)clearBusinessHours
{
    _flags.read_businessHours = 1;
    _flags.wrote_businessHours = 1;
    [_businessHours removeAllObjects];
}
- (void)addBusinessHours:(GEORPFeedbackBusinessHours *)i
{
    [self _readBusinessHours];
    [self _addNoFlagsBusinessHours:i];
    _flags.read_businessHours = 1;
    _flags.wrote_businessHours = 1;
}
- (void)_addNoFlagsBusinessHours:(GEORPFeedbackBusinessHours *)i
{
    if (!_businessHours)
    {
        _businessHours = [[NSMutableArray alloc] init];
    }
    [_businessHours addObject:i];
}
- (NSUInteger)businessHoursCount
{
    [self _readBusinessHours];
    return [_businessHours count];
}
- (GEORPFeedbackBusinessHours *)businessHoursAtIndex:(NSUInteger)idx
{
    [self _readBusinessHours];
    return [_businessHours objectAtIndex:idx];
}
+ (Class)businessHoursType
{
    return [GEORPFeedbackBusinessHours class];
}

- (void)_readUrl {
    if (_flags.read_url) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_url) {
            static const uint32_t tags[] = {5, 0};
            GEORPPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasUrl
{
    [self _readUrl];
    return _url != nil;
}
- (NSString *)url
{
    [self _readUrl];
    return _url;
}
- (void)setUrl:(NSString *)v
{
    _flags.read_url = 1;
    _flags.wrote_url = 1;
    _url = v;
}

- (void)_readCategory {
    if (_flags.read_category) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_category) {
            static const uint32_t tags[] = {6, 0};
            GEORPPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCategory
{
    [self _readCategory];
    return _category != nil;
}
- (GEORPCategoryCorrections *)category
{
    [self _readCategory];
    return _category;
}
- (void)setCategory:(GEORPCategoryCorrections *)v
{
    _flags.read_category = 1;
    _flags.wrote_category = 1;
    _category = v;
}

- (void)_readAmenity {
    if (_flags.read_amenity) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_amenity) {
            static const uint32_t tags[] = {7, 0};
            GEORPPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasAmenity
{
    [self _readAmenity];
    return _amenity != nil;
}
- (GEORPAmenityCorrections *)amenity
{
    [self _readAmenity];
    return _amenity;
}
- (void)setAmenity:(GEORPAmenityCorrections *)v
{
    _flags.read_amenity = 1;
    _flags.wrote_amenity = 1;
    _amenity = v;
}

- (BOOL)flagHoursIncorrect
{
    return _flagHoursIncorrect;
}
- (void)setFlagHoursIncorrect:(BOOL)v
{
    _flags.wrote_flagHoursIncorrect = 1;
    _flags.has_flagHoursIncorrect = 1;
    _flagHoursIncorrect = v;
}
- (void)setHasFlagHoursIncorrect:(BOOL)f
{
    _flags.wrote_flagHoursIncorrect = 1;
    _flags.has_flagHoursIncorrect = f ? 1 : 0;
}
- (BOOL)hasFlagHoursIncorrect
{
    return (BOOL)_flags.has_flagHoursIncorrect;
}

- (BOOL)flagNotAtThisAddress
{
    return _flagNotAtThisAddress;
}
- (void)setFlagNotAtThisAddress:(BOOL)v
{
    _flags.wrote_flagNotAtThisAddress = 1;
    _flags.has_flagNotAtThisAddress = 1;
    _flagNotAtThisAddress = v;
}
- (void)setHasFlagNotAtThisAddress:(BOOL)f
{
    _flags.wrote_flagNotAtThisAddress = 1;
    _flags.has_flagNotAtThisAddress = f ? 1 : 0;
}
- (BOOL)hasFlagNotAtThisAddress
{
    return (BOOL)_flags.has_flagNotAtThisAddress;
}

- (void)_readOriginalName {
    if (_flags.read_originalName) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_originalName) {
            static const uint32_t tags[] = {10, 0};
            GEORPPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasOriginalName
{
    [self _readOriginalName];
    return _originalName != nil;
}
- (NSString *)originalName
{
    [self _readOriginalName];
    return _originalName;
}
- (void)setOriginalName:(NSString *)v
{
    _flags.read_originalName = 1;
    _flags.wrote_originalName = 1;
    _originalName = v;
}

- (void)_readOriginalPhone {
    if (_flags.read_originalPhone) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_originalPhone) {
            static const uint32_t tags[] = {11, 0};
            GEORPPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasOriginalPhone
{
    [self _readOriginalPhone];
    return _originalPhone != nil;
}
- (NSString *)originalPhone
{
    [self _readOriginalPhone];
    return _originalPhone;
}
- (void)setOriginalPhone:(NSString *)v
{
    _flags.read_originalPhone = 1;
    _flags.wrote_originalPhone = 1;
    _originalPhone = v;
}

- (void)_readOriginalUrl {
    if (_flags.read_originalUrl) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_originalUrl) {
            static const uint32_t tags[] = {12, 0};
            GEORPPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasOriginalUrl
{
    [self _readOriginalUrl];
    return _originalUrl != nil;
}
- (NSString *)originalUrl
{
    [self _readOriginalUrl];
    return _originalUrl;
}
- (void)setOriginalUrl:(NSString *)v
{
    _flags.read_originalUrl = 1;
    _flags.wrote_originalUrl = 1;
    _originalUrl = v;
}

- (void)_readHoursText {
    if (_flags.read_hoursText) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_hoursText) {
            static const uint32_t tags[] = {13, 0};
            GEORPPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasHoursText
{
    [self _readHoursText];
    return _hoursText != nil;
}
- (NSString *)hoursText
{
    [self _readHoursText];
    return _hoursText;
}
- (void)setHoursText:(NSString *)v
{
    _flags.read_hoursText = 1;
    _flags.wrote_hoursText = 1;
    _hoursText = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        NSString * value = self.name;
        if (value) {
            [dict setObject:value forKey:@"name"];
        }
    }

    {
        NSString * value = self.phone;
        if (value) {
            [dict setObject:value forKey:@"phone"];
        }
    }

    {
        GEORPAddressCorrections * value = self.address;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"address"];
        }
    }

    if ([self->_businessHours count])
    {
        NSMutableArray *businessHoursDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_businessHours count]];
        for (GEORPFeedbackBusinessHours * i_businessHours in self->_businessHours)
        {
            [businessHoursDictReprs addObject:[i_businessHours dictionaryRepresentation]];
        }
        [dict setObject:businessHoursDictReprs forKey:@"business_hours"];
    }

    {
        NSString * value = self.url;
        if (value) {
            [dict setObject:value forKey:@"url"];
        }
    }

    {
        GEORPCategoryCorrections * value = self.category;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"category"];
        }
    }

    {
        GEORPAmenityCorrections * value = self.amenity;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"amenity"];
        }
    }

    if (self->_flags.has_flagHoursIncorrect)
    {
        [dict setObject:@(self->_flagHoursIncorrect) forKey:@"flag_hours_incorrect"];
    }

    if (self->_flags.has_flagNotAtThisAddress)
    {
        [dict setObject:@(self->_flagNotAtThisAddress) forKey:@"flag_not_at_this_address"];
    }

    {
        NSString * value = self.originalName;
        if (value) {
            [dict setObject:value forKey:@"original_name"];
        }
    }

    {
        NSString * value = self.originalPhone;
        if (value) {
            [dict setObject:value forKey:@"original_phone"];
        }
    }

    {
        NSString * value = self.originalUrl;
        if (value) {
            [dict setObject:value forKey:@"original_url"];
        }
    }

    {
        NSString * value = self.hoursText;
        if (value) {
            [dict setObject:value forKey:@"hours_text"];
        }
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPPoiCorrectionsReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPPoiCorrectionsReadAllFrom(__unsafe_unretained GEORPPoiCorrections *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPPoiCorrectionsReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPPoiCorrectionsReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPPoiCorrectionsReadFrom(__unsafe_unretained GEORPPoiCorrections *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPPoiCorrectionsReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPPoiCorrectionsReadSpecified(__unsafe_unretained GEORPPoiCorrections *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_name
        + self->_flags.read_phone
        + self->_flags.read_address
        + self->_flags.read_businessHours
        + self->_flags.read_url
        + self->_flags.read_category
        + self->_flags.read_amenity
        + self->_flags.read_originalName
        + self->_flags.read_originalPhone
        + self->_flags.read_originalUrl
        + self->_flags.read_hoursText
        + self->_flags.read_unknownFields
        ;
    #define requiredLazyFieldCount 8 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL shouldParseUnknown = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            case TAG_UNKNOWN_FIELDS:
                shouldParseUnknown = YES;
                ++readLazyCount;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
        shouldParseUnknown = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !(readAll || shouldParseUnknown);
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* name */:
            {
                if (!shouldParseTag || self->_flags.read_name) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_name) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_name = PBReaderReadString(reader);
                self->_name = new_name;

                --tagsRemaining;
            }
            break;
            case 2 /* phone */:
            {
                if (!shouldParseTag || self->_flags.read_phone) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_phone) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_phone = PBReaderReadString(reader);
                self->_phone = new_phone;

                --tagsRemaining;
            }
            break;
            case 3 /* address */:
            {
                if (!shouldParseTag || self->_flags.read_address) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_address) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPAddressCorrections *new_address = [[GEORPAddressCorrections alloc] init];
                self->_address = new_address;
                PBDataReaderMark mark_address;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_address);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPAddressCorrectionsReadAllFrom(new_address, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_address);

                --tagsRemaining;
            }
            break;
            case 4 /* businessHours */:
            {
                if (!shouldParseTag || self->_flags.read_businessHours) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPFeedbackBusinessHours *new_businessHours = [[GEORPFeedbackBusinessHours alloc] init];
                [self _addNoFlagsBusinessHours:new_businessHours];
                PBDataReaderMark mark_businessHours;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_businessHours);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackBusinessHoursReadAllFrom(new_businessHours, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_businessHours);

            }
            break;
            case 5 /* url */:
            {
                if (!shouldParseTag || self->_flags.read_url) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_url) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_url = PBReaderReadString(reader);
                self->_url = new_url;

                --tagsRemaining;
            }
            break;
            case 6 /* category */:
            {
                if (!shouldParseTag || self->_flags.read_category) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_category) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPCategoryCorrections *new_category = [[GEORPCategoryCorrections alloc] init];
                self->_category = new_category;
                PBDataReaderMark mark_category;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_category);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPCategoryCorrectionsReadAllFrom(new_category, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_category);

                --tagsRemaining;
            }
            break;
            case 7 /* amenity */:
            {
                if (!shouldParseTag || self->_flags.read_amenity) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_amenity) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPAmenityCorrections *new_amenity = [[GEORPAmenityCorrections alloc] init];
                self->_amenity = new_amenity;
                PBDataReaderMark mark_amenity;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_amenity);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPAmenityCorrectionsReadAllFrom(new_amenity, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_amenity);

                --tagsRemaining;
            }
            break;
            case 8 /* flagHoursIncorrect */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_flagHoursIncorrect = YES;
                self->_flagHoursIncorrect = PBReaderReadBOOL(reader);

            }
            break;
            case 9 /* flagNotAtThisAddress */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_flagNotAtThisAddress = YES;
                self->_flagNotAtThisAddress = PBReaderReadBOOL(reader);

            }
            break;
            case 10 /* originalName */:
            {
                if (!shouldParseTag || self->_flags.read_originalName) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_originalName) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_originalName = PBReaderReadString(reader);
                self->_originalName = new_originalName;

                --tagsRemaining;
            }
            break;
            case 11 /* originalPhone */:
            {
                if (!shouldParseTag || self->_flags.read_originalPhone) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_originalPhone) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_originalPhone = PBReaderReadString(reader);
                self->_originalPhone = new_originalPhone;

                --tagsRemaining;
            }
            break;
            case 12 /* originalUrl */:
            {
                if (!shouldParseTag || self->_flags.read_originalUrl) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_originalUrl) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_originalUrl = PBReaderReadString(reader);
                self->_originalUrl = new_originalUrl;

                --tagsRemaining;
            }
            break;
            case 13 /* hoursText */:
            {
                if (!shouldParseTag || self->_flags.read_hoursText) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_hoursText) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_hoursText = PBReaderReadString(reader);
                self->_hoursText = new_hoursText;

                --tagsRemaining;
            }
            break;
            default:
                if (!shouldParseUnknown || self->_flags.read_unknownFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }

    if (shouldParseUnknown) {
        self->_flags.read_unknownFields = YES;
    }

    if (readAll) {
        if (recursively) {
            [self->_address readAll:YES];
            for (GEORPFeedbackBusinessHours * i in self->_businessHours)
                [i readAll:YES];
            [self->_category readAll:YES];
            [self->_amenity readAll:YES];
        }
        self->_flags.read_name = YES;
        self->_flags.read_phone = YES;
        self->_flags.read_address = YES;
        self->_flags.read_businessHours = YES;
        self->_flags.read_url = YES;
        self->_flags.read_category = YES;
        self->_flags.read_amenity = YES;
        self->_flags.read_originalName = YES;
        self->_flags.read_originalPhone = YES;
        self->_flags.read_originalUrl = YES;
        self->_flags.read_hoursText = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* name */:
                    self->_flags.read_name = YES;
                    break;
                case 2 /* phone */:
                    self->_flags.read_phone = YES;
                    break;
                case 3 /* address */:
                    self->_flags.read_address = YES;
                    break;
                case 4 /* businessHours */:
                    self->_flags.read_businessHours = YES;
                    break;
                case 5 /* url */:
                    self->_flags.read_url = YES;
                    break;
                case 6 /* category */:
                    self->_flags.read_category = YES;
                    break;
                case 7 /* amenity */:
                    self->_flags.read_amenity = YES;
                    break;
                case 10 /* originalName */:
                    self->_flags.read_originalName = YES;
                    break;
                case 11 /* originalPhone */:
                    self->_flags.read_originalPhone = YES;
                    break;
                case 12 /* originalUrl */:
                    self->_flags.read_originalUrl = YES;
                    break;
                case 13 /* hoursText */:
                    self->_flags.read_hoursText = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPPoiCorrectionsIsValid(reader);
}

BOOL GEORPPoiCorrectionsIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* name */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 2 /* phone */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 3 /* address */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_address;
                    if (!PBReaderPlaceMark(reader, &mark_address))
                        returnValue(NO);
                    if (!GEORPAddressCorrectionsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_address);
                }
                break;
            case 4 /* businessHours */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_businessHours;
                    if (!PBReaderPlaceMark(reader, &mark_businessHours))
                        returnValue(NO);
                    if (!GEORPFeedbackBusinessHoursIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_businessHours);
                }
                break;
            case 5 /* url */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 6 /* category */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_category;
                    if (!PBReaderPlaceMark(reader, &mark_category))
                        returnValue(NO);
                    if (!GEORPCategoryCorrectionsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_category);
                }
                break;
            case 7 /* amenity */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_amenity;
                    if (!PBReaderPlaceMark(reader, &mark_amenity))
                        returnValue(NO);
                    if (!GEORPAmenityCorrectionsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_amenity);
                }
                break;
            case 8 /* flagHoursIncorrect */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 9 /* flagNotAtThisAddress */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 10 /* originalName */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 11 /* originalPhone */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 12 /* originalUrl */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 13 /* hoursText */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPPoiCorrectionsReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPPoiCorrectionsIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* name */
    {
        if (self->_name)
        {
            PBDataWriterWriteStringField(writer, self->_name, 1);
        }
    }

    /* phone */
    {
        if (self->_phone)
        {
            PBDataWriterWriteStringField(writer, self->_phone, 2);
        }
    }

    /* address */
    {
        if (self->_address != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_address, 3);
        }
    }

    /* businessHours */
    {
        for (GEORPFeedbackBusinessHours * i_businessHours in self->_businessHours)
        {
            PBDataWriterWriteSubmessage(writer, i_businessHours, 4);
        }

    }

    /* url */
    {
        if (self->_url)
        {
            PBDataWriterWriteStringField(writer, self->_url, 5);
        }
    }

    /* category */
    {
        if (self->_category != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_category, 6);
        }
    }

    /* amenity */
    {
        if (self->_amenity != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_amenity, 7);
        }
    }

    /* flagHoursIncorrect */
    {
        if (self->_flags.has_flagHoursIncorrect)
        {
            PBDataWriterWriteBOOLField(writer, self->_flagHoursIncorrect, 8);
        }
    }

    /* flagNotAtThisAddress */
    {
        if (self->_flags.has_flagNotAtThisAddress)
        {
            PBDataWriterWriteBOOLField(writer, self->_flagNotAtThisAddress, 9);
        }
    }

    /* originalName */
    {
        if (self->_originalName)
        {
            PBDataWriterWriteStringField(writer, self->_originalName, 10);
        }
    }

    /* originalPhone */
    {
        if (self->_originalPhone)
        {
            PBDataWriterWriteStringField(writer, self->_originalPhone, 11);
        }
    }

    /* originalUrl */
    {
        if (self->_originalUrl)
        {
            PBDataWriterWriteStringField(writer, self->_originalUrl, 12);
        }
    }

    /* hoursText */
    {
        if (self->_hoursText)
        {
            PBDataWriterWriteStringField(writer, self->_hoursText, 13);
        }
    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}

BOOL GEORPPoiCorrectionsIsDirty(__unsafe_unretained GEORPPoiCorrections *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_name
        || self->_flags.read_name
        || self->_flags.wrote_phone
        || self->_flags.read_phone
        || self->_flags.wrote_address
        || (self->_flags.read_address && GEORPAddressCorrectionsIsDirty(self->_address))
        || self->_flags.wrote_businessHours
        || self->_flags.wrote_url
        || self->_flags.read_url
        || self->_flags.wrote_category
        || (self->_flags.read_category && GEORPCategoryCorrectionsIsDirty(self->_category))
        || self->_flags.wrote_amenity
        || (self->_flags.read_amenity && GEORPAmenityCorrectionsIsDirty(self->_amenity))
        || self->_flags.wrote_flagHoursIncorrect
        || self->_flags.wrote_flagNotAtThisAddress
        || self->_flags.wrote_originalName
        || self->_flags.read_originalName
        || self->_flags.wrote_originalPhone
        || self->_flags.read_originalPhone
        || self->_flags.wrote_originalUrl
        || self->_flags.read_originalUrl
        || self->_flags.wrote_hoursText
        || self->_flags.read_hoursText
        || self->_flags.wrote_unknownFields
    ;

    if (!dirty) {

            if (self->_flags.read_businessHours) {
                for (GEORPFeedbackBusinessHours *i in self->_businessHours) {
                    if (GEORPFeedbackBusinessHoursIsDirty(i)) {
                        return YES;
                    }
                }
            }
    }

    return dirty;
}


- (void)copyTo:(GEORPPoiCorrections *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_name)
    {
        other.name = _name;
    }
    if (_phone)
    {
        other.phone = _phone;
    }
    if (_address)
    {
        other.address = _address;
    }
    if ([self businessHoursCount])
    {
        [other clearBusinessHours];
        NSUInteger businessHoursCnt = [self businessHoursCount];
        for (NSUInteger i = 0; i < businessHoursCnt; i++)
        {
            [other addBusinessHours:[self businessHoursAtIndex:i]];
        }
    }
    if (_url)
    {
        other.url = _url;
    }
    if (_category)
    {
        other.category = _category;
    }
    if (_amenity)
    {
        other.amenity = _amenity;
    }
    if (self->_flags.has_flagHoursIncorrect)
    {
        other->_flagHoursIncorrect = _flagHoursIncorrect;
        other->_flags.has_flagHoursIncorrect = YES;
    }
    if (self->_flags.has_flagNotAtThisAddress)
    {
        other->_flagNotAtThisAddress = _flagNotAtThisAddress;
        other->_flags.has_flagNotAtThisAddress = YES;
    }
    if (_originalName)
    {
        other.originalName = _originalName;
    }
    if (_originalPhone)
    {
        other.originalPhone = _originalPhone;
    }
    if (_originalUrl)
    {
        other.originalUrl = _originalUrl;
    }
    if (_hoursText)
    {
        other.hoursText = _hoursText;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPPoiCorrections *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_name
                || _flags.wrote_phone
                || _flags.wrote_address
                || _flags.wrote_businessHours
                || _flags.wrote_url
                || _flags.wrote_category
                || _flags.wrote_amenity
                || _flags.wrote_flagHoursIncorrect
                || _flags.wrote_flagNotAtThisAddress
                || _flags.wrote_originalName
                || _flags.wrote_originalPhone
                || _flags.wrote_originalUrl
                || _flags.wrote_hoursText
                || _flags.wrote_unknownFields
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPPoiCorrectionsReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_name = [_name copyWithZone:zone];
    copy->_phone = [_phone copyWithZone:zone];
    copy->_address = [_address copyWithZone:zone];
    for (GEORPFeedbackBusinessHours * v in _businessHours)
    {
        GEORPFeedbackBusinessHours * vCopy = [v copyWithZone:zone];
        [copy addBusinessHours:vCopy];
    }
    copy->_url = [_url copyWithZone:zone];
    copy->_category = [_category copyWithZone:zone];
    copy->_amenity = [_amenity copyWithZone:zone];
    if (self->_flags.has_flagHoursIncorrect)
    {
        copy->_flagHoursIncorrect = _flagHoursIncorrect;
        copy->_flags.has_flagHoursIncorrect = YES;
    }
    if (self->_flags.has_flagNotAtThisAddress)
    {
        copy->_flagNotAtThisAddress = _flagNotAtThisAddress;
        copy->_flags.has_flagNotAtThisAddress = YES;
    }
    copy->_originalName = [_originalName copyWithZone:zone];
    copy->_originalPhone = [_originalPhone copyWithZone:zone];
    copy->_originalUrl = [_originalUrl copyWithZone:zone];
    copy->_hoursText = [_hoursText copyWithZone:zone];
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPPoiCorrections *other = (GEORPPoiCorrections *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_name && !other->_name) || [self->_name isEqual:other->_name])
    &&
    ((!self->_phone && !other->_phone) || [self->_phone isEqual:other->_phone])
    &&
    ((!self->_address && !other->_address) || [self->_address isEqual:other->_address])
    &&
    ((!self->_businessHours && !other->_businessHours) || [self->_businessHours isEqual:other->_businessHours])

    &&
    ((!self->_url && !other->_url) || [self->_url isEqual:other->_url])
    &&
    ((!self->_category && !other->_category) || [self->_category isEqual:other->_category])
    &&
    ((!self->_amenity && !other->_amenity) || [self->_amenity isEqual:other->_amenity])
    &&
    ((self->_flags.has_flagHoursIncorrect && other->_flags.has_flagHoursIncorrect && ((self->_flagHoursIncorrect && other->_flagHoursIncorrect) || (!self->_flagHoursIncorrect && !other->_flagHoursIncorrect))) || (!self->_flags.has_flagHoursIncorrect && !other->_flags.has_flagHoursIncorrect))
    &&
    ((self->_flags.has_flagNotAtThisAddress && other->_flags.has_flagNotAtThisAddress && ((self->_flagNotAtThisAddress && other->_flagNotAtThisAddress) || (!self->_flagNotAtThisAddress && !other->_flagNotAtThisAddress))) || (!self->_flags.has_flagNotAtThisAddress && !other->_flags.has_flagNotAtThisAddress))
    &&
    ((!self->_originalName && !other->_originalName) || [self->_originalName isEqual:other->_originalName])
    &&
    ((!self->_originalPhone && !other->_originalPhone) || [self->_originalPhone isEqual:other->_originalPhone])
    &&
    ((!self->_originalUrl && !other->_originalUrl) || [self->_originalUrl isEqual:other->_originalUrl])
    &&
    ((!self->_hoursText && !other->_hoursText) || [self->_hoursText isEqual:other->_hoursText])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_name hash]
    ^
    [self->_phone hash]
    ^
    [self->_address hash]
    ^
    [self->_businessHours hash]
    ^
    [self->_url hash]
    ^
    [self->_category hash]
    ^
    [self->_amenity hash]
    ^
    (self->_flags.has_flagHoursIncorrect ? PBHashInt((NSUInteger)self->_flagHoursIncorrect) : 0)
    ^
    (self->_flags.has_flagNotAtThisAddress ? PBHashInt((NSUInteger)self->_flagNotAtThisAddress) : 0)
    ^
    [self->_originalName hash]
    ^
    [self->_originalPhone hash]
    ^
    [self->_originalUrl hash]
    ^
    [self->_hoursText hash]
    ;
}

- (void)mergeFrom:(GEORPPoiCorrections *)other
{
    [other readAll:NO];
    if (other->_name)
    {
        [self setName:other->_name];
    }
    if (other->_phone)
    {
        [self setPhone:other->_phone];
    }
    if (self->_address && other->_address)
    {
        [self->_address mergeFrom:other->_address];
    }
    else if (!self->_address && other->_address)
    {
        [self setAddress:other->_address];
    }
    for (GEORPFeedbackBusinessHours * iter_businessHours in other->_businessHours)
    {
        [self addBusinessHours:iter_businessHours];
    }
    if (other->_url)
    {
        [self setUrl:other->_url];
    }
    if (self->_category && other->_category)
    {
        [self->_category mergeFrom:other->_category];
    }
    else if (!self->_category && other->_category)
    {
        [self setCategory:other->_category];
    }
    if (self->_amenity && other->_amenity)
    {
        [self->_amenity mergeFrom:other->_amenity];
    }
    else if (!self->_amenity && other->_amenity)
    {
        [self setAmenity:other->_amenity];
    }
    if (other->_flags.has_flagHoursIncorrect)
    {
        self->_flagHoursIncorrect = other->_flagHoursIncorrect;
        self->_flags.has_flagHoursIncorrect = 1;
    }
    if (other->_flags.has_flagNotAtThisAddress)
    {
        self->_flagNotAtThisAddress = other->_flagNotAtThisAddress;
        self->_flags.has_flagNotAtThisAddress = 1;
    }
    if (other->_originalName)
    {
        [self setOriginalName:other->_originalName];
    }
    if (other->_originalPhone)
    {
        [self setOriginalPhone:other->_originalPhone];
    }
    if (other->_originalUrl)
    {
        [self setOriginalUrl:other->_originalUrl];
    }
    if (other->_hoursText)
    {
        [self setHoursText:other->_hoursText];
    }
}

- (PBUnknownFields *)unknownFields
{
    if (_flags.read_unknownFields) return _unknownFields;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return _unknownFields;
    @synchronized(reader) {
        if (!_flags.read_unknownFields) {
            static const uint32_t tags[] = {TAG_UNKNOWN_FIELDS, 0};
            GEORPPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _flags.read_unknownFields = 1;
    _flags.wrote_unknownFields = 1;
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
    [_address clearUnknownFields:YES];
    for (GEORPFeedbackBusinessHours * v in self.businessHours) {
        [v clearUnknownFields:YES];
    }
    [_category clearUnknownFields:YES];
    [_amenity clearUnknownFields:YES];
}

@end


