// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPProblemContext.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEOABAssignmentResponse.h>
#import <GeoServices/GEODirectionsRequest.h>
#import <GeoServices/GEODirectionsResponse.h>
#import <GeoServices/GEOPDPlace.h>
#import <GeoServices/GEOPlace.h>
#import <GeoServices/GEORPAuxiliaryControl.h>
#import <GeoServices/GEORPCurrentEnvironmentManifestURLs.h>
#import <GeoServices/GEORPMapLocation.h>
#import <GeoServices/GEORPMerchantLookupContext.h>
#import <GeoServices/GEORPNavigationSettings.h>
#import <GeoServices/GEORPPersonalizedMaps.h>
#import <GeoServices/GEORPPlaceInfo.h>
#import <GeoServices/GEORPSuggestionList.h>
#import <GeoServices/GEORPTransitLineTileInfo.h>
#import <GeoServices/GEORPVisibleTileSet.h>
#import <GeoServices/GEOServicesState.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPProblemContext

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (GEOSessionID)sessionId
{
    return _sessionId;
}
- (void)setSessionId:(GEOSessionID)v
{
    _flags.wrote_sessionId = 1;
    _flags.has_sessionId = 1;
    _sessionId = v;
}
- (void)setHasSessionId:(BOOL)f
{
    _flags.wrote_sessionId = 1;
    _flags.has_sessionId = f ? 1 : 0;
}
- (BOOL)hasSessionId
{
    return (BOOL)_flags.has_sessionId;
}

- (GEORPPinType)pinType
{
    return _flags.has_pinType ? _pinType : GEORPPinType_PIN_TYPE_UNKNOWN;
}
- (void)setPinType:(GEORPPinType)v
{
    _flags.wrote_pinType = 1;
    _flags.has_pinType = 1;
    _pinType = v;
}
- (void)setHasPinType:(BOOL)f
{
    _flags.wrote_pinType = 1;
    _flags.has_pinType = f ? 1 : 0;
}
- (BOOL)hasPinType
{
    return (BOOL)_flags.has_pinType;
}
- (NSString *)pinTypeAsString:(GEORPPinType)value
{
    return GEORPPinTypeAsString(value);
}
- (GEORPPinType)StringAsPinType:(NSString *)str
{
    return StringAsGEORPPinType(str);
}

- (void)_readOriginalPlace {
    if (_flags.read_originalPlace) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_originalPlace) {
            static const uint32_t tags[] = {3, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasOriginalPlace
{
    [self _readOriginalPlace];
    return _originalPlace != nil;
}
- (GEOPlace *)originalPlace
{
    [self _readOriginalPlace];
    return _originalPlace;
}
- (void)setOriginalPlace:(GEOPlace *)v
{
    _flags.read_originalPlace = 1;
    _flags.wrote_originalPlace = 1;
    _originalPlace = v;
}

- (void)_readMapLocation {
    if (_flags.read_mapLocation) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_mapLocation) {
            static const uint32_t tags[] = {4, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasMapLocation
{
    [self _readMapLocation];
    return _mapLocation != nil;
}
- (GEORPMapLocation *)mapLocation
{
    [self _readMapLocation];
    return _mapLocation;
}
- (void)setMapLocation:(GEORPMapLocation *)v
{
    _flags.read_mapLocation = 1;
    _flags.wrote_mapLocation = 1;
    _mapLocation = v;
}

- (void)_readVisibleTileSets {
    if (_flags.read_visibleTileSets) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_visibleTileSets) {
            static const uint32_t tags[] = {6, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPVisibleTileSet *> *)visibleTileSets
{
    [self _readVisibleTileSets];
    return _visibleTileSets;
}
- (void)setVisibleTileSets:(NSMutableArray<GEORPVisibleTileSet *> *)v
{
    _flags.read_visibleTileSets = 1;
    _flags.wrote_visibleTileSets = 1;
    _visibleTileSets = v;
}
- (void)clearVisibleTileSets
{
    _flags.read_visibleTileSets = 1;
    _flags.wrote_visibleTileSets = 1;
    [_visibleTileSets removeAllObjects];
}
- (void)addVisibleTileSet:(GEORPVisibleTileSet *)i
{
    [self _readVisibleTileSets];
    [self _addNoFlagsVisibleTileSet:i];
    _flags.read_visibleTileSets = 1;
    _flags.wrote_visibleTileSets = 1;
}
- (void)_addNoFlagsVisibleTileSet:(GEORPVisibleTileSet *)i
{
    if (!_visibleTileSets)
    {
        _visibleTileSets = [[NSMutableArray alloc] init];
    }
    [_visibleTileSets addObject:i];
}
- (NSUInteger)visibleTileSetsCount
{
    [self _readVisibleTileSets];
    return [_visibleTileSets count];
}
- (GEORPVisibleTileSet *)visibleTileSetAtIndex:(NSUInteger)idx
{
    [self _readVisibleTileSets];
    return [_visibleTileSets objectAtIndex:idx];
}
+ (Class)visibleTileSetType
{
    return [GEORPVisibleTileSet class];
}

- (void)_readTileStateLog {
    if (_flags.read_tileStateLog) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_tileStateLog) {
            static const uint32_t tags[] = {7, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasTileStateLog
{
    [self _readTileStateLog];
    return _tileStateLog != nil;
}
- (NSString *)tileStateLog
{
    [self _readTileStateLog];
    return _tileStateLog;
}
- (void)setTileStateLog:(NSString *)v
{
    _flags.read_tileStateLog = 1;
    _flags.wrote_tileStateLog = 1;
    _tileStateLog = v;
}

- (void)_readPlace {
    if (_flags.read_place) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_place) {
            static const uint32_t tags[] = {8, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasPlace
{
    [self _readPlace];
    return _place != nil;
}
- (GEOPDPlace *)place
{
    [self _readPlace];
    return _place;
}
- (void)setPlace:(GEOPDPlace *)v
{
    _flags.read_place = 1;
    _flags.wrote_place = 1;
    _place = v;
}

- (void)_readDirectionsRequests {
    if (_flags.read_directionsRequests) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_directionsRequests) {
            static const uint32_t tags[] = {9, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEODirectionsRequest *> *)directionsRequests
{
    [self _readDirectionsRequests];
    return _directionsRequests;
}
- (void)setDirectionsRequests:(NSMutableArray<GEODirectionsRequest *> *)v
{
    _flags.read_directionsRequests = 1;
    _flags.wrote_directionsRequests = 1;
    _directionsRequests = v;
}
- (void)clearDirectionsRequests
{
    _flags.read_directionsRequests = 1;
    _flags.wrote_directionsRequests = 1;
    [_directionsRequests removeAllObjects];
}
- (void)addDirectionsRequest:(GEODirectionsRequest *)i
{
    [self _readDirectionsRequests];
    [self _addNoFlagsDirectionsRequest:i];
    _flags.read_directionsRequests = 1;
    _flags.wrote_directionsRequests = 1;
}
- (void)_addNoFlagsDirectionsRequest:(GEODirectionsRequest *)i
{
    if (!_directionsRequests)
    {
        _directionsRequests = [[NSMutableArray alloc] init];
    }
    [_directionsRequests addObject:i];
}
- (NSUInteger)directionsRequestsCount
{
    [self _readDirectionsRequests];
    return [_directionsRequests count];
}
- (GEODirectionsRequest *)directionsRequestAtIndex:(NSUInteger)idx
{
    [self _readDirectionsRequests];
    return [_directionsRequests objectAtIndex:idx];
}
+ (Class)directionsRequestType
{
    return [GEODirectionsRequest class];
}

- (void)_readDirectionsResponses {
    if (_flags.read_directionsResponses) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_directionsResponses) {
            static const uint32_t tags[] = {10, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEODirectionsResponse *> *)directionsResponses
{
    [self _readDirectionsResponses];
    return _directionsResponses;
}
- (void)setDirectionsResponses:(NSMutableArray<GEODirectionsResponse *> *)v
{
    _flags.read_directionsResponses = 1;
    _flags.wrote_directionsResponses = 1;
    _directionsResponses = v;
}
- (void)clearDirectionsResponses
{
    _flags.read_directionsResponses = 1;
    _flags.wrote_directionsResponses = 1;
    [_directionsResponses removeAllObjects];
}
- (void)addDirectionsResponse:(GEODirectionsResponse *)i
{
    [self _readDirectionsResponses];
    [self _addNoFlagsDirectionsResponse:i];
    _flags.read_directionsResponses = 1;
    _flags.wrote_directionsResponses = 1;
}
- (void)_addNoFlagsDirectionsResponse:(GEODirectionsResponse *)i
{
    if (!_directionsResponses)
    {
        _directionsResponses = [[NSMutableArray alloc] init];
    }
    [_directionsResponses addObject:i];
}
- (NSUInteger)directionsResponsesCount
{
    [self _readDirectionsResponses];
    return [_directionsResponses count];
}
- (GEODirectionsResponse *)directionsResponseAtIndex:(NSUInteger)idx
{
    [self _readDirectionsResponses];
    return [_directionsResponses objectAtIndex:idx];
}
+ (Class)directionsResponseType
{
    return [GEODirectionsResponse class];
}

- (void)_readLastSearchString {
    if (_flags.read_lastSearchString) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_lastSearchString) {
            static const uint32_t tags[] = {12, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasLastSearchString
{
    [self _readLastSearchString];
    return _lastSearchString != nil;
}
- (NSString *)lastSearchString
{
    [self _readLastSearchString];
    return _lastSearchString;
}
- (void)setLastSearchString:(NSString *)v
{
    _flags.read_lastSearchString = 1;
    _flags.wrote_lastSearchString = 1;
    _lastSearchString = v;
}

- (double)creationDate
{
    return _creationDate;
}
- (void)setCreationDate:(double)v
{
    _flags.wrote_creationDate = 1;
    _flags.has_creationDate = 1;
    _creationDate = v;
}
- (void)setHasCreationDate:(BOOL)f
{
    _flags.wrote_creationDate = 1;
    _flags.has_creationDate = f ? 1 : 0;
}
- (BOOL)hasCreationDate
{
    return (BOOL)_flags.has_creationDate;
}

- (void)_readAuxiliaryControls {
    if (_flags.read_auxiliaryControls) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_auxiliaryControls) {
            static const uint32_t tags[] = {14, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPAuxiliaryControl *> *)auxiliaryControls
{
    [self _readAuxiliaryControls];
    return _auxiliaryControls;
}
- (void)setAuxiliaryControls:(NSMutableArray<GEORPAuxiliaryControl *> *)v
{
    _flags.read_auxiliaryControls = 1;
    _flags.wrote_auxiliaryControls = 1;
    _auxiliaryControls = v;
}
- (void)clearAuxiliaryControls
{
    _flags.read_auxiliaryControls = 1;
    _flags.wrote_auxiliaryControls = 1;
    [_auxiliaryControls removeAllObjects];
}
- (void)addAuxiliaryControl:(GEORPAuxiliaryControl *)i
{
    [self _readAuxiliaryControls];
    [self _addNoFlagsAuxiliaryControl:i];
    _flags.read_auxiliaryControls = 1;
    _flags.wrote_auxiliaryControls = 1;
}
- (void)_addNoFlagsAuxiliaryControl:(GEORPAuxiliaryControl *)i
{
    if (!_auxiliaryControls)
    {
        _auxiliaryControls = [[NSMutableArray alloc] init];
    }
    [_auxiliaryControls addObject:i];
}
- (NSUInteger)auxiliaryControlsCount
{
    [self _readAuxiliaryControls];
    return [_auxiliaryControls count];
}
- (GEORPAuxiliaryControl *)auxiliaryControlAtIndex:(NSUInteger)idx
{
    [self _readAuxiliaryControls];
    return [_auxiliaryControls objectAtIndex:idx];
}
+ (Class)auxiliaryControlType
{
    return [GEORPAuxiliaryControl class];
}

- (uint64_t)originatingAuxiliaryControlIndex
{
    return _originatingAuxiliaryControlIndex;
}
- (void)setOriginatingAuxiliaryControlIndex:(uint64_t)v
{
    _flags.wrote_originatingAuxiliaryControlIndex = 1;
    _flags.has_originatingAuxiliaryControlIndex = 1;
    _originatingAuxiliaryControlIndex = v;
}
- (void)setHasOriginatingAuxiliaryControlIndex:(BOOL)f
{
    _flags.wrote_originatingAuxiliaryControlIndex = 1;
    _flags.has_originatingAuxiliaryControlIndex = f ? 1 : 0;
}
- (BOOL)hasOriginatingAuxiliaryControlIndex
{
    return (BOOL)_flags.has_originatingAuxiliaryControlIndex;
}

- (void)_readTransitLineTileInfo {
    if (_flags.read_transitLineTileInfo) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_transitLineTileInfo) {
            static const uint32_t tags[] = {16, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasTransitLineTileInfo
{
    [self _readTransitLineTileInfo];
    return _transitLineTileInfo != nil;
}
- (GEORPTransitLineTileInfo *)transitLineTileInfo
{
    [self _readTransitLineTileInfo];
    return _transitLineTileInfo;
}
- (void)setTransitLineTileInfo:(GEORPTransitLineTileInfo *)v
{
    _flags.read_transitLineTileInfo = 1;
    _flags.wrote_transitLineTileInfo = 1;
    _transitLineTileInfo = v;
}

- (void)_readPlaceInfo {
    if (_flags.read_placeInfo) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_placeInfo) {
            static const uint32_t tags[] = {18, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasPlaceInfo
{
    [self _readPlaceInfo];
    return _placeInfo != nil;
}
- (GEORPPlaceInfo *)placeInfo
{
    [self _readPlaceInfo];
    return _placeInfo;
}
- (void)setPlaceInfo:(GEORPPlaceInfo *)v
{
    _flags.read_placeInfo = 1;
    _flags.wrote_placeInfo = 1;
    _placeInfo = v;
}

- (void)_readLastUserTypedSearchString {
    if (_flags.read_lastUserTypedSearchString) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_lastUserTypedSearchString) {
            static const uint32_t tags[] = {19, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasLastUserTypedSearchString
{
    [self _readLastUserTypedSearchString];
    return _lastUserTypedSearchString != nil;
}
- (NSString *)lastUserTypedSearchString
{
    [self _readLastUserTypedSearchString];
    return _lastUserTypedSearchString;
}
- (void)setLastUserTypedSearchString:(NSString *)v
{
    _flags.read_lastUserTypedSearchString = 1;
    _flags.wrote_lastUserTypedSearchString = 1;
    _lastUserTypedSearchString = v;
}

- (int32_t)deviceGmtOffset
{
    return _deviceGmtOffset;
}
- (void)setDeviceGmtOffset:(int32_t)v
{
    _flags.wrote_deviceGmtOffset = 1;
    _flags.has_deviceGmtOffset = 1;
    _deviceGmtOffset = v;
}
- (void)setHasDeviceGmtOffset:(BOOL)f
{
    _flags.wrote_deviceGmtOffset = 1;
    _flags.has_deviceGmtOffset = f ? 1 : 0;
}
- (BOOL)hasDeviceGmtOffset
{
    return (BOOL)_flags.has_deviceGmtOffset;
}

- (void)_readCurrentAbAssignmentResponse {
    if (_flags.read_currentAbAssignmentResponse) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_currentAbAssignmentResponse) {
            static const uint32_t tags[] = {21, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCurrentAbAssignmentResponse
{
    [self _readCurrentAbAssignmentResponse];
    return _currentAbAssignmentResponse != nil;
}
- (GEOABAssignmentResponse *)currentAbAssignmentResponse
{
    [self _readCurrentAbAssignmentResponse];
    return _currentAbAssignmentResponse;
}
- (void)setCurrentAbAssignmentResponse:(GEOABAssignmentResponse *)v
{
    _flags.read_currentAbAssignmentResponse = 1;
    _flags.wrote_currentAbAssignmentResponse = 1;
    _currentAbAssignmentResponse = v;
}

- (void)_readAutocompleteSuggestionLists {
    if (_flags.read_autocompleteSuggestionLists) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_autocompleteSuggestionLists) {
            static const uint32_t tags[] = {22, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPSuggestionList *> *)autocompleteSuggestionLists
{
    [self _readAutocompleteSuggestionLists];
    return _autocompleteSuggestionLists;
}
- (void)setAutocompleteSuggestionLists:(NSMutableArray<GEORPSuggestionList *> *)v
{
    _flags.read_autocompleteSuggestionLists = 1;
    _flags.wrote_autocompleteSuggestionLists = 1;
    _autocompleteSuggestionLists = v;
}
- (void)clearAutocompleteSuggestionLists
{
    _flags.read_autocompleteSuggestionLists = 1;
    _flags.wrote_autocompleteSuggestionLists = 1;
    [_autocompleteSuggestionLists removeAllObjects];
}
- (void)addAutocompleteSuggestionList:(GEORPSuggestionList *)i
{
    [self _readAutocompleteSuggestionLists];
    [self _addNoFlagsAutocompleteSuggestionList:i];
    _flags.read_autocompleteSuggestionLists = 1;
    _flags.wrote_autocompleteSuggestionLists = 1;
}
- (void)_addNoFlagsAutocompleteSuggestionList:(GEORPSuggestionList *)i
{
    if (!_autocompleteSuggestionLists)
    {
        _autocompleteSuggestionLists = [[NSMutableArray alloc] init];
    }
    [_autocompleteSuggestionLists addObject:i];
}
- (NSUInteger)autocompleteSuggestionListsCount
{
    [self _readAutocompleteSuggestionLists];
    return [_autocompleteSuggestionLists count];
}
- (GEORPSuggestionList *)autocompleteSuggestionListAtIndex:(NSUInteger)idx
{
    [self _readAutocompleteSuggestionLists];
    return [_autocompleteSuggestionLists objectAtIndex:idx];
}
+ (Class)autocompleteSuggestionListType
{
    return [GEORPSuggestionList class];
}

- (void)_readCurrentEnvironmentManifestUrls {
    if (_flags.read_currentEnvironmentManifestUrls) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_currentEnvironmentManifestUrls) {
            static const uint32_t tags[] = {23, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCurrentEnvironmentManifestUrls
{
    [self _readCurrentEnvironmentManifestUrls];
    return _currentEnvironmentManifestUrls != nil;
}
- (GEORPCurrentEnvironmentManifestURLs *)currentEnvironmentManifestUrls
{
    [self _readCurrentEnvironmentManifestUrls];
    return _currentEnvironmentManifestUrls;
}
- (void)setCurrentEnvironmentManifestUrls:(GEORPCurrentEnvironmentManifestURLs *)v
{
    _flags.read_currentEnvironmentManifestUrls = 1;
    _flags.wrote_currentEnvironmentManifestUrls = 1;
    _currentEnvironmentManifestUrls = v;
}

- (void)_readDirectionsWaypointPlaceInfos {
    if (_flags.read_directionsWaypointPlaceInfos) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_directionsWaypointPlaceInfos) {
            static const uint32_t tags[] = {24, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPPlaceInfo *> *)directionsWaypointPlaceInfos
{
    [self _readDirectionsWaypointPlaceInfos];
    return _directionsWaypointPlaceInfos;
}
- (void)setDirectionsWaypointPlaceInfos:(NSMutableArray<GEORPPlaceInfo *> *)v
{
    _flags.read_directionsWaypointPlaceInfos = 1;
    _flags.wrote_directionsWaypointPlaceInfos = 1;
    _directionsWaypointPlaceInfos = v;
}
- (void)clearDirectionsWaypointPlaceInfos
{
    _flags.read_directionsWaypointPlaceInfos = 1;
    _flags.wrote_directionsWaypointPlaceInfos = 1;
    [_directionsWaypointPlaceInfos removeAllObjects];
}
- (void)addDirectionsWaypointPlaceInfo:(GEORPPlaceInfo *)i
{
    [self _readDirectionsWaypointPlaceInfos];
    [self _addNoFlagsDirectionsWaypointPlaceInfo:i];
    _flags.read_directionsWaypointPlaceInfos = 1;
    _flags.wrote_directionsWaypointPlaceInfos = 1;
}
- (void)_addNoFlagsDirectionsWaypointPlaceInfo:(GEORPPlaceInfo *)i
{
    if (!_directionsWaypointPlaceInfos)
    {
        _directionsWaypointPlaceInfos = [[NSMutableArray alloc] init];
    }
    [_directionsWaypointPlaceInfos addObject:i];
}
- (NSUInteger)directionsWaypointPlaceInfosCount
{
    [self _readDirectionsWaypointPlaceInfos];
    return [_directionsWaypointPlaceInfos count];
}
- (GEORPPlaceInfo *)directionsWaypointPlaceInfoAtIndex:(NSUInteger)idx
{
    [self _readDirectionsWaypointPlaceInfos];
    return [_directionsWaypointPlaceInfos objectAtIndex:idx];
}
+ (Class)directionsWaypointPlaceInfoType
{
    return [GEORPPlaceInfo class];
}

- (void)_readServicesState {
    if (_flags.read_servicesState) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_servicesState) {
            static const uint32_t tags[] = {25, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasServicesState
{
    [self _readServicesState];
    return _servicesState != nil;
}
- (GEOServicesState *)servicesState
{
    [self _readServicesState];
    return _servicesState;
}
- (void)setServicesState:(GEOServicesState *)v
{
    _flags.read_servicesState = 1;
    _flags.wrote_servicesState = 1;
    _servicesState = v;
}

- (void)_readPersonalizedMaps {
    if (_flags.read_personalizedMaps) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_personalizedMaps) {
            static const uint32_t tags[] = {26, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasPersonalizedMaps
{
    [self _readPersonalizedMaps];
    return _personalizedMaps != nil;
}
- (GEORPPersonalizedMaps *)personalizedMaps
{
    [self _readPersonalizedMaps];
    return _personalizedMaps;
}
- (void)setPersonalizedMaps:(GEORPPersonalizedMaps *)v
{
    _flags.read_personalizedMaps = 1;
    _flags.wrote_personalizedMaps = 1;
    _personalizedMaps = v;
}

- (void)_readNavigationSettings {
    if (_flags.read_navigationSettings) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_navigationSettings) {
            static const uint32_t tags[] = {27, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasNavigationSettings
{
    [self _readNavigationSettings];
    return _navigationSettings != nil;
}
- (GEORPNavigationSettings *)navigationSettings
{
    [self _readNavigationSettings];
    return _navigationSettings;
}
- (void)setNavigationSettings:(GEORPNavigationSettings *)v
{
    _flags.read_navigationSettings = 1;
    _flags.wrote_navigationSettings = 1;
    _navigationSettings = v;
}

- (void)_readMerchantLookupContext {
    if (_flags.read_merchantLookupContext) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_merchantLookupContext) {
            static const uint32_t tags[] = {28, 0};
            GEORPProblemContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasMerchantLookupContext
{
    [self _readMerchantLookupContext];
    return _merchantLookupContext != nil;
}
- (GEORPMerchantLookupContext *)merchantLookupContext
{
    [self _readMerchantLookupContext];
    return _merchantLookupContext;
}
- (void)setMerchantLookupContext:(GEORPMerchantLookupContext *)v
{
    _flags.read_merchantLookupContext = 1;
    _flags.wrote_merchantLookupContext = 1;
    _merchantLookupContext = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_sessionId)
    {
        [dict setObject:GEOSessionIDDictionaryRepresentation(&(self->_sessionId)) forKey:@"session_id"];
    }

    if (self->_flags.has_pinType)
    {
        [dict setObject:GEORPPinTypeAsString(self->_pinType) forKey:@"pin_type"];
    }

    {
        GEOPlace * value = self.originalPlace;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"original_place"];
        }
    }

    {
        GEORPMapLocation * value = self.mapLocation;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"map_location"];
        }
    }

    if ([self->_visibleTileSets count])
    {
        NSMutableArray *visibleTileSetsDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_visibleTileSets count]];
        for (GEORPVisibleTileSet * i_visibleTileSet in self->_visibleTileSets)
        {
            [visibleTileSetsDictReprs addObject:[i_visibleTileSet dictionaryRepresentation]];
        }
        [dict setObject:visibleTileSetsDictReprs forKey:@"visible_tile_set"];
    }

    {
        NSString * value = self.tileStateLog;
        if (value) {
            [dict setObject:value forKey:@"tile_state_log"];
        }
    }

    {
        GEOPDPlace * value = self.place;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"place"];
        }
    }

    if ([self->_directionsRequests count])
    {
        NSMutableArray *directionsRequestsDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_directionsRequests count]];
        for (GEODirectionsRequest * i_directionsRequest in self->_directionsRequests)
        {
            [directionsRequestsDictReprs addObject:[i_directionsRequest dictionaryRepresentation]];
        }
        [dict setObject:directionsRequestsDictReprs forKey:@"directions_request"];
    }

    if ([self->_directionsResponses count])
    {
        NSMutableArray *directionsResponsesDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_directionsResponses count]];
        for (GEODirectionsResponse * i_directionsResponse in self->_directionsResponses)
        {
            [directionsResponsesDictReprs addObject:[i_directionsResponse dictionaryRepresentation]];
        }
        [dict setObject:directionsResponsesDictReprs forKey:@"directions_response"];
    }

    {
        NSString * value = self.lastSearchString;
        if (value) {
            [dict setObject:value forKey:@"last_search_string"];
        }
    }

    if (self->_flags.has_creationDate)
    {
        [dict setObject:@(self->_creationDate) forKey:@"creation_date"];
    }

    if ([self->_auxiliaryControls count])
    {
        NSMutableArray *auxiliaryControlsDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_auxiliaryControls count]];
        for (GEORPAuxiliaryControl * i_auxiliaryControl in self->_auxiliaryControls)
        {
            [auxiliaryControlsDictReprs addObject:[i_auxiliaryControl dictionaryRepresentation]];
        }
        [dict setObject:auxiliaryControlsDictReprs forKey:@"auxiliary_control"];
    }

    if (self->_flags.has_originatingAuxiliaryControlIndex)
    {
        [dict setObject:@(self->_originatingAuxiliaryControlIndex) forKey:@"originating_auxiliary_control_index"];
    }

    {
        GEORPTransitLineTileInfo * value = self.transitLineTileInfo;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"transit_line_tile_info"];
        }
    }

    {
        GEORPPlaceInfo * value = self.placeInfo;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"place_info"];
        }
    }

    {
        NSString * value = self.lastUserTypedSearchString;
        if (value) {
            [dict setObject:value forKey:@"last_user_typed_search_string"];
        }
    }

    if (self->_flags.has_deviceGmtOffset)
    {
        [dict setObject:@(self->_deviceGmtOffset) forKey:@"device_gmt_offset"];
    }

    {
        GEOABAssignmentResponse * value = self.currentAbAssignmentResponse;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"current_ab_assignment_response"];
        }
    }

    if ([self->_autocompleteSuggestionLists count])
    {
        NSMutableArray *autocompleteSuggestionListsDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_autocompleteSuggestionLists count]];
        for (GEORPSuggestionList * i_autocompleteSuggestionList in self->_autocompleteSuggestionLists)
        {
            [autocompleteSuggestionListsDictReprs addObject:[i_autocompleteSuggestionList dictionaryRepresentation]];
        }
        [dict setObject:autocompleteSuggestionListsDictReprs forKey:@"autocomplete_suggestion_list"];
    }

    {
        GEORPCurrentEnvironmentManifestURLs * value = self.currentEnvironmentManifestUrls;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"current_environment_manifest_urls"];
        }
    }

    if ([self->_directionsWaypointPlaceInfos count])
    {
        NSMutableArray *directionsWaypointPlaceInfosDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_directionsWaypointPlaceInfos count]];
        for (GEORPPlaceInfo * i_directionsWaypointPlaceInfo in self->_directionsWaypointPlaceInfos)
        {
            [directionsWaypointPlaceInfosDictReprs addObject:[i_directionsWaypointPlaceInfo dictionaryRepresentation]];
        }
        [dict setObject:directionsWaypointPlaceInfosDictReprs forKey:@"directions_waypoint_place_info"];
    }

    {
        GEOServicesState * value = self.servicesState;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"services_state"];
        }
    }

    {
        GEORPPersonalizedMaps * value = self.personalizedMaps;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"personalized_maps"];
        }
    }

    {
        GEORPNavigationSettings * value = self.navigationSettings;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"navigation_settings"];
        }
    }

    {
        GEORPMerchantLookupContext * value = self.merchantLookupContext;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"merchant_lookup_context"];
        }
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPProblemContextReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPProblemContextReadAllFrom(__unsafe_unretained GEORPProblemContext *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPProblemContextReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPProblemContextReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPProblemContextReadFrom(__unsafe_unretained GEORPProblemContext *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPProblemContextReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPProblemContextReadSpecified(__unsafe_unretained GEORPProblemContext *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_originalPlace
        + self->_flags.read_mapLocation
        + self->_flags.read_visibleTileSets
        + self->_flags.read_tileStateLog
        + self->_flags.read_place
        + self->_flags.read_directionsRequests
        + self->_flags.read_directionsResponses
        + self->_flags.read_lastSearchString
        + self->_flags.read_auxiliaryControls
        + self->_flags.read_transitLineTileInfo
        + self->_flags.read_placeInfo
        + self->_flags.read_lastUserTypedSearchString
        + self->_flags.read_currentAbAssignmentResponse
        + self->_flags.read_autocompleteSuggestionLists
        + self->_flags.read_currentEnvironmentManifestUrls
        + self->_flags.read_directionsWaypointPlaceInfos
        + self->_flags.read_servicesState
        + self->_flags.read_personalizedMaps
        + self->_flags.read_navigationSettings
        + self->_flags.read_merchantLookupContext
        ;
    #define requiredLazyFieldCount 16 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* sessionId */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEOSessionID *new_sessionId = &(self->_sessionId);
                PBDataReaderMark mark_sessionId;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_sessionId);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOSessionIDReadAllFrom(new_sessionId, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_sessionId);
            self->_flags.has_sessionId = YES;

            }
            break;
            case 2 /* pinType */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_pinType = YES;
                self->_pinType = PBReaderReadInt32(reader);

            }
            break;
            case 3 /* originalPlace */:
            {
                if (!shouldParseTag || self->_flags.read_originalPlace) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_originalPlace) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOPlace *new_originalPlace = [[GEOPlace alloc] init];
                self->_originalPlace = new_originalPlace;
                PBDataReaderMark mark_originalPlace;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_originalPlace);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPlaceReadAllFrom(new_originalPlace, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_originalPlace);

                --tagsRemaining;
            }
            break;
            case 4 /* mapLocation */:
            {
                if (!shouldParseTag || self->_flags.read_mapLocation) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_mapLocation) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPMapLocation *new_mapLocation = [[GEORPMapLocation alloc] init];
                self->_mapLocation = new_mapLocation;
                PBDataReaderMark mark_mapLocation;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_mapLocation);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPMapLocationReadAllFrom(new_mapLocation, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_mapLocation);

                --tagsRemaining;
            }
            break;
            case 6 /* visibleTileSets */:
            {
                if (!shouldParseTag || self->_flags.read_visibleTileSets) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPVisibleTileSet *new_visibleTileSet = [[GEORPVisibleTileSet alloc] init];
                [self _addNoFlagsVisibleTileSet:new_visibleTileSet];
                PBDataReaderMark mark_visibleTileSet;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_visibleTileSet);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPVisibleTileSetReadAllFrom(new_visibleTileSet, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_visibleTileSet);

            }
            break;
            case 7 /* tileStateLog */:
            {
                if (!shouldParseTag || self->_flags.read_tileStateLog) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_tileStateLog) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_tileStateLog = PBReaderReadString(reader);
                self->_tileStateLog = new_tileStateLog;

                --tagsRemaining;
            }
            break;
            case 8 /* place */:
            {
                if (!shouldParseTag || self->_flags.read_place) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_place) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOPDPlace *new_place = [[GEOPDPlace alloc] init];
                self->_place = new_place;
                PBDataReaderMark mark_place;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_place);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPDPlaceReadAllFrom(new_place, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_place);

                --tagsRemaining;
            }
            break;
            case 9 /* directionsRequests */:
            {
                if (!shouldParseTag || self->_flags.read_directionsRequests) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEODirectionsRequest *new_directionsRequest = [[GEODirectionsRequest alloc] init];
                [self _addNoFlagsDirectionsRequest:new_directionsRequest];
                PBDataReaderMark mark_directionsRequest;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_directionsRequest);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEODirectionsRequestReadAllFrom(new_directionsRequest, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_directionsRequest);

            }
            break;
            case 10 /* directionsResponses */:
            {
                if (!shouldParseTag || self->_flags.read_directionsResponses) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEODirectionsResponse *new_directionsResponse = [[GEODirectionsResponse alloc] init];
                [self _addNoFlagsDirectionsResponse:new_directionsResponse];
                PBDataReaderMark mark_directionsResponse;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_directionsResponse);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEODirectionsResponseReadAllFrom(new_directionsResponse, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_directionsResponse);

            }
            break;
            case 12 /* lastSearchString */:
            {
                if (!shouldParseTag || self->_flags.read_lastSearchString) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_lastSearchString) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_lastSearchString = PBReaderReadString(reader);
                self->_lastSearchString = new_lastSearchString;

                --tagsRemaining;
            }
            break;
            case 13 /* creationDate */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_creationDate = YES;
                self->_creationDate = PBReaderReadDouble(reader);

            }
            break;
            case 14 /* auxiliaryControls */:
            {
                if (!shouldParseTag || self->_flags.read_auxiliaryControls) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPAuxiliaryControl *new_auxiliaryControl = [[GEORPAuxiliaryControl alloc] init];
                [self _addNoFlagsAuxiliaryControl:new_auxiliaryControl];
                PBDataReaderMark mark_auxiliaryControl;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_auxiliaryControl);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPAuxiliaryControlReadAllFrom(new_auxiliaryControl, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_auxiliaryControl);

            }
            break;
            case 15 /* originatingAuxiliaryControlIndex */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_originatingAuxiliaryControlIndex = YES;
                self->_originatingAuxiliaryControlIndex = PBReaderReadUint64(reader);

            }
            break;
            case 16 /* transitLineTileInfo */:
            {
                if (!shouldParseTag || self->_flags.read_transitLineTileInfo) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_transitLineTileInfo) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPTransitLineTileInfo *new_transitLineTileInfo = [[GEORPTransitLineTileInfo alloc] init];
                self->_transitLineTileInfo = new_transitLineTileInfo;
                PBDataReaderMark mark_transitLineTileInfo;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_transitLineTileInfo);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPTransitLineTileInfoReadAllFrom(new_transitLineTileInfo, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_transitLineTileInfo);

                --tagsRemaining;
            }
            break;
            case 18 /* placeInfo */:
            {
                if (!shouldParseTag || self->_flags.read_placeInfo) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_placeInfo) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPPlaceInfo *new_placeInfo = [[GEORPPlaceInfo alloc] init];
                self->_placeInfo = new_placeInfo;
                PBDataReaderMark mark_placeInfo;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_placeInfo);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPPlaceInfoReadAllFrom(new_placeInfo, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_placeInfo);

                --tagsRemaining;
            }
            break;
            case 19 /* lastUserTypedSearchString */:
            {
                if (!shouldParseTag || self->_flags.read_lastUserTypedSearchString) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_lastUserTypedSearchString) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_lastUserTypedSearchString = PBReaderReadString(reader);
                self->_lastUserTypedSearchString = new_lastUserTypedSearchString;

                --tagsRemaining;
            }
            break;
            case 20 /* deviceGmtOffset */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_deviceGmtOffset = YES;
                self->_deviceGmtOffset = PBReaderReadSint32(reader);

            }
            break;
            case 21 /* currentAbAssignmentResponse */:
            {
                if (!shouldParseTag || self->_flags.read_currentAbAssignmentResponse) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_currentAbAssignmentResponse) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOABAssignmentResponse *new_currentAbAssignmentResponse = [[GEOABAssignmentResponse alloc] init];
                self->_currentAbAssignmentResponse = new_currentAbAssignmentResponse;
                PBDataReaderMark mark_currentAbAssignmentResponse;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_currentAbAssignmentResponse);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOABAssignmentResponseReadAllFrom(new_currentAbAssignmentResponse, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_currentAbAssignmentResponse);

                --tagsRemaining;
            }
            break;
            case 22 /* autocompleteSuggestionLists */:
            {
                if (!shouldParseTag || self->_flags.read_autocompleteSuggestionLists) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPSuggestionList *new_autocompleteSuggestionList = [[GEORPSuggestionList alloc] init];
                [self _addNoFlagsAutocompleteSuggestionList:new_autocompleteSuggestionList];
                PBDataReaderMark mark_autocompleteSuggestionList;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_autocompleteSuggestionList);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPSuggestionListReadAllFrom(new_autocompleteSuggestionList, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_autocompleteSuggestionList);

            }
            break;
            case 23 /* currentEnvironmentManifestUrls */:
            {
                if (!shouldParseTag || self->_flags.read_currentEnvironmentManifestUrls) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_currentEnvironmentManifestUrls) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPCurrentEnvironmentManifestURLs *new_currentEnvironmentManifestUrls = [[GEORPCurrentEnvironmentManifestURLs alloc] init];
                self->_currentEnvironmentManifestUrls = new_currentEnvironmentManifestUrls;
                PBDataReaderMark mark_currentEnvironmentManifestUrls;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_currentEnvironmentManifestUrls);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPCurrentEnvironmentManifestURLsReadAllFrom(new_currentEnvironmentManifestUrls, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_currentEnvironmentManifestUrls);

                --tagsRemaining;
            }
            break;
            case 24 /* directionsWaypointPlaceInfos */:
            {
                if (!shouldParseTag || self->_flags.read_directionsWaypointPlaceInfos) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPPlaceInfo *new_directionsWaypointPlaceInfo = [[GEORPPlaceInfo alloc] init];
                [self _addNoFlagsDirectionsWaypointPlaceInfo:new_directionsWaypointPlaceInfo];
                PBDataReaderMark mark_directionsWaypointPlaceInfo;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_directionsWaypointPlaceInfo);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPPlaceInfoReadAllFrom(new_directionsWaypointPlaceInfo, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_directionsWaypointPlaceInfo);

            }
            break;
            case 25 /* servicesState */:
            {
                if (!shouldParseTag || self->_flags.read_servicesState) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_servicesState) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOServicesState *new_servicesState = [[GEOServicesState alloc] init];
                self->_servicesState = new_servicesState;
                PBDataReaderMark mark_servicesState;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_servicesState);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOServicesStateReadAllFrom(new_servicesState, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_servicesState);

                --tagsRemaining;
            }
            break;
            case 26 /* personalizedMaps */:
            {
                if (!shouldParseTag || self->_flags.read_personalizedMaps) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_personalizedMaps) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPPersonalizedMaps *new_personalizedMaps = [[GEORPPersonalizedMaps alloc] init];
                self->_personalizedMaps = new_personalizedMaps;
                PBDataReaderMark mark_personalizedMaps;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_personalizedMaps);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPPersonalizedMapsReadAllFrom(new_personalizedMaps, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_personalizedMaps);

                --tagsRemaining;
            }
            break;
            case 27 /* navigationSettings */:
            {
                if (!shouldParseTag || self->_flags.read_navigationSettings) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_navigationSettings) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPNavigationSettings *new_navigationSettings = [[GEORPNavigationSettings alloc] init];
                self->_navigationSettings = new_navigationSettings;
                PBDataReaderMark mark_navigationSettings;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_navigationSettings);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPNavigationSettingsReadAllFrom(new_navigationSettings, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_navigationSettings);

                --tagsRemaining;
            }
            break;
            case 28 /* merchantLookupContext */:
            {
                if (!shouldParseTag || self->_flags.read_merchantLookupContext) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_merchantLookupContext) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPMerchantLookupContext *new_merchantLookupContext = [[GEORPMerchantLookupContext alloc] init];
                self->_merchantLookupContext = new_merchantLookupContext;
                PBDataReaderMark mark_merchantLookupContext;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_merchantLookupContext);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPMerchantLookupContextReadAllFrom(new_merchantLookupContext, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_merchantLookupContext);

                --tagsRemaining;
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
            [self->_originalPlace readAll:YES];
            [self->_mapLocation readAll:YES];
            for (GEORPVisibleTileSet * i in self->_visibleTileSets)
                [i readAll:YES];
            [self->_place readAll:YES];
            for (GEODirectionsRequest * i in self->_directionsRequests)
                [i readAll:YES];
            for (GEODirectionsResponse * i in self->_directionsResponses)
                [i readAll:YES];
            for (GEORPAuxiliaryControl * i in self->_auxiliaryControls)
                [i readAll:YES];
            [self->_transitLineTileInfo readAll:YES];
            [self->_placeInfo readAll:YES];
            [self->_currentAbAssignmentResponse readAll:YES];
            for (GEORPSuggestionList * i in self->_autocompleteSuggestionLists)
                [i readAll:YES];
            [self->_currentEnvironmentManifestUrls readAll:YES];
            for (GEORPPlaceInfo * i in self->_directionsWaypointPlaceInfos)
                [i readAll:YES];
            [self->_servicesState readAll:YES];
            [self->_personalizedMaps readAll:YES];
            [self->_navigationSettings readAll:YES];
            [self->_merchantLookupContext readAll:YES];
        }
        self->_flags.read_originalPlace = YES;
        self->_flags.read_mapLocation = YES;
        self->_flags.read_visibleTileSets = YES;
        self->_flags.read_tileStateLog = YES;
        self->_flags.read_place = YES;
        self->_flags.read_directionsRequests = YES;
        self->_flags.read_directionsResponses = YES;
        self->_flags.read_lastSearchString = YES;
        self->_flags.read_auxiliaryControls = YES;
        self->_flags.read_transitLineTileInfo = YES;
        self->_flags.read_placeInfo = YES;
        self->_flags.read_lastUserTypedSearchString = YES;
        self->_flags.read_currentAbAssignmentResponse = YES;
        self->_flags.read_autocompleteSuggestionLists = YES;
        self->_flags.read_currentEnvironmentManifestUrls = YES;
        self->_flags.read_directionsWaypointPlaceInfos = YES;
        self->_flags.read_servicesState = YES;
        self->_flags.read_personalizedMaps = YES;
        self->_flags.read_navigationSettings = YES;
        self->_flags.read_merchantLookupContext = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 3 /* originalPlace */:
                    self->_flags.read_originalPlace = YES;
                    break;
                case 4 /* mapLocation */:
                    self->_flags.read_mapLocation = YES;
                    break;
                case 6 /* visibleTileSets */:
                    self->_flags.read_visibleTileSets = YES;
                    break;
                case 7 /* tileStateLog */:
                    self->_flags.read_tileStateLog = YES;
                    break;
                case 8 /* place */:
                    self->_flags.read_place = YES;
                    break;
                case 9 /* directionsRequests */:
                    self->_flags.read_directionsRequests = YES;
                    break;
                case 10 /* directionsResponses */:
                    self->_flags.read_directionsResponses = YES;
                    break;
                case 12 /* lastSearchString */:
                    self->_flags.read_lastSearchString = YES;
                    break;
                case 14 /* auxiliaryControls */:
                    self->_flags.read_auxiliaryControls = YES;
                    break;
                case 16 /* transitLineTileInfo */:
                    self->_flags.read_transitLineTileInfo = YES;
                    break;
                case 18 /* placeInfo */:
                    self->_flags.read_placeInfo = YES;
                    break;
                case 19 /* lastUserTypedSearchString */:
                    self->_flags.read_lastUserTypedSearchString = YES;
                    break;
                case 21 /* currentAbAssignmentResponse */:
                    self->_flags.read_currentAbAssignmentResponse = YES;
                    break;
                case 22 /* autocompleteSuggestionLists */:
                    self->_flags.read_autocompleteSuggestionLists = YES;
                    break;
                case 23 /* currentEnvironmentManifestUrls */:
                    self->_flags.read_currentEnvironmentManifestUrls = YES;
                    break;
                case 24 /* directionsWaypointPlaceInfos */:
                    self->_flags.read_directionsWaypointPlaceInfos = YES;
                    break;
                case 25 /* servicesState */:
                    self->_flags.read_servicesState = YES;
                    break;
                case 26 /* personalizedMaps */:
                    self->_flags.read_personalizedMaps = YES;
                    break;
                case 27 /* navigationSettings */:
                    self->_flags.read_navigationSettings = YES;
                    break;
                case 28 /* merchantLookupContext */:
                    self->_flags.read_merchantLookupContext = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPProblemContextIsValid(reader);
}

BOOL GEORPProblemContextIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* sessionId */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_sessionId;
                    if (!PBReaderPlaceMark(reader, &mark_sessionId))
                        returnValue(NO);
                    if (!GEOSessionIDIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_sessionId);
                }
                break;
            case 2 /* pinType */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 3 /* originalPlace */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_originalPlace;
                    if (!PBReaderPlaceMark(reader, &mark_originalPlace))
                        returnValue(NO);
                    if (!GEOPlaceIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_originalPlace);
                }
                break;
            case 4 /* mapLocation */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_mapLocation;
                    if (!PBReaderPlaceMark(reader, &mark_mapLocation))
                        returnValue(NO);
                    if (!GEORPMapLocationIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_mapLocation);
                }
                break;
            case 6 /* visibleTileSets */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_visibleTileSet;
                    if (!PBReaderPlaceMark(reader, &mark_visibleTileSet))
                        returnValue(NO);
                    if (!GEORPVisibleTileSetIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_visibleTileSet);
                }
                break;
            case 7 /* tileStateLog */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 8 /* place */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_place;
                    if (!PBReaderPlaceMark(reader, &mark_place))
                        returnValue(NO);
                    if (!GEOPDPlaceIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_place);
                }
                break;
            case 9 /* directionsRequests */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_directionsRequest;
                    if (!PBReaderPlaceMark(reader, &mark_directionsRequest))
                        returnValue(NO);
                    if (!GEODirectionsRequestIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_directionsRequest);
                }
                break;
            case 10 /* directionsResponses */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_directionsResponse;
                    if (!PBReaderPlaceMark(reader, &mark_directionsResponse))
                        returnValue(NO);
                    if (!GEODirectionsResponseIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_directionsResponse);
                }
                break;
            case 12 /* lastSearchString */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 13 /* creationDate */:
                if (TYPE_FIXED64 != aType)
                    returnValue(NO);
                PBReaderReadDouble(reader);
                break;
            case 14 /* auxiliaryControls */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_auxiliaryControl;
                    if (!PBReaderPlaceMark(reader, &mark_auxiliaryControl))
                        returnValue(NO);
                    if (!GEORPAuxiliaryControlIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_auxiliaryControl);
                }
                break;
            case 15 /* originatingAuxiliaryControlIndex */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint64(reader);
                break;
            case 16 /* transitLineTileInfo */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_transitLineTileInfo;
                    if (!PBReaderPlaceMark(reader, &mark_transitLineTileInfo))
                        returnValue(NO);
                    if (!GEORPTransitLineTileInfoIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_transitLineTileInfo);
                }
                break;
            case 18 /* placeInfo */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_placeInfo;
                    if (!PBReaderPlaceMark(reader, &mark_placeInfo))
                        returnValue(NO);
                    if (!GEORPPlaceInfoIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_placeInfo);
                }
                break;
            case 19 /* lastUserTypedSearchString */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 20 /* deviceGmtOffset */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadSint32(reader);
                break;
            case 21 /* currentAbAssignmentResponse */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_currentAbAssignmentResponse;
                    if (!PBReaderPlaceMark(reader, &mark_currentAbAssignmentResponse))
                        returnValue(NO);
                    if (!GEOABAssignmentResponseIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_currentAbAssignmentResponse);
                }
                break;
            case 22 /* autocompleteSuggestionLists */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_autocompleteSuggestionList;
                    if (!PBReaderPlaceMark(reader, &mark_autocompleteSuggestionList))
                        returnValue(NO);
                    if (!GEORPSuggestionListIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_autocompleteSuggestionList);
                }
                break;
            case 23 /* currentEnvironmentManifestUrls */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_currentEnvironmentManifestUrls;
                    if (!PBReaderPlaceMark(reader, &mark_currentEnvironmentManifestUrls))
                        returnValue(NO);
                    if (!GEORPCurrentEnvironmentManifestURLsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_currentEnvironmentManifestUrls);
                }
                break;
            case 24 /* directionsWaypointPlaceInfos */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_directionsWaypointPlaceInfo;
                    if (!PBReaderPlaceMark(reader, &mark_directionsWaypointPlaceInfo))
                        returnValue(NO);
                    if (!GEORPPlaceInfoIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_directionsWaypointPlaceInfo);
                }
                break;
            case 25 /* servicesState */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_servicesState;
                    if (!PBReaderPlaceMark(reader, &mark_servicesState))
                        returnValue(NO);
                    if (!GEOServicesStateIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_servicesState);
                }
                break;
            case 26 /* personalizedMaps */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_personalizedMaps;
                    if (!PBReaderPlaceMark(reader, &mark_personalizedMaps))
                        returnValue(NO);
                    if (!GEORPPersonalizedMapsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_personalizedMaps);
                }
                break;
            case 27 /* navigationSettings */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_navigationSettings;
                    if (!PBReaderPlaceMark(reader, &mark_navigationSettings))
                        returnValue(NO);
                    if (!GEORPNavigationSettingsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_navigationSettings);
                }
                break;
            case 28 /* merchantLookupContext */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_merchantLookupContext;
                    if (!PBReaderPlaceMark(reader, &mark_merchantLookupContext))
                        returnValue(NO);
                    if (!GEORPMerchantLookupContextIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_merchantLookupContext);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPProblemContextReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPProblemContextIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* sessionId */
    {
        if (self->_flags.has_sessionId)
        {
            PBDataWriterMark mark;
            PBDataWriterPlaceMark(writer, &mark, 1);
            GEOSessionIDWriteTo(&(self->_sessionId), writer);
            PBDataWriterRecallMark(writer, &mark);
        }
    }

    /* pinType */
    {
        if (self->_flags.has_pinType)
        {
            PBDataWriterWriteInt32Field(writer, self->_pinType, 2);
        }
    }

    /* originalPlace */
    {
        if (self->_originalPlace != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_originalPlace, 3);
        }
    }

    /* mapLocation */
    {
        if (self->_mapLocation != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_mapLocation, 4);
        }
    }

    /* visibleTileSets */
    {
        for (GEORPVisibleTileSet * i_visibleTileSet in self->_visibleTileSets)
        {
            PBDataWriterWriteSubmessage(writer, i_visibleTileSet, 6);
        }

    }

    /* tileStateLog */
    {
        if (self->_tileStateLog)
        {
            PBDataWriterWriteStringField(writer, self->_tileStateLog, 7);
        }
    }

    /* place */
    {
        if (self->_place != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_place, 8);
        }
    }

    /* directionsRequests */
    {
        for (GEODirectionsRequest * i_directionsRequest in self->_directionsRequests)
        {
            PBDataWriterWriteSubmessage(writer, i_directionsRequest, 9);
        }

    }

    /* directionsResponses */
    {
        for (GEODirectionsResponse * i_directionsResponse in self->_directionsResponses)
        {
            PBDataWriterWriteSubmessage(writer, i_directionsResponse, 10);
        }

    }

    /* lastSearchString */
    {
        if (self->_lastSearchString)
        {
            PBDataWriterWriteStringField(writer, self->_lastSearchString, 12);
        }
    }

    /* creationDate */
    {
        if (self->_flags.has_creationDate)
        {
            PBDataWriterWriteDoubleField(writer, self->_creationDate, 13);
        }
    }

    /* auxiliaryControls */
    {
        for (GEORPAuxiliaryControl * i_auxiliaryControl in self->_auxiliaryControls)
        {
            PBDataWriterWriteSubmessage(writer, i_auxiliaryControl, 14);
        }

    }

    /* originatingAuxiliaryControlIndex */
    {
        if (self->_flags.has_originatingAuxiliaryControlIndex)
        {
            PBDataWriterWriteUint64Field(writer, self->_originatingAuxiliaryControlIndex, 15);
        }
    }

    /* transitLineTileInfo */
    {
        if (self->_transitLineTileInfo != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_transitLineTileInfo, 16);
        }
    }

    /* placeInfo */
    {
        if (self->_placeInfo != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_placeInfo, 18);
        }
    }

    /* lastUserTypedSearchString */
    {
        if (self->_lastUserTypedSearchString)
        {
            PBDataWriterWriteStringField(writer, self->_lastUserTypedSearchString, 19);
        }
    }

    /* deviceGmtOffset */
    {
        if (self->_flags.has_deviceGmtOffset)
        {
            PBDataWriterWriteSint32Field(writer, self->_deviceGmtOffset, 20);
        }
    }

    /* currentAbAssignmentResponse */
    {
        if (self->_currentAbAssignmentResponse != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_currentAbAssignmentResponse, 21);
        }
    }

    /* autocompleteSuggestionLists */
    {
        for (GEORPSuggestionList * i_autocompleteSuggestionList in self->_autocompleteSuggestionLists)
        {
            PBDataWriterWriteSubmessage(writer, i_autocompleteSuggestionList, 22);
        }

    }

    /* currentEnvironmentManifestUrls */
    {
        if (self->_currentEnvironmentManifestUrls != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_currentEnvironmentManifestUrls, 23);
        }
    }

    /* directionsWaypointPlaceInfos */
    {
        for (GEORPPlaceInfo * i_directionsWaypointPlaceInfo in self->_directionsWaypointPlaceInfos)
        {
            PBDataWriterWriteSubmessage(writer, i_directionsWaypointPlaceInfo, 24);
        }

    }

    /* servicesState */
    {
        if (self->_servicesState != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_servicesState, 25);
        }
    }

    /* personalizedMaps */
    {
        if (self->_personalizedMaps != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_personalizedMaps, 26);
        }
    }

    /* navigationSettings */
    {
        if (self->_navigationSettings != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_navigationSettings, 27);
        }
    }

    /* merchantLookupContext */
    {
        if (self->_merchantLookupContext != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_merchantLookupContext, 28);
        }
    }
}

BOOL GEORPProblemContextIsDirty(__unsafe_unretained GEORPProblemContext *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_sessionId
        || self->_flags.wrote_pinType
        || self->_flags.wrote_originalPlace
        || (self->_flags.read_originalPlace && GEOPlaceIsDirty(self->_originalPlace))
        || self->_flags.wrote_mapLocation
        || (self->_flags.read_mapLocation && GEORPMapLocationIsDirty(self->_mapLocation))
        || self->_flags.wrote_visibleTileSets
        || self->_flags.read_visibleTileSets
        || self->_flags.wrote_tileStateLog
        || self->_flags.read_tileStateLog
        || self->_flags.wrote_place
        || (self->_flags.read_place && GEOPDPlaceIsDirty(self->_place))
        || self->_flags.wrote_directionsRequests
        || self->_flags.wrote_directionsResponses
        || self->_flags.wrote_lastSearchString
        || self->_flags.read_lastSearchString
        || self->_flags.wrote_creationDate
        || self->_flags.wrote_auxiliaryControls
        || self->_flags.wrote_originatingAuxiliaryControlIndex
        || self->_flags.wrote_transitLineTileInfo
        || (self->_flags.read_transitLineTileInfo && GEORPTransitLineTileInfoIsDirty(self->_transitLineTileInfo))
        || self->_flags.wrote_placeInfo
        || (self->_flags.read_placeInfo && GEORPPlaceInfoIsDirty(self->_placeInfo))
        || self->_flags.wrote_lastUserTypedSearchString
        || self->_flags.read_lastUserTypedSearchString
        || self->_flags.wrote_deviceGmtOffset
        || self->_flags.wrote_currentAbAssignmentResponse
        || (self->_flags.read_currentAbAssignmentResponse && GEOABAssignmentResponseIsDirty(self->_currentAbAssignmentResponse))
        || self->_flags.wrote_autocompleteSuggestionLists
        || self->_flags.wrote_currentEnvironmentManifestUrls
        || (self->_flags.read_currentEnvironmentManifestUrls && GEORPCurrentEnvironmentManifestURLsIsDirty(self->_currentEnvironmentManifestUrls))
        || self->_flags.wrote_directionsWaypointPlaceInfos
        || self->_flags.wrote_servicesState
        || self->_flags.read_servicesState
        || self->_flags.wrote_personalizedMaps
        || self->_flags.read_personalizedMaps
        || self->_flags.wrote_navigationSettings
        || self->_flags.read_navigationSettings
        || self->_flags.wrote_merchantLookupContext
        || (self->_flags.read_merchantLookupContext && GEORPMerchantLookupContextIsDirty(self->_merchantLookupContext))
    ;

    if (!dirty) {

            if (self->_flags.read_directionsRequests) {
                for (GEODirectionsRequest *i in self->_directionsRequests) {
                    if (GEODirectionsRequestIsDirty(i)) {
                        return YES;
                    }
                }
            }

            if (self->_flags.read_directionsResponses) {
                for (GEODirectionsResponse *i in self->_directionsResponses) {
                    if (GEODirectionsResponseIsDirty(i)) {
                        return YES;
                    }
                }
            }

            if (self->_flags.read_auxiliaryControls) {
                for (GEORPAuxiliaryControl *i in self->_auxiliaryControls) {
                    if (GEORPAuxiliaryControlIsDirty(i)) {
                        return YES;
                    }
                }
            }

            if (self->_flags.read_autocompleteSuggestionLists) {
                for (GEORPSuggestionList *i in self->_autocompleteSuggestionLists) {
                    if (GEORPSuggestionListIsDirty(i)) {
                        return YES;
                    }
                }
            }

            if (self->_flags.read_directionsWaypointPlaceInfos) {
                for (GEORPPlaceInfo *i in self->_directionsWaypointPlaceInfos) {
                    if (GEORPPlaceInfoIsDirty(i)) {
                        return YES;
                    }
                }
            }
    }

    return dirty;
}


- (void)copyTo:(GEORPProblemContext *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (self->_flags.has_sessionId)
    {
        other->_sessionId = _sessionId;
        other->_flags.has_sessionId = YES;
    }
    if (self->_flags.has_pinType)
    {
        other->_pinType = _pinType;
        other->_flags.has_pinType = YES;
    }
    if (_originalPlace)
    {
        other.originalPlace = _originalPlace;
    }
    if (_mapLocation)
    {
        other.mapLocation = _mapLocation;
    }
    if ([self visibleTileSetsCount])
    {
        [other clearVisibleTileSets];
        NSUInteger visibleTileSetsCnt = [self visibleTileSetsCount];
        for (NSUInteger i = 0; i < visibleTileSetsCnt; i++)
        {
            [other addVisibleTileSet:[self visibleTileSetAtIndex:i]];
        }
    }
    if (_tileStateLog)
    {
        other.tileStateLog = _tileStateLog;
    }
    if (_place)
    {
        other.place = _place;
    }
    if ([self directionsRequestsCount])
    {
        [other clearDirectionsRequests];
        NSUInteger directionsRequestsCnt = [self directionsRequestsCount];
        for (NSUInteger i = 0; i < directionsRequestsCnt; i++)
        {
            [other addDirectionsRequest:[self directionsRequestAtIndex:i]];
        }
    }
    if ([self directionsResponsesCount])
    {
        [other clearDirectionsResponses];
        NSUInteger directionsResponsesCnt = [self directionsResponsesCount];
        for (NSUInteger i = 0; i < directionsResponsesCnt; i++)
        {
            [other addDirectionsResponse:[self directionsResponseAtIndex:i]];
        }
    }
    if (_lastSearchString)
    {
        other.lastSearchString = _lastSearchString;
    }
    if (self->_flags.has_creationDate)
    {
        other->_creationDate = _creationDate;
        other->_flags.has_creationDate = YES;
    }
    if ([self auxiliaryControlsCount])
    {
        [other clearAuxiliaryControls];
        NSUInteger auxiliaryControlsCnt = [self auxiliaryControlsCount];
        for (NSUInteger i = 0; i < auxiliaryControlsCnt; i++)
        {
            [other addAuxiliaryControl:[self auxiliaryControlAtIndex:i]];
        }
    }
    if (self->_flags.has_originatingAuxiliaryControlIndex)
    {
        other->_originatingAuxiliaryControlIndex = _originatingAuxiliaryControlIndex;
        other->_flags.has_originatingAuxiliaryControlIndex = YES;
    }
    if (_transitLineTileInfo)
    {
        other.transitLineTileInfo = _transitLineTileInfo;
    }
    if (_placeInfo)
    {
        other.placeInfo = _placeInfo;
    }
    if (_lastUserTypedSearchString)
    {
        other.lastUserTypedSearchString = _lastUserTypedSearchString;
    }
    if (self->_flags.has_deviceGmtOffset)
    {
        other->_deviceGmtOffset = _deviceGmtOffset;
        other->_flags.has_deviceGmtOffset = YES;
    }
    if (_currentAbAssignmentResponse)
    {
        other.currentAbAssignmentResponse = _currentAbAssignmentResponse;
    }
    if ([self autocompleteSuggestionListsCount])
    {
        [other clearAutocompleteSuggestionLists];
        NSUInteger autocompleteSuggestionListsCnt = [self autocompleteSuggestionListsCount];
        for (NSUInteger i = 0; i < autocompleteSuggestionListsCnt; i++)
        {
            [other addAutocompleteSuggestionList:[self autocompleteSuggestionListAtIndex:i]];
        }
    }
    if (_currentEnvironmentManifestUrls)
    {
        other.currentEnvironmentManifestUrls = _currentEnvironmentManifestUrls;
    }
    if ([self directionsWaypointPlaceInfosCount])
    {
        [other clearDirectionsWaypointPlaceInfos];
        NSUInteger directionsWaypointPlaceInfosCnt = [self directionsWaypointPlaceInfosCount];
        for (NSUInteger i = 0; i < directionsWaypointPlaceInfosCnt; i++)
        {
            [other addDirectionsWaypointPlaceInfo:[self directionsWaypointPlaceInfoAtIndex:i]];
        }
    }
    if (_servicesState)
    {
        other.servicesState = _servicesState;
    }
    if (_personalizedMaps)
    {
        other.personalizedMaps = _personalizedMaps;
    }
    if (_navigationSettings)
    {
        other.navigationSettings = _navigationSettings;
    }
    if (_merchantLookupContext)
    {
        other.merchantLookupContext = _merchantLookupContext;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPProblemContext *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_sessionId
                || _flags.wrote_pinType
                || _flags.wrote_originalPlace
                || _flags.wrote_mapLocation
                || _flags.wrote_visibleTileSets
                || _flags.wrote_tileStateLog
                || _flags.wrote_place
                || _flags.wrote_directionsRequests
                || _flags.wrote_directionsResponses
                || _flags.wrote_lastSearchString
                || _flags.wrote_creationDate
                || _flags.wrote_auxiliaryControls
                || _flags.wrote_originatingAuxiliaryControlIndex
                || _flags.wrote_transitLineTileInfo
                || _flags.wrote_placeInfo
                || _flags.wrote_lastUserTypedSearchString
                || _flags.wrote_deviceGmtOffset
                || _flags.wrote_currentAbAssignmentResponse
                || _flags.wrote_autocompleteSuggestionLists
                || _flags.wrote_currentEnvironmentManifestUrls
                || _flags.wrote_directionsWaypointPlaceInfos
                || _flags.wrote_servicesState
                || _flags.wrote_personalizedMaps
                || _flags.wrote_navigationSettings
                || _flags.wrote_merchantLookupContext
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPProblemContextReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    if (self->_flags.has_sessionId)
    {
        copy->_sessionId = _sessionId;
        copy->_flags.has_sessionId = YES;
    }
    if (self->_flags.has_pinType)
    {
        copy->_pinType = _pinType;
        copy->_flags.has_pinType = YES;
    }
    copy->_originalPlace = [_originalPlace copyWithZone:zone];
    copy->_mapLocation = [_mapLocation copyWithZone:zone];
    for (GEORPVisibleTileSet * v in _visibleTileSets)
    {
        GEORPVisibleTileSet * vCopy = [v copyWithZone:zone];
        [copy addVisibleTileSet:vCopy];
    }
    copy->_tileStateLog = [_tileStateLog copyWithZone:zone];
    copy->_place = [_place copyWithZone:zone];
    for (GEODirectionsRequest * v in _directionsRequests)
    {
        GEODirectionsRequest * vCopy = [v copyWithZone:zone];
        [copy addDirectionsRequest:vCopy];
    }
    for (GEODirectionsResponse * v in _directionsResponses)
    {
        GEODirectionsResponse * vCopy = [v copyWithZone:zone];
        [copy addDirectionsResponse:vCopy];
    }
    copy->_lastSearchString = [_lastSearchString copyWithZone:zone];
    if (self->_flags.has_creationDate)
    {
        copy->_creationDate = _creationDate;
        copy->_flags.has_creationDate = YES;
    }
    for (GEORPAuxiliaryControl * v in _auxiliaryControls)
    {
        GEORPAuxiliaryControl * vCopy = [v copyWithZone:zone];
        [copy addAuxiliaryControl:vCopy];
    }
    if (self->_flags.has_originatingAuxiliaryControlIndex)
    {
        copy->_originatingAuxiliaryControlIndex = _originatingAuxiliaryControlIndex;
        copy->_flags.has_originatingAuxiliaryControlIndex = YES;
    }
    copy->_transitLineTileInfo = [_transitLineTileInfo copyWithZone:zone];
    copy->_placeInfo = [_placeInfo copyWithZone:zone];
    copy->_lastUserTypedSearchString = [_lastUserTypedSearchString copyWithZone:zone];
    if (self->_flags.has_deviceGmtOffset)
    {
        copy->_deviceGmtOffset = _deviceGmtOffset;
        copy->_flags.has_deviceGmtOffset = YES;
    }
    copy->_currentAbAssignmentResponse = [_currentAbAssignmentResponse copyWithZone:zone];
    for (GEORPSuggestionList * v in _autocompleteSuggestionLists)
    {
        GEORPSuggestionList * vCopy = [v copyWithZone:zone];
        [copy addAutocompleteSuggestionList:vCopy];
    }
    copy->_currentEnvironmentManifestUrls = [_currentEnvironmentManifestUrls copyWithZone:zone];
    for (GEORPPlaceInfo * v in _directionsWaypointPlaceInfos)
    {
        GEORPPlaceInfo * vCopy = [v copyWithZone:zone];
        [copy addDirectionsWaypointPlaceInfo:vCopy];
    }
    copy->_servicesState = [_servicesState copyWithZone:zone];
    copy->_personalizedMaps = [_personalizedMaps copyWithZone:zone];
    copy->_navigationSettings = [_navigationSettings copyWithZone:zone];
    copy->_merchantLookupContext = [_merchantLookupContext copyWithZone:zone];
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPProblemContext *other = (GEORPProblemContext *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_sessionId && other->_flags.has_sessionId && GEOSessionIDEquals(&(self->_sessionId), &(other->_sessionId))) || (!self->_flags.has_sessionId && !other->_flags.has_sessionId))
    &&
    ((self->_flags.has_pinType && other->_flags.has_pinType && self->_pinType == other->_pinType) || (!self->_flags.has_pinType && !other->_flags.has_pinType))
    &&
    ((!self->_originalPlace && !other->_originalPlace) || [self->_originalPlace isEqual:other->_originalPlace])
    &&
    ((!self->_mapLocation && !other->_mapLocation) || [self->_mapLocation isEqual:other->_mapLocation])
    &&
    ((!self->_visibleTileSets && !other->_visibleTileSets) || [self->_visibleTileSets isEqual:other->_visibleTileSets])

    &&
    ((!self->_tileStateLog && !other->_tileStateLog) || [self->_tileStateLog isEqual:other->_tileStateLog])
    &&
    ((!self->_place && !other->_place) || [self->_place isEqual:other->_place])
    &&
    ((!self->_directionsRequests && !other->_directionsRequests) || [self->_directionsRequests isEqual:other->_directionsRequests])

    &&
    ((!self->_directionsResponses && !other->_directionsResponses) || [self->_directionsResponses isEqual:other->_directionsResponses])

    &&
    ((!self->_lastSearchString && !other->_lastSearchString) || [self->_lastSearchString isEqual:other->_lastSearchString])
    &&
    ((self->_flags.has_creationDate && other->_flags.has_creationDate && self->_creationDate == other->_creationDate) || (!self->_flags.has_creationDate && !other->_flags.has_creationDate))
    &&
    ((!self->_auxiliaryControls && !other->_auxiliaryControls) || [self->_auxiliaryControls isEqual:other->_auxiliaryControls])

    &&
    ((self->_flags.has_originatingAuxiliaryControlIndex && other->_flags.has_originatingAuxiliaryControlIndex && self->_originatingAuxiliaryControlIndex == other->_originatingAuxiliaryControlIndex) || (!self->_flags.has_originatingAuxiliaryControlIndex && !other->_flags.has_originatingAuxiliaryControlIndex))
    &&
    ((!self->_transitLineTileInfo && !other->_transitLineTileInfo) || [self->_transitLineTileInfo isEqual:other->_transitLineTileInfo])
    &&
    ((!self->_placeInfo && !other->_placeInfo) || [self->_placeInfo isEqual:other->_placeInfo])
    &&
    ((!self->_lastUserTypedSearchString && !other->_lastUserTypedSearchString) || [self->_lastUserTypedSearchString isEqual:other->_lastUserTypedSearchString])
    &&
    ((self->_flags.has_deviceGmtOffset && other->_flags.has_deviceGmtOffset && self->_deviceGmtOffset == other->_deviceGmtOffset) || (!self->_flags.has_deviceGmtOffset && !other->_flags.has_deviceGmtOffset))
    &&
    ((!self->_currentAbAssignmentResponse && !other->_currentAbAssignmentResponse) || [self->_currentAbAssignmentResponse isEqual:other->_currentAbAssignmentResponse])
    &&
    ((!self->_autocompleteSuggestionLists && !other->_autocompleteSuggestionLists) || [self->_autocompleteSuggestionLists isEqual:other->_autocompleteSuggestionLists])

    &&
    ((!self->_currentEnvironmentManifestUrls && !other->_currentEnvironmentManifestUrls) || [self->_currentEnvironmentManifestUrls isEqual:other->_currentEnvironmentManifestUrls])
    &&
    ((!self->_directionsWaypointPlaceInfos && !other->_directionsWaypointPlaceInfos) || [self->_directionsWaypointPlaceInfos isEqual:other->_directionsWaypointPlaceInfos])

    &&
    ((!self->_servicesState && !other->_servicesState) || [self->_servicesState isEqual:other->_servicesState])
    &&
    ((!self->_personalizedMaps && !other->_personalizedMaps) || [self->_personalizedMaps isEqual:other->_personalizedMaps])
    &&
    ((!self->_navigationSettings && !other->_navigationSettings) || [self->_navigationSettings isEqual:other->_navigationSettings])
    &&
    ((!self->_merchantLookupContext && !other->_merchantLookupContext) || [self->_merchantLookupContext isEqual:other->_merchantLookupContext])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_sessionId ? PBHashBytes(&(self->_sessionId), sizeof(GEOSessionID)) : 0)
    ^
    (self->_flags.has_pinType ? PBHashInt((NSUInteger)self->_pinType) : 0)
    ^
    [self->_originalPlace hash]
    ^
    [self->_mapLocation hash]
    ^
    [self->_visibleTileSets hash]
    ^
    [self->_tileStateLog hash]
    ^
    [self->_place hash]
    ^
    [self->_directionsRequests hash]
    ^
    [self->_directionsResponses hash]
    ^
    [self->_lastSearchString hash]
    ^
    (self->_flags.has_creationDate ? PBHashDouble(self->_creationDate) : 0)
    ^
    [self->_auxiliaryControls hash]
    ^
    (self->_flags.has_originatingAuxiliaryControlIndex ? PBHashInt((NSUInteger)self->_originatingAuxiliaryControlIndex) : 0)
    ^
    [self->_transitLineTileInfo hash]
    ^
    [self->_placeInfo hash]
    ^
    [self->_lastUserTypedSearchString hash]
    ^
    (self->_flags.has_deviceGmtOffset ? PBHashInt((NSUInteger)self->_deviceGmtOffset) : 0)
    ^
    [self->_currentAbAssignmentResponse hash]
    ^
    [self->_autocompleteSuggestionLists hash]
    ^
    [self->_currentEnvironmentManifestUrls hash]
    ^
    [self->_directionsWaypointPlaceInfos hash]
    ^
    [self->_servicesState hash]
    ^
    [self->_personalizedMaps hash]
    ^
    [self->_navigationSettings hash]
    ^
    [self->_merchantLookupContext hash]
    ;
}

- (void)mergeFrom:(GEORPProblemContext *)other
{
    [other readAll:NO];
    if (other->_flags.has_sessionId)
    {
        self->_sessionId = other->_sessionId;
        self->_flags.has_sessionId = 1;
    }
    if (other->_flags.has_pinType)
    {
        self->_pinType = other->_pinType;
        self->_flags.has_pinType = 1;
    }
    if (self->_originalPlace && other->_originalPlace)
    {
        [self->_originalPlace mergeFrom:other->_originalPlace];
    }
    else if (!self->_originalPlace && other->_originalPlace)
    {
        [self setOriginalPlace:other->_originalPlace];
    }
    if (self->_mapLocation && other->_mapLocation)
    {
        [self->_mapLocation mergeFrom:other->_mapLocation];
    }
    else if (!self->_mapLocation && other->_mapLocation)
    {
        [self setMapLocation:other->_mapLocation];
    }
    for (GEORPVisibleTileSet * iter_visibleTileSets in other->_visibleTileSets)
    {
        [self addVisibleTileSet:iter_visibleTileSets];
    }
    if (other->_tileStateLog)
    {
        [self setTileStateLog:other->_tileStateLog];
    }
    if (self->_place && other->_place)
    {
        [self->_place mergeFrom:other->_place];
    }
    else if (!self->_place && other->_place)
    {
        [self setPlace:other->_place];
    }
    for (GEODirectionsRequest * iter_directionsRequests in other->_directionsRequests)
    {
        [self addDirectionsRequest:iter_directionsRequests];
    }
    for (GEODirectionsResponse * iter_directionsResponses in other->_directionsResponses)
    {
        [self addDirectionsResponse:iter_directionsResponses];
    }
    if (other->_lastSearchString)
    {
        [self setLastSearchString:other->_lastSearchString];
    }
    if (other->_flags.has_creationDate)
    {
        self->_creationDate = other->_creationDate;
        self->_flags.has_creationDate = 1;
    }
    for (GEORPAuxiliaryControl * iter_auxiliaryControls in other->_auxiliaryControls)
    {
        [self addAuxiliaryControl:iter_auxiliaryControls];
    }
    if (other->_flags.has_originatingAuxiliaryControlIndex)
    {
        self->_originatingAuxiliaryControlIndex = other->_originatingAuxiliaryControlIndex;
        self->_flags.has_originatingAuxiliaryControlIndex = 1;
    }
    if (self->_transitLineTileInfo && other->_transitLineTileInfo)
    {
        [self->_transitLineTileInfo mergeFrom:other->_transitLineTileInfo];
    }
    else if (!self->_transitLineTileInfo && other->_transitLineTileInfo)
    {
        [self setTransitLineTileInfo:other->_transitLineTileInfo];
    }
    if (self->_placeInfo && other->_placeInfo)
    {
        [self->_placeInfo mergeFrom:other->_placeInfo];
    }
    else if (!self->_placeInfo && other->_placeInfo)
    {
        [self setPlaceInfo:other->_placeInfo];
    }
    if (other->_lastUserTypedSearchString)
    {
        [self setLastUserTypedSearchString:other->_lastUserTypedSearchString];
    }
    if (other->_flags.has_deviceGmtOffset)
    {
        self->_deviceGmtOffset = other->_deviceGmtOffset;
        self->_flags.has_deviceGmtOffset = 1;
    }
    if (self->_currentAbAssignmentResponse && other->_currentAbAssignmentResponse)
    {
        [self->_currentAbAssignmentResponse mergeFrom:other->_currentAbAssignmentResponse];
    }
    else if (!self->_currentAbAssignmentResponse && other->_currentAbAssignmentResponse)
    {
        [self setCurrentAbAssignmentResponse:other->_currentAbAssignmentResponse];
    }
    for (GEORPSuggestionList * iter_autocompleteSuggestionLists in other->_autocompleteSuggestionLists)
    {
        [self addAutocompleteSuggestionList:iter_autocompleteSuggestionLists];
    }
    if (self->_currentEnvironmentManifestUrls && other->_currentEnvironmentManifestUrls)
    {
        [self->_currentEnvironmentManifestUrls mergeFrom:other->_currentEnvironmentManifestUrls];
    }
    else if (!self->_currentEnvironmentManifestUrls && other->_currentEnvironmentManifestUrls)
    {
        [self setCurrentEnvironmentManifestUrls:other->_currentEnvironmentManifestUrls];
    }
    for (GEORPPlaceInfo * iter_directionsWaypointPlaceInfos in other->_directionsWaypointPlaceInfos)
    {
        [self addDirectionsWaypointPlaceInfo:iter_directionsWaypointPlaceInfos];
    }
    if (self->_servicesState && other->_servicesState)
    {
        [self->_servicesState mergeFrom:other->_servicesState];
    }
    else if (!self->_servicesState && other->_servicesState)
    {
        [self setServicesState:other->_servicesState];
    }
    if (self->_personalizedMaps && other->_personalizedMaps)
    {
        [self->_personalizedMaps mergeFrom:other->_personalizedMaps];
    }
    else if (!self->_personalizedMaps && other->_personalizedMaps)
    {
        [self setPersonalizedMaps:other->_personalizedMaps];
    }
    if (self->_navigationSettings && other->_navigationSettings)
    {
        [self->_navigationSettings mergeFrom:other->_navigationSettings];
    }
    else if (!self->_navigationSettings && other->_navigationSettings)
    {
        [self setNavigationSettings:other->_navigationSettings];
    }
    if (self->_merchantLookupContext && other->_merchantLookupContext)
    {
        [self->_merchantLookupContext mergeFrom:other->_merchantLookupContext];
    }
    else if (!self->_merchantLookupContext && other->_merchantLookupContext)
    {
        [self setMerchantLookupContext:other->_merchantLookupContext];
    }
}


@end


