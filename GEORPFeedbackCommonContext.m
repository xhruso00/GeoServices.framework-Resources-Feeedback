// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPFeedbackCommonContext.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEOABAssignmentResponse.h>
#import <GeoServices/GEORPAuxiliaryControl.h>
#import <GeoServices/GEORPCurrentEnvironmentManifestURLs.h>
#import <GeoServices/GEORPMapLocation.h>
#import <GeoServices/GEORPNavigationSettings.h>
#import <GeoServices/GEORPSearchCommonContext.h>
#import <GeoServices/GEORPSourceInfo.h>
#import <GeoServices/GEORPVisibleTileSet.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPFeedbackCommonContext

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)dealloc
{
    PBRepeatedInt32Clear(&(self->_userPaths));
}

- (GEORPPinType)pinType
{
    return _flags.has_pinType ? _pinType : GEORPPinType_PIN_TYPE_UNKNOWN;
}
- (void)setPinType:(GEORPPinType)v
{
    _flags.wrote_pinType = 1;
    _flags.has_pinType = 1;
    _pinType = v;
}
- (void)setHasPinType:(BOOL)f
{
    _flags.wrote_pinType = 1;
    _flags.has_pinType = f ? 1 : 0;
}
- (BOOL)hasPinType
{
    return (BOOL)_flags.has_pinType;
}
- (NSString *)pinTypeAsString:(GEORPPinType)value
{
    return GEORPPinTypeAsString(value);
}
- (GEORPPinType)StringAsPinType:(NSString *)str
{
    return StringAsGEORPPinType(str);
}

- (void)_readMapLocation {
    if (_flags.read_mapLocation) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_mapLocation) {
            static const uint32_t tags[] = {2, 0};
            GEORPFeedbackCommonContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasMapLocation
{
    [self _readMapLocation];
    return _mapLocation != nil;
}
- (GEORPMapLocation *)mapLocation
{
    [self _readMapLocation];
    return _mapLocation;
}
- (void)setMapLocation:(GEORPMapLocation *)v
{
    _flags.read_mapLocation = 1;
    _flags.wrote_mapLocation = 1;
    _mapLocation = v;
}

- (void)_readVisibleTileSets {
    if (_flags.read_visibleTileSets) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_visibleTileSets) {
            static const uint32_t tags[] = {3, 0};
            GEORPFeedbackCommonContextReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPVisibleTileSet *> *)visibleTileSets
{
    [self _readVisibleTileSets];
    return _visibleTileSets;
}
- (void)setVisibleTileSets:(NSMutableArray<GEORPVisibleTileSet *> *)v
{
    _flags.read_visibleTileSets = 1;
    _flags.wrote_visibleTileSets = 1;
    _visibleTileSets = v;
}
- (void)clearVisibleTileSets
{
    _flags.read_visibleTileSets = 1;
    _flags.wrote_visibleTileSets = 1;
    [_visibleTileSets removeAllObjects];
}
- (void)addVisibleTileSet:(GEORPVisibleTileSet *)i
{
    [self _readVisibleTileSets];
    [self _addNoFlagsVisibleTileSet:i];
    _flags.read_visibleTileSets = 1;
    _flags.wrote_visibleTileSets = 1;
}
- (void)_addNoFlagsVisibleTileSet:(GEORPVisibleTileSet *)i
{
    if (!_visibleTileSets)
    {
        _visibleTileSets = [[NSMutableArray alloc] init];
    }
    [_visibleTileSets addObject:i];
}
- (NSUInteger)visibleTileSetsCount
{
    [self _readVisibleTileSets];
    return [_visibleTileSets count];
}
- (GEORPVisibleTileSet *)visibleTileSetAtIndex:(NSUInteger)idx
{
    [self _readVisibleTileSets];
    return [_visibleTileSets objectAtIndex:idx];
}
+ (Class)visibleTileSetType
{
    return [GEORPVisibleTileSet class];
}

- (void)_readUserPaths {
    if (_flags.read_userPaths) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_userPaths) {
            static const uint32_t tags[] = {4, 0};
            GEORPFeedbackCommonContextReadSpecified(self, reader, tags);
        }
    }
}
- (NSUInteger)userPathsCount
{
    [self _readUserPaths];
    return _userPaths.count;
}
- (GEORPUserPathItem *)userPaths
{
    [self _readUserPaths];
    return _userPaths.list;
}
- (void)clearUserPaths
{
    _flags.read_userPaths = 1;
    _flags.wrote_userPaths = 1;
    PBRepeatedInt32Clear(&_userPaths);
}
- (void)addUserPath:(GEORPUserPathItem)i
{
    [self _readUserPaths];
    [self _addNoFlagsUserPath:i];
    _flags.read_userPaths = 1;
    _flags.wrote_userPaths = 1;
}
- (void)_addNoFlagsUserPath:(GEORPUserPathItem)i
{
    PBRepeatedInt32Add(&_userPaths, i);
}
- (GEORPUserPathItem)userPathAtIndex:(NSUInteger)idx
{
    [self _readUserPaths];
    if (_userPaths.count <= idx)
    {
        [[NSException exceptionWithName:NSRangeException reason:[NSString stringWithFormat:@"idx (%tu) is out of range (%tu)", idx, _userPaths.count] userInfo:nil] raise];
    }
    return _userPaths.list[idx];
}
- (void)setUserPaths:(GEORPUserPathItem *)list count:(NSUInteger)count
{
    _flags.read_userPaths = 1;
    _flags.wrote_userPaths = 1;
    PBRepeatedInt32Set(&_userPaths, list, count);
}
- (NSString *)userPathsAsString:(GEORPUserPathItem)value
{
    return GEORPUserPathItemAsString(value);
}
- (GEORPUserPathItem)StringAsUserPaths:(NSString *)str
{
    return StringAsGEORPUserPathItem(str);
}

- (double)clientCreatedAt
{
    return _clientCreatedAt;
}
- (void)setClientCreatedAt:(double)v
{
    _flags.wrote_clientCreatedAt = 1;
    _flags.has_clientCreatedAt = 1;
    _clientCreatedAt = v;
}
- (void)setHasClientCreatedAt:(BOOL)f
{
    _flags.wrote_clientCreatedAt = 1;
    _flags.has_clientCreatedAt = f ? 1 : 0;
}
- (BOOL)hasClientCreatedAt
{
    return (BOOL)_flags.has_clientCreatedAt;
}

- (void)_readAuxiliaryControls {
    if (_flags.read_auxiliaryControls) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_auxiliaryControls) {
            static const uint32_t tags[] = {6, 0};
            GEORPFeedbackCommonContextReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPAuxiliaryControl *> *)auxiliaryControls
{
    [self _readAuxiliaryControls];
    return _auxiliaryControls;
}
- (void)setAuxiliaryControls:(NSMutableArray<GEORPAuxiliaryControl *> *)v
{
    _flags.read_auxiliaryControls = 1;
    _flags.wrote_auxiliaryControls = 1;
    _auxiliaryControls = v;
}
- (void)clearAuxiliaryControls
{
    _flags.read_auxiliaryControls = 1;
    _flags.wrote_auxiliaryControls = 1;
    [_auxiliaryControls removeAllObjects];
}
- (void)addAuxiliaryControl:(GEORPAuxiliaryControl *)i
{
    [self _readAuxiliaryControls];
    [self _addNoFlagsAuxiliaryControl:i];
    _flags.read_auxiliaryControls = 1;
    _flags.wrote_auxiliaryControls = 1;
}
- (void)_addNoFlagsAuxiliaryControl:(GEORPAuxiliaryControl *)i
{
    if (!_auxiliaryControls)
    {
        _auxiliaryControls = [[NSMutableArray alloc] init];
    }
    [_auxiliaryControls addObject:i];
}
- (NSUInteger)auxiliaryControlsCount
{
    [self _readAuxiliaryControls];
    return [_auxiliaryControls count];
}
- (GEORPAuxiliaryControl *)auxiliaryControlAtIndex:(NSUInteger)idx
{
    [self _readAuxiliaryControls];
    return [_auxiliaryControls objectAtIndex:idx];
}
+ (Class)auxiliaryControlType
{
    return [GEORPAuxiliaryControl class];
}

- (uint64_t)originatingAuxiliaryControlIndex
{
    return _originatingAuxiliaryControlIndex;
}
- (void)setOriginatingAuxiliaryControlIndex:(uint64_t)v
{
    _flags.wrote_originatingAuxiliaryControlIndex = 1;
    _flags.has_originatingAuxiliaryControlIndex = 1;
    _originatingAuxiliaryControlIndex = v;
}
- (void)setHasOriginatingAuxiliaryControlIndex:(BOOL)f
{
    _flags.wrote_originatingAuxiliaryControlIndex = 1;
    _flags.has_originatingAuxiliaryControlIndex = f ? 1 : 0;
}
- (BOOL)hasOriginatingAuxiliaryControlIndex
{
    return (BOOL)_flags.has_originatingAuxiliaryControlIndex;
}

- (int32_t)deviceGmtOffset
{
    return _deviceGmtOffset;
}
- (void)setDeviceGmtOffset:(int32_t)v
{
    _flags.wrote_deviceGmtOffset = 1;
    _flags.has_deviceGmtOffset = 1;
    _deviceGmtOffset = v;
}
- (void)setHasDeviceGmtOffset:(BOOL)f
{
    _flags.wrote_deviceGmtOffset = 1;
    _flags.has_deviceGmtOffset = f ? 1 : 0;
}
- (BOOL)hasDeviceGmtOffset
{
    return (BOOL)_flags.has_deviceGmtOffset;
}

- (void)_readCurrentEnvironmentManifestUrls {
    if (_flags.read_currentEnvironmentManifestUrls) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_currentEnvironmentManifestUrls) {
            static const uint32_t tags[] = {9, 0};
            GEORPFeedbackCommonContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCurrentEnvironmentManifestUrls
{
    [self _readCurrentEnvironmentManifestUrls];
    return _currentEnvironmentManifestUrls != nil;
}
- (GEORPCurrentEnvironmentManifestURLs *)currentEnvironmentManifestUrls
{
    [self _readCurrentEnvironmentManifestUrls];
    return _currentEnvironmentManifestUrls;
}
- (void)setCurrentEnvironmentManifestUrls:(GEORPCurrentEnvironmentManifestURLs *)v
{
    _flags.read_currentEnvironmentManifestUrls = 1;
    _flags.wrote_currentEnvironmentManifestUrls = 1;
    _currentEnvironmentManifestUrls = v;
}

- (void)_readNavigationSettings {
    if (_flags.read_navigationSettings) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_navigationSettings) {
            static const uint32_t tags[] = {10, 0};
            GEORPFeedbackCommonContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasNavigationSettings
{
    [self _readNavigationSettings];
    return _navigationSettings != nil;
}
- (GEORPNavigationSettings *)navigationSettings
{
    [self _readNavigationSettings];
    return _navigationSettings;
}
- (void)setNavigationSettings:(GEORPNavigationSettings *)v
{
    _flags.read_navigationSettings = 1;
    _flags.wrote_navigationSettings = 1;
    _navigationSettings = v;
}

- (void)_readSourceInfo {
    if (_flags.read_sourceInfo) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_sourceInfo) {
            static const uint32_t tags[] = {11, 0};
            GEORPFeedbackCommonContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasSourceInfo
{
    [self _readSourceInfo];
    return _sourceInfo != nil;
}
- (GEORPSourceInfo *)sourceInfo
{
    [self _readSourceInfo];
    return _sourceInfo;
}
- (void)setSourceInfo:(GEORPSourceInfo *)v
{
    _flags.read_sourceInfo = 1;
    _flags.wrote_sourceInfo = 1;
    _sourceInfo = v;
}

- (void)_readSearchCommon {
    if (_flags.read_searchCommon) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_searchCommon) {
            static const uint32_t tags[] = {12, 0};
            GEORPFeedbackCommonContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasSearchCommon
{
    [self _readSearchCommon];
    return _searchCommon != nil;
}
- (GEORPSearchCommonContext *)searchCommon
{
    [self _readSearchCommon];
    return _searchCommon;
}
- (void)setSearchCommon:(GEORPSearchCommonContext *)v
{
    _flags.read_searchCommon = 1;
    _flags.wrote_searchCommon = 1;
    _searchCommon = v;
}

- (void)_readCurrentAbAssignmentResponse {
    if (_flags.read_currentAbAssignmentResponse) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_currentAbAssignmentResponse) {
            static const uint32_t tags[] = {13, 0};
            GEORPFeedbackCommonContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCurrentAbAssignmentResponse
{
    [self _readCurrentAbAssignmentResponse];
    return _currentAbAssignmentResponse != nil;
}
- (GEOABAssignmentResponse *)currentAbAssignmentResponse
{
    [self _readCurrentAbAssignmentResponse];
    return _currentAbAssignmentResponse;
}
- (void)setCurrentAbAssignmentResponse:(GEOABAssignmentResponse *)v
{
    _flags.read_currentAbAssignmentResponse = 1;
    _flags.wrote_currentAbAssignmentResponse = 1;
    _currentAbAssignmentResponse = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_pinType)
    {
        [dict setObject:GEORPPinTypeAsString(self->_pinType) forKey:@"pin_type"];
    }

    {
        GEORPMapLocation * value = self.mapLocation;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"map_location"];
        }
    }

    if ([self->_visibleTileSets count])
    {
        NSMutableArray *visibleTileSetsDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_visibleTileSets count]];
        for (GEORPVisibleTileSet * i_visibleTileSet in self->_visibleTileSets)
        {
            [visibleTileSetsDictReprs addObject:[i_visibleTileSet dictionaryRepresentation]];
        }
        [dict setObject:visibleTileSetsDictReprs forKey:@"visible_tile_set"];
    }

    if (self->_userPaths.count > 0)
    {
        NSMutableArray *userPathsValues = [NSMutableArray arrayWithCapacity:self->_userPaths.count];
        for (NSUInteger i = 0; i < self->_userPaths.count; i++)
        {
            [userPathsValues addObject:GEORPUserPathItemAsString(self->_userPaths.list[i])];
        }
        [dict setObject:userPathsValues forKey:@"user_path"];
    }

    if (self->_flags.has_clientCreatedAt)
    {
        [dict setObject:@(self->_clientCreatedAt) forKey:@"client_created_at"];
    }

    if ([self->_auxiliaryControls count])
    {
        NSMutableArray *auxiliaryControlsDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_auxiliaryControls count]];
        for (GEORPAuxiliaryControl * i_auxiliaryControl in self->_auxiliaryControls)
        {
            [auxiliaryControlsDictReprs addObject:[i_auxiliaryControl dictionaryRepresentation]];
        }
        [dict setObject:auxiliaryControlsDictReprs forKey:@"auxiliary_control"];
    }

    if (self->_flags.has_originatingAuxiliaryControlIndex)
    {
        [dict setObject:@(self->_originatingAuxiliaryControlIndex) forKey:@"originating_auxiliary_control_index"];
    }

    if (self->_flags.has_deviceGmtOffset)
    {
        [dict setObject:@(self->_deviceGmtOffset) forKey:@"device_gmt_offset"];
    }

    {
        GEORPCurrentEnvironmentManifestURLs * value = self.currentEnvironmentManifestUrls;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"current_environment_manifest_urls"];
        }
    }

    {
        GEORPNavigationSettings * value = self.navigationSettings;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"navigation_settings"];
        }
    }

    {
        GEORPSourceInfo * value = self.sourceInfo;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"source_info"];
        }
    }

    {
        GEORPSearchCommonContext * value = self.searchCommon;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"search_common"];
        }
    }

    {
        GEOABAssignmentResponse * value = self.currentAbAssignmentResponse;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"current_ab_assignment_response"];
        }
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPFeedbackCommonContextReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPFeedbackCommonContextReadAllFrom(__unsafe_unretained GEORPFeedbackCommonContext *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPFeedbackCommonContextReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPFeedbackCommonContextReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPFeedbackCommonContextReadFrom(__unsafe_unretained GEORPFeedbackCommonContext *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPFeedbackCommonContextReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPFeedbackCommonContextReadSpecified(__unsafe_unretained GEORPFeedbackCommonContext *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_mapLocation
        + self->_flags.read_visibleTileSets
        + self->_flags.read_userPaths
        + self->_flags.read_auxiliaryControls
        + self->_flags.read_currentEnvironmentManifestUrls
        + self->_flags.read_navigationSettings
        + self->_flags.read_sourceInfo
        + self->_flags.read_searchCommon
        + self->_flags.read_currentAbAssignmentResponse
        + self->_flags.read_unknownFields
        ;
    #define requiredLazyFieldCount 7 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL shouldParseUnknown = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            case TAG_UNKNOWN_FIELDS:
                shouldParseUnknown = YES;
                ++readLazyCount;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
        shouldParseUnknown = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !(readAll || shouldParseUnknown);
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* pinType */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_pinType = YES;
                self->_pinType = PBReaderReadInt32(reader);

            }
            break;
            case 2 /* mapLocation */:
            {
                if (!shouldParseTag || self->_flags.read_mapLocation) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_mapLocation) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPMapLocation *new_mapLocation = [[GEORPMapLocation alloc] init];
                self->_mapLocation = new_mapLocation;
                PBDataReaderMark mark_mapLocation;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_mapLocation);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPMapLocationReadAllFrom(new_mapLocation, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_mapLocation);

                --tagsRemaining;
            }
            break;
            case 3 /* visibleTileSets */:
            {
                if (!shouldParseTag || self->_flags.read_visibleTileSets) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPVisibleTileSet *new_visibleTileSet = [[GEORPVisibleTileSet alloc] init];
                [self _addNoFlagsVisibleTileSet:new_visibleTileSet];
                PBDataReaderMark mark_visibleTileSet;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_visibleTileSet);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPVisibleTileSetReadAllFrom(new_visibleTileSet, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_visibleTileSet);

            }
            break;
            case 4 /* userPaths */:
            {
                if (!shouldParseTag || self->_flags.read_userPaths) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
            if (TYPE_LENGTH_DELIMITED == aType)
                {
                    PBDataReaderMark mark_userPath;
                    BOOL markError = !PBReaderPlaceMark(reader, &mark_userPath);
                    if (markError)
                    {
                        return NO;
                    }
                    while (PBReaderHasMoreData(reader))
                    {
                        GEORPUserPathItem new_userPath = PBReaderReadInt32(reader);
                        PBRepeatedInt32Add(&(self->_userPaths), new_userPath);
                    }
                    PBReaderRecallMark(reader, &mark_userPath);
                }
                else
                {
                    PBRepeatedInt32Add(&(self->_userPaths), PBReaderReadInt32(reader));
                }

            }
            break;
            case 5 /* clientCreatedAt */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_clientCreatedAt = YES;
                self->_clientCreatedAt = PBReaderReadDouble(reader);

            }
            break;
            case 6 /* auxiliaryControls */:
            {
                if (!shouldParseTag || self->_flags.read_auxiliaryControls) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPAuxiliaryControl *new_auxiliaryControl = [[GEORPAuxiliaryControl alloc] init];
                [self _addNoFlagsAuxiliaryControl:new_auxiliaryControl];
                PBDataReaderMark mark_auxiliaryControl;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_auxiliaryControl);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPAuxiliaryControlReadAllFrom(new_auxiliaryControl, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_auxiliaryControl);

            }
            break;
            case 7 /* originatingAuxiliaryControlIndex */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_originatingAuxiliaryControlIndex = YES;
                self->_originatingAuxiliaryControlIndex = PBReaderReadUint64(reader);

            }
            break;
            case 8 /* deviceGmtOffset */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_deviceGmtOffset = YES;
                self->_deviceGmtOffset = PBReaderReadSint32(reader);

            }
            break;
            case 9 /* currentEnvironmentManifestUrls */:
            {
                if (!shouldParseTag || self->_flags.read_currentEnvironmentManifestUrls) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_currentEnvironmentManifestUrls) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPCurrentEnvironmentManifestURLs *new_currentEnvironmentManifestUrls = [[GEORPCurrentEnvironmentManifestURLs alloc] init];
                self->_currentEnvironmentManifestUrls = new_currentEnvironmentManifestUrls;
                PBDataReaderMark mark_currentEnvironmentManifestUrls;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_currentEnvironmentManifestUrls);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPCurrentEnvironmentManifestURLsReadAllFrom(new_currentEnvironmentManifestUrls, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_currentEnvironmentManifestUrls);

                --tagsRemaining;
            }
            break;
            case 10 /* navigationSettings */:
            {
                if (!shouldParseTag || self->_flags.read_navigationSettings) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_navigationSettings) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPNavigationSettings *new_navigationSettings = [[GEORPNavigationSettings alloc] init];
                self->_navigationSettings = new_navigationSettings;
                PBDataReaderMark mark_navigationSettings;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_navigationSettings);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPNavigationSettingsReadAllFrom(new_navigationSettings, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_navigationSettings);

                --tagsRemaining;
            }
            break;
            case 11 /* sourceInfo */:
            {
                if (!shouldParseTag || self->_flags.read_sourceInfo) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_sourceInfo) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPSourceInfo *new_sourceInfo = [[GEORPSourceInfo alloc] init];
                self->_sourceInfo = new_sourceInfo;
                PBDataReaderMark mark_sourceInfo;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_sourceInfo);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPSourceInfoReadAllFrom(new_sourceInfo, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_sourceInfo);

                --tagsRemaining;
            }
            break;
            case 12 /* searchCommon */:
            {
                if (!shouldParseTag || self->_flags.read_searchCommon) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_searchCommon) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPSearchCommonContext *new_searchCommon = [[GEORPSearchCommonContext alloc] init];
                self->_searchCommon = new_searchCommon;
                PBDataReaderMark mark_searchCommon;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_searchCommon);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPSearchCommonContextReadAllFrom(new_searchCommon, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_searchCommon);

                --tagsRemaining;
            }
            break;
            case 13 /* currentAbAssignmentResponse */:
            {
                if (!shouldParseTag || self->_flags.read_currentAbAssignmentResponse) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_currentAbAssignmentResponse) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOABAssignmentResponse *new_currentAbAssignmentResponse = [[GEOABAssignmentResponse alloc] init];
                self->_currentAbAssignmentResponse = new_currentAbAssignmentResponse;
                PBDataReaderMark mark_currentAbAssignmentResponse;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_currentAbAssignmentResponse);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOABAssignmentResponseReadAllFrom(new_currentAbAssignmentResponse, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_currentAbAssignmentResponse);

                --tagsRemaining;
            }
            break;
            default:
                if (!shouldParseUnknown || self->_flags.read_unknownFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }

    if (shouldParseUnknown) {
        self->_flags.read_unknownFields = YES;
    }

    if (readAll) {
        if (recursively) {
            [self->_mapLocation readAll:YES];
            for (GEORPVisibleTileSet * i in self->_visibleTileSets)
                [i readAll:YES];
            for (GEORPAuxiliaryControl * i in self->_auxiliaryControls)
                [i readAll:YES];
            [self->_currentEnvironmentManifestUrls readAll:YES];
            [self->_navigationSettings readAll:YES];
            [self->_sourceInfo readAll:YES];
            [self->_searchCommon readAll:YES];
            [self->_currentAbAssignmentResponse readAll:YES];
        }
        self->_flags.read_mapLocation = YES;
        self->_flags.read_visibleTileSets = YES;
        self->_flags.read_userPaths = YES;
        self->_flags.read_auxiliaryControls = YES;
        self->_flags.read_currentEnvironmentManifestUrls = YES;
        self->_flags.read_navigationSettings = YES;
        self->_flags.read_sourceInfo = YES;
        self->_flags.read_searchCommon = YES;
        self->_flags.read_currentAbAssignmentResponse = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 2 /* mapLocation */:
                    self->_flags.read_mapLocation = YES;
                    break;
                case 3 /* visibleTileSets */:
                    self->_flags.read_visibleTileSets = YES;
                    break;
                case 4 /* userPaths */:
                    self->_flags.read_userPaths = YES;
                    break;
                case 6 /* auxiliaryControls */:
                    self->_flags.read_auxiliaryControls = YES;
                    break;
                case 9 /* currentEnvironmentManifestUrls */:
                    self->_flags.read_currentEnvironmentManifestUrls = YES;
                    break;
                case 10 /* navigationSettings */:
                    self->_flags.read_navigationSettings = YES;
                    break;
                case 11 /* sourceInfo */:
                    self->_flags.read_sourceInfo = YES;
                    break;
                case 12 /* searchCommon */:
                    self->_flags.read_searchCommon = YES;
                    break;
                case 13 /* currentAbAssignmentResponse */:
                    self->_flags.read_currentAbAssignmentResponse = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPFeedbackCommonContextIsValid(reader);
}

BOOL GEORPFeedbackCommonContextIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* pinType */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 2 /* mapLocation */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_mapLocation;
                    if (!PBReaderPlaceMark(reader, &mark_mapLocation))
                        returnValue(NO);
                    if (!GEORPMapLocationIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_mapLocation);
                }
                break;
            case 3 /* visibleTileSets */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_visibleTileSet;
                    if (!PBReaderPlaceMark(reader, &mark_visibleTileSet))
                        returnValue(NO);
                    if (!GEORPVisibleTileSetIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_visibleTileSet);
                }
                break;
            case 4 /* userPaths */:
                if (TYPE_LENGTH_DELIMITED == aType)
                {
                    PBDataReaderMark mark_userPath;
                    if (!PBReaderPlaceMark(reader, &mark_userPath))
                        returnValue(NO);
                    while (PBReaderHasMoreData(reader))
                        PBReaderReadInt32(reader);
                    PBReaderRecallMark(reader, &mark_userPath);
                }
                else if (TYPE_VARINT != aType)
                    returnValue(NO);
                else
                    PBReaderReadInt32(reader);
                break;
            case 5 /* clientCreatedAt */:
                if (TYPE_FIXED64 != aType)
                    returnValue(NO);
                PBReaderReadDouble(reader);
                break;
            case 6 /* auxiliaryControls */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_auxiliaryControl;
                    if (!PBReaderPlaceMark(reader, &mark_auxiliaryControl))
                        returnValue(NO);
                    if (!GEORPAuxiliaryControlIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_auxiliaryControl);
                }
                break;
            case 7 /* originatingAuxiliaryControlIndex */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint64(reader);
                break;
            case 8 /* deviceGmtOffset */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadSint32(reader);
                break;
            case 9 /* currentEnvironmentManifestUrls */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_currentEnvironmentManifestUrls;
                    if (!PBReaderPlaceMark(reader, &mark_currentEnvironmentManifestUrls))
                        returnValue(NO);
                    if (!GEORPCurrentEnvironmentManifestURLsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_currentEnvironmentManifestUrls);
                }
                break;
            case 10 /* navigationSettings */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_navigationSettings;
                    if (!PBReaderPlaceMark(reader, &mark_navigationSettings))
                        returnValue(NO);
                    if (!GEORPNavigationSettingsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_navigationSettings);
                }
                break;
            case 11 /* sourceInfo */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_sourceInfo;
                    if (!PBReaderPlaceMark(reader, &mark_sourceInfo))
                        returnValue(NO);
                    if (!GEORPSourceInfoIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_sourceInfo);
                }
                break;
            case 12 /* searchCommon */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_searchCommon;
                    if (!PBReaderPlaceMark(reader, &mark_searchCommon))
                        returnValue(NO);
                    if (!GEORPSearchCommonContextIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_searchCommon);
                }
                break;
            case 13 /* currentAbAssignmentResponse */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_currentAbAssignmentResponse;
                    if (!PBReaderPlaceMark(reader, &mark_currentAbAssignmentResponse))
                        returnValue(NO);
                    if (!GEOABAssignmentResponseIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_currentAbAssignmentResponse);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPFeedbackCommonContextReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPFeedbackCommonContextIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* pinType */
    {
        if (self->_flags.has_pinType)
        {
            PBDataWriterWriteInt32Field(writer, self->_pinType, 1);
        }
    }

    /* mapLocation */
    {
        if (self->_mapLocation != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_mapLocation, 2);
        }
    }

    /* visibleTileSets */
    {
        for (GEORPVisibleTileSet * i_visibleTileSet in self->_visibleTileSets)
        {
            PBDataWriterWriteSubmessage(writer, i_visibleTileSet, 3);
        }

    }

    /* userPaths */
    {
        if (self->_userPaths.count)
        {
            NSUInteger i_userPaths;
            for (i_userPaths = 0; i_userPaths < self->_userPaths.count; i_userPaths++)
            {
                PBDataWriterWriteInt32Field(writer, self->_userPaths.list[i_userPaths], 4);
            }
        }

    }

    /* clientCreatedAt */
    {
        if (self->_flags.has_clientCreatedAt)
        {
            PBDataWriterWriteDoubleField(writer, self->_clientCreatedAt, 5);
        }
    }

    /* auxiliaryControls */
    {
        for (GEORPAuxiliaryControl * i_auxiliaryControl in self->_auxiliaryControls)
        {
            PBDataWriterWriteSubmessage(writer, i_auxiliaryControl, 6);
        }

    }

    /* originatingAuxiliaryControlIndex */
    {
        if (self->_flags.has_originatingAuxiliaryControlIndex)
        {
            PBDataWriterWriteUint64Field(writer, self->_originatingAuxiliaryControlIndex, 7);
        }
    }

    /* deviceGmtOffset */
    {
        if (self->_flags.has_deviceGmtOffset)
        {
            PBDataWriterWriteSint32Field(writer, self->_deviceGmtOffset, 8);
        }
    }

    /* currentEnvironmentManifestUrls */
    {
        if (self->_currentEnvironmentManifestUrls != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_currentEnvironmentManifestUrls, 9);
        }
    }

    /* navigationSettings */
    {
        if (self->_navigationSettings != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_navigationSettings, 10);
        }
    }

    /* sourceInfo */
    {
        if (self->_sourceInfo != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_sourceInfo, 11);
        }
    }

    /* searchCommon */
    {
        if (self->_searchCommon != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_searchCommon, 12);
        }
    }

    /* currentAbAssignmentResponse */
    {
        if (self->_currentAbAssignmentResponse != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_currentAbAssignmentResponse, 13);
        }
    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}

BOOL GEORPFeedbackCommonContextIsDirty(__unsafe_unretained GEORPFeedbackCommonContext *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_pinType
        || self->_flags.wrote_mapLocation
        || (self->_flags.read_mapLocation && GEORPMapLocationIsDirty(self->_mapLocation))
        || self->_flags.wrote_visibleTileSets
        || self->_flags.read_visibleTileSets
        || self->_flags.wrote_userPaths
        || self->_flags.read_userPaths
        || self->_flags.wrote_clientCreatedAt
        || self->_flags.wrote_auxiliaryControls
        || self->_flags.wrote_originatingAuxiliaryControlIndex
        || self->_flags.wrote_deviceGmtOffset
        || self->_flags.wrote_currentEnvironmentManifestUrls
        || (self->_flags.read_currentEnvironmentManifestUrls && GEORPCurrentEnvironmentManifestURLsIsDirty(self->_currentEnvironmentManifestUrls))
        || self->_flags.wrote_navigationSettings
        || self->_flags.read_navigationSettings
        || self->_flags.wrote_sourceInfo
        || (self->_flags.read_sourceInfo && GEORPSourceInfoIsDirty(self->_sourceInfo))
        || self->_flags.wrote_searchCommon
        || (self->_flags.read_searchCommon && GEORPSearchCommonContextIsDirty(self->_searchCommon))
        || self->_flags.wrote_currentAbAssignmentResponse
        || (self->_flags.read_currentAbAssignmentResponse && GEOABAssignmentResponseIsDirty(self->_currentAbAssignmentResponse))
        || self->_flags.wrote_unknownFields
    ;

    if (!dirty) {

            if (self->_flags.read_auxiliaryControls) {
                for (GEORPAuxiliaryControl *i in self->_auxiliaryControls) {
                    if (GEORPAuxiliaryControlIsDirty(i)) {
                        return YES;
                    }
                }
            }
    }

    return dirty;
}


- (void)copyTo:(GEORPFeedbackCommonContext *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (self->_flags.has_pinType)
    {
        other->_pinType = _pinType;
        other->_flags.has_pinType = YES;
    }
    if (_mapLocation)
    {
        other.mapLocation = _mapLocation;
    }
    if ([self visibleTileSetsCount])
    {
        [other clearVisibleTileSets];
        NSUInteger visibleTileSetsCnt = [self visibleTileSetsCount];
        for (NSUInteger i = 0; i < visibleTileSetsCnt; i++)
        {
            [other addVisibleTileSet:[self visibleTileSetAtIndex:i]];
        }
    }
    if ([self userPathsCount])
    {
        [other clearUserPaths];
        NSUInteger userPathsCnt = [self userPathsCount];
        for (NSUInteger i = 0; i < userPathsCnt; i++)
        {
            [other addUserPath:[self userPathAtIndex:i]];
        }
    }
    if (self->_flags.has_clientCreatedAt)
    {
        other->_clientCreatedAt = _clientCreatedAt;
        other->_flags.has_clientCreatedAt = YES;
    }
    if ([self auxiliaryControlsCount])
    {
        [other clearAuxiliaryControls];
        NSUInteger auxiliaryControlsCnt = [self auxiliaryControlsCount];
        for (NSUInteger i = 0; i < auxiliaryControlsCnt; i++)
        {
            [other addAuxiliaryControl:[self auxiliaryControlAtIndex:i]];
        }
    }
    if (self->_flags.has_originatingAuxiliaryControlIndex)
    {
        other->_originatingAuxiliaryControlIndex = _originatingAuxiliaryControlIndex;
        other->_flags.has_originatingAuxiliaryControlIndex = YES;
    }
    if (self->_flags.has_deviceGmtOffset)
    {
        other->_deviceGmtOffset = _deviceGmtOffset;
        other->_flags.has_deviceGmtOffset = YES;
    }
    if (_currentEnvironmentManifestUrls)
    {
        other.currentEnvironmentManifestUrls = _currentEnvironmentManifestUrls;
    }
    if (_navigationSettings)
    {
        other.navigationSettings = _navigationSettings;
    }
    if (_sourceInfo)
    {
        other.sourceInfo = _sourceInfo;
    }
    if (_searchCommon)
    {
        other.searchCommon = _searchCommon;
    }
    if (_currentAbAssignmentResponse)
    {
        other.currentAbAssignmentResponse = _currentAbAssignmentResponse;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPFeedbackCommonContext *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_pinType
                || _flags.wrote_mapLocation
                || _flags.wrote_visibleTileSets
                || _flags.wrote_userPaths
                || _flags.wrote_clientCreatedAt
                || _flags.wrote_auxiliaryControls
                || _flags.wrote_originatingAuxiliaryControlIndex
                || _flags.wrote_deviceGmtOffset
                || _flags.wrote_currentEnvironmentManifestUrls
                || _flags.wrote_navigationSettings
                || _flags.wrote_sourceInfo
                || _flags.wrote_searchCommon
                || _flags.wrote_currentAbAssignmentResponse
                || _flags.wrote_unknownFields
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPFeedbackCommonContextReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    if (self->_flags.has_pinType)
    {
        copy->_pinType = _pinType;
        copy->_flags.has_pinType = YES;
    }
    copy->_mapLocation = [_mapLocation copyWithZone:zone];
    for (GEORPVisibleTileSet * v in _visibleTileSets)
    {
        GEORPVisibleTileSet * vCopy = [v copyWithZone:zone];
        [copy addVisibleTileSet:vCopy];
    }
    PBRepeatedInt32Copy(&(copy->_userPaths), &_userPaths);
    if (self->_flags.has_clientCreatedAt)
    {
        copy->_clientCreatedAt = _clientCreatedAt;
        copy->_flags.has_clientCreatedAt = YES;
    }
    for (GEORPAuxiliaryControl * v in _auxiliaryControls)
    {
        GEORPAuxiliaryControl * vCopy = [v copyWithZone:zone];
        [copy addAuxiliaryControl:vCopy];
    }
    if (self->_flags.has_originatingAuxiliaryControlIndex)
    {
        copy->_originatingAuxiliaryControlIndex = _originatingAuxiliaryControlIndex;
        copy->_flags.has_originatingAuxiliaryControlIndex = YES;
    }
    if (self->_flags.has_deviceGmtOffset)
    {
        copy->_deviceGmtOffset = _deviceGmtOffset;
        copy->_flags.has_deviceGmtOffset = YES;
    }
    copy->_currentEnvironmentManifestUrls = [_currentEnvironmentManifestUrls copyWithZone:zone];
    copy->_navigationSettings = [_navigationSettings copyWithZone:zone];
    copy->_sourceInfo = [_sourceInfo copyWithZone:zone];
    copy->_searchCommon = [_searchCommon copyWithZone:zone];
    copy->_currentAbAssignmentResponse = [_currentAbAssignmentResponse copyWithZone:zone];
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPFeedbackCommonContext *other = (GEORPFeedbackCommonContext *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_pinType && other->_flags.has_pinType && self->_pinType == other->_pinType) || (!self->_flags.has_pinType && !other->_flags.has_pinType))
    &&
    ((!self->_mapLocation && !other->_mapLocation) || [self->_mapLocation isEqual:other->_mapLocation])
    &&
    ((!self->_visibleTileSets && !other->_visibleTileSets) || [self->_visibleTileSets isEqual:other->_visibleTileSets])

    &&
    PBRepeatedInt32IsEqual(&(self->_userPaths), &(other->_userPaths))

    &&
    ((self->_flags.has_clientCreatedAt && other->_flags.has_clientCreatedAt && self->_clientCreatedAt == other->_clientCreatedAt) || (!self->_flags.has_clientCreatedAt && !other->_flags.has_clientCreatedAt))
    &&
    ((!self->_auxiliaryControls && !other->_auxiliaryControls) || [self->_auxiliaryControls isEqual:other->_auxiliaryControls])

    &&
    ((self->_flags.has_originatingAuxiliaryControlIndex && other->_flags.has_originatingAuxiliaryControlIndex && self->_originatingAuxiliaryControlIndex == other->_originatingAuxiliaryControlIndex) || (!self->_flags.has_originatingAuxiliaryControlIndex && !other->_flags.has_originatingAuxiliaryControlIndex))
    &&
    ((self->_flags.has_deviceGmtOffset && other->_flags.has_deviceGmtOffset && self->_deviceGmtOffset == other->_deviceGmtOffset) || (!self->_flags.has_deviceGmtOffset && !other->_flags.has_deviceGmtOffset))
    &&
    ((!self->_currentEnvironmentManifestUrls && !other->_currentEnvironmentManifestUrls) || [self->_currentEnvironmentManifestUrls isEqual:other->_currentEnvironmentManifestUrls])
    &&
    ((!self->_navigationSettings && !other->_navigationSettings) || [self->_navigationSettings isEqual:other->_navigationSettings])
    &&
    ((!self->_sourceInfo && !other->_sourceInfo) || [self->_sourceInfo isEqual:other->_sourceInfo])
    &&
    ((!self->_searchCommon && !other->_searchCommon) || [self->_searchCommon isEqual:other->_searchCommon])
    &&
    ((!self->_currentAbAssignmentResponse && !other->_currentAbAssignmentResponse) || [self->_currentAbAssignmentResponse isEqual:other->_currentAbAssignmentResponse])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_pinType ? PBHashInt((NSUInteger)self->_pinType) : 0)
    ^
    [self->_mapLocation hash]
    ^
    [self->_visibleTileSets hash]
    ^
    PBRepeatedInt32Hash(&(self->_userPaths))
    ^
    (self->_flags.has_clientCreatedAt ? PBHashDouble(self->_clientCreatedAt) : 0)
    ^
    [self->_auxiliaryControls hash]
    ^
    (self->_flags.has_originatingAuxiliaryControlIndex ? PBHashInt((NSUInteger)self->_originatingAuxiliaryControlIndex) : 0)
    ^
    (self->_flags.has_deviceGmtOffset ? PBHashInt((NSUInteger)self->_deviceGmtOffset) : 0)
    ^
    [self->_currentEnvironmentManifestUrls hash]
    ^
    [self->_navigationSettings hash]
    ^
    [self->_sourceInfo hash]
    ^
    [self->_searchCommon hash]
    ^
    [self->_currentAbAssignmentResponse hash]
    ;
}

- (void)mergeFrom:(GEORPFeedbackCommonContext *)other
{
    [other readAll:NO];
    if (other->_flags.has_pinType)
    {
        self->_pinType = other->_pinType;
        self->_flags.has_pinType = 1;
    }
    if (self->_mapLocation && other->_mapLocation)
    {
        [self->_mapLocation mergeFrom:other->_mapLocation];
    }
    else if (!self->_mapLocation && other->_mapLocation)
    {
        [self setMapLocation:other->_mapLocation];
    }
    for (GEORPVisibleTileSet * iter_visibleTileSets in other->_visibleTileSets)
    {
        [self addVisibleTileSet:iter_visibleTileSets];
    }
    NSUInteger userPathsCnt = [other userPathsCount];
    for (NSUInteger i = 0; i < userPathsCnt; i++)
    {
        [self addUserPath:[other userPathAtIndex:i]];
    }
    if (other->_flags.has_clientCreatedAt)
    {
        self->_clientCreatedAt = other->_clientCreatedAt;
        self->_flags.has_clientCreatedAt = 1;
    }
    for (GEORPAuxiliaryControl * iter_auxiliaryControls in other->_auxiliaryControls)
    {
        [self addAuxiliaryControl:iter_auxiliaryControls];
    }
    if (other->_flags.has_originatingAuxiliaryControlIndex)
    {
        self->_originatingAuxiliaryControlIndex = other->_originatingAuxiliaryControlIndex;
        self->_flags.has_originatingAuxiliaryControlIndex = 1;
    }
    if (other->_flags.has_deviceGmtOffset)
    {
        self->_deviceGmtOffset = other->_deviceGmtOffset;
        self->_flags.has_deviceGmtOffset = 1;
    }
    if (self->_currentEnvironmentManifestUrls && other->_currentEnvironmentManifestUrls)
    {
        [self->_currentEnvironmentManifestUrls mergeFrom:other->_currentEnvironmentManifestUrls];
    }
    else if (!self->_currentEnvironmentManifestUrls && other->_currentEnvironmentManifestUrls)
    {
        [self setCurrentEnvironmentManifestUrls:other->_currentEnvironmentManifestUrls];
    }
    if (self->_navigationSettings && other->_navigationSettings)
    {
        [self->_navigationSettings mergeFrom:other->_navigationSettings];
    }
    else if (!self->_navigationSettings && other->_navigationSettings)
    {
        [self setNavigationSettings:other->_navigationSettings];
    }
    if (self->_sourceInfo && other->_sourceInfo)
    {
        [self->_sourceInfo mergeFrom:other->_sourceInfo];
    }
    else if (!self->_sourceInfo && other->_sourceInfo)
    {
        [self setSourceInfo:other->_sourceInfo];
    }
    if (self->_searchCommon && other->_searchCommon)
    {
        [self->_searchCommon mergeFrom:other->_searchCommon];
    }
    else if (!self->_searchCommon && other->_searchCommon)
    {
        [self setSearchCommon:other->_searchCommon];
    }
    if (self->_currentAbAssignmentResponse && other->_currentAbAssignmentResponse)
    {
        [self->_currentAbAssignmentResponse mergeFrom:other->_currentAbAssignmentResponse];
    }
    else if (!self->_currentAbAssignmentResponse && other->_currentAbAssignmentResponse)
    {
        [self setCurrentAbAssignmentResponse:other->_currentAbAssignmentResponse];
    }
}

- (PBUnknownFields *)unknownFields
{
    if (_flags.read_unknownFields) return _unknownFields;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return _unknownFields;
    @synchronized(reader) {
        if (!_flags.read_unknownFields) {
            static const uint32_t tags[] = {TAG_UNKNOWN_FIELDS, 0};
            GEORPFeedbackCommonContextReadSpecified(self, reader, tags);
        }
    }
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _flags.read_unknownFields = 1;
    _flags.wrote_unknownFields = 1;
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
    [_sourceInfo clearUnknownFields:YES];
    [_searchCommon clearUnknownFields:YES];
    [_currentAbAssignmentResponse clearUnknownFields:YES];
}

@end


