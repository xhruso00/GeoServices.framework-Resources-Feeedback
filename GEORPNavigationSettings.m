// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPNavigationSettings.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPNavigationSettings


- (uint64_t)voiceVolume
{
    return _voiceVolume;
}
- (void)setVoiceVolume:(uint64_t)v
{
    _flags.has_voiceVolume = 1;
    _voiceVolume = v;
}
- (void)setHasVoiceVolume:(BOOL)f
{
    _flags.has_voiceVolume = f ? 1 : 0;
}
- (BOOL)hasVoiceVolume
{
    return (BOOL)_flags.has_voiceVolume;
}

- (uint64_t)distanceUnits
{
    return _distanceUnits;
}
- (void)setDistanceUnits:(uint64_t)v
{
    _flags.has_distanceUnits = 1;
    _distanceUnits = v;
}
- (void)setHasDistanceUnits:(BOOL)f
{
    _flags.has_distanceUnits = f ? 1 : 0;
}
- (BOOL)hasDistanceUnits
{
    return (BOOL)_flags.has_distanceUnits;
}

- (BOOL)pauseSpokenAudio
{
    return _pauseSpokenAudio;
}
- (void)setPauseSpokenAudio:(BOOL)v
{
    _flags.has_pauseSpokenAudio = 1;
    _pauseSpokenAudio = v;
}
- (void)setHasPauseSpokenAudio:(BOOL)f
{
    _flags.has_pauseSpokenAudio = f ? 1 : 0;
}
- (BOOL)hasPauseSpokenAudio
{
    return (BOOL)_flags.has_pauseSpokenAudio;
}

- (BOOL)muteSpeechOverride
{
    return _muteSpeechOverride;
}
- (void)setMuteSpeechOverride:(BOOL)v
{
    _flags.has_muteSpeechOverride = 1;
    _muteSpeechOverride = v;
}
- (void)setHasMuteSpeechOverride:(BOOL)f
{
    _flags.has_muteSpeechOverride = f ? 1 : 0;
}
- (BOOL)hasMuteSpeechOverride
{
    return (BOOL)_flags.has_muteSpeechOverride;
}

- (BOOL)speechEnabled
{
    return _speechEnabled;
}
- (void)setSpeechEnabled:(BOOL)v
{
    _flags.has_speechEnabled = 1;
    _speechEnabled = v;
}
- (void)setHasSpeechEnabled:(BOOL)f
{
    _flags.has_speechEnabled = f ? 1 : 0;
}
- (BOOL)hasSpeechEnabled
{
    return (BOOL)_flags.has_speechEnabled;
}

- (uint64_t)maxAlternateRouteCount
{
    return _maxAlternateRouteCount;
}
- (void)setMaxAlternateRouteCount:(uint64_t)v
{
    _flags.has_maxAlternateRouteCount = 1;
    _maxAlternateRouteCount = v;
}
- (void)setHasMaxAlternateRouteCount:(BOOL)f
{
    _flags.has_maxAlternateRouteCount = f ? 1 : 0;
}
- (BOOL)hasMaxAlternateRouteCount
{
    return (BOOL)_flags.has_maxAlternateRouteCount;
}

- (BOOL)beepBeforeInstruction
{
    return _beepBeforeInstruction;
}
- (void)setBeepBeforeInstruction:(BOOL)v
{
    _flags.has_beepBeforeInstruction = 1;
    _beepBeforeInstruction = v;
}
- (void)setHasBeepBeforeInstruction:(BOOL)f
{
    _flags.has_beepBeforeInstruction = f ? 1 : 0;
}
- (BOOL)hasBeepBeforeInstruction
{
    return (BOOL)_flags.has_beepBeforeInstruction;
}

- (BOOL)hasVoiceLanguage
{
    return _voiceLanguage != nil;
}
- (NSString *)voiceLanguage
{
    return _voiceLanguage;
}
- (void)setVoiceLanguage:(NSString *)v
{
    _voiceLanguage = v;
}

- (BOOL)shouldUseGuidanceEventManager
{
    return _shouldUseGuidanceEventManager;
}
- (void)setShouldUseGuidanceEventManager:(BOOL)v
{
    _flags.has_shouldUseGuidanceEventManager = 1;
    _shouldUseGuidanceEventManager = v;
}
- (void)setHasShouldUseGuidanceEventManager:(BOOL)f
{
    _flags.has_shouldUseGuidanceEventManager = f ? 1 : 0;
}
- (BOOL)hasShouldUseGuidanceEventManager
{
    return (BOOL)_flags.has_shouldUseGuidanceEventManager;
}

- (GEOUserPreferredTransportType)userPreferredTransportType
{
    return _flags.has_userPreferredTransportType ? _userPreferredTransportType : GEOUserPreferredTransportType_PREFERRED_TRANSPORT_TYPE_NONE;
}
- (void)setUserPreferredTransportType:(GEOUserPreferredTransportType)v
{
    _flags.has_userPreferredTransportType = 1;
    _userPreferredTransportType = v;
}
- (void)setHasUserPreferredTransportType:(BOOL)f
{
    _flags.has_userPreferredTransportType = f ? 1 : 0;
}
- (BOOL)hasUserPreferredTransportType
{
    return (BOOL)_flags.has_userPreferredTransportType;
}
- (NSString *)userPreferredTransportTypeAsString:(GEOUserPreferredTransportType)value
{
    return GEOUserPreferredTransportTypeAsString(value);
}
- (GEOUserPreferredTransportType)StringAsUserPreferredTransportType:(NSString *)str
{
    return StringAsGEOUserPreferredTransportType(str);
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_voiceVolume)
    {
        [dict setObject:@(self->_voiceVolume) forKey:@"voice_volume"];
    }

    if (self->_flags.has_distanceUnits)
    {
        [dict setObject:@(self->_distanceUnits) forKey:@"distance_units"];
    }

    if (self->_flags.has_pauseSpokenAudio)
    {
        [dict setObject:@(self->_pauseSpokenAudio) forKey:@"pause_spoken_audio"];
    }

    if (self->_flags.has_muteSpeechOverride)
    {
        [dict setObject:@(self->_muteSpeechOverride) forKey:@"mute_speech_override"];
    }

    if (self->_flags.has_speechEnabled)
    {
        [dict setObject:@(self->_speechEnabled) forKey:@"speech_enabled"];
    }

    if (self->_flags.has_maxAlternateRouteCount)
    {
        [dict setObject:@(self->_maxAlternateRouteCount) forKey:@"max_alternate_route_count"];
    }

    if (self->_flags.has_beepBeforeInstruction)
    {
        [dict setObject:@(self->_beepBeforeInstruction) forKey:@"beep_before_instruction"];
    }

    {
        NSString * value = self.voiceLanguage;
        if (value) {
            [dict setObject:value forKey:@"voice_language"];
        }
    }

    if (self->_flags.has_shouldUseGuidanceEventManager)
    {
        [dict setObject:@(self->_shouldUseGuidanceEventManager) forKey:@"should_use_guidance_event_manager"];
    }

    if (self->_flags.has_userPreferredTransportType)
    {
        [dict setObject:GEOUserPreferredTransportTypeAsString(self->_userPreferredTransportType) forKey:@"user_preferred_transport_type"];
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively { /* noop */ }
BOOL GEORPNavigationSettingsReadAllFrom(__unsafe_unretained GEORPNavigationSettings *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};

    @synchronized(reader) {
        BOOL result = GEORPNavigationSettingsReadSpecified(self, reader, recursively ? recursiveTag : nil);
        return result;
    }
}
BOOL GEORPNavigationSettingsReadFrom(__unsafe_unretained GEORPNavigationSettings *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPNavigationSettingsReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPNavigationSettingsReadSpecified(__unsafe_unretained GEORPNavigationSettings *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    #define shouldParseUnknown YES
    __attribute__((unused)) BOOL const recursively = (tags != nil && tags[0] == TAG_PARSE_ALL_RECURSIVE);
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
    #define shouldParseTag YES

        switch (tag) {

            case 1 /* voiceVolume */:
            {
                self->_flags.has_voiceVolume = YES;
                self->_voiceVolume = PBReaderReadUint64(reader);

            }
            break;
            case 2 /* distanceUnits */:
            {
                self->_flags.has_distanceUnits = YES;
                self->_distanceUnits = PBReaderReadUint64(reader);

            }
            break;
            case 3 /* pauseSpokenAudio */:
            {
                self->_flags.has_pauseSpokenAudio = YES;
                self->_pauseSpokenAudio = PBReaderReadBOOL(reader);

            }
            break;
            case 4 /* muteSpeechOverride */:
            {
                self->_flags.has_muteSpeechOverride = YES;
                self->_muteSpeechOverride = PBReaderReadBOOL(reader);

            }
            break;
            case 5 /* speechEnabled */:
            {
                self->_flags.has_speechEnabled = YES;
                self->_speechEnabled = PBReaderReadBOOL(reader);

            }
            break;
            case 6 /* maxAlternateRouteCount */:
            {
                self->_flags.has_maxAlternateRouteCount = YES;
                self->_maxAlternateRouteCount = PBReaderReadUint64(reader);

            }
            break;
            case 7 /* beepBeforeInstruction */:
            {
                self->_flags.has_beepBeforeInstruction = YES;
                self->_beepBeforeInstruction = PBReaderReadBOOL(reader);

            }
            break;
            case 8 /* voiceLanguage */:
            {
                NSString * new_voiceLanguage = PBReaderReadString(reader);
                self->_voiceLanguage = new_voiceLanguage;

            }
            break;
            case 9 /* shouldUseGuidanceEventManager */:
            {
                self->_flags.has_shouldUseGuidanceEventManager = YES;
                self->_shouldUseGuidanceEventManager = PBReaderReadBOOL(reader);

            }
            break;
            case 10 /* userPreferredTransportType */:
            {
                self->_flags.has_userPreferredTransportType = YES;
                self->_userPreferredTransportType = PBReaderReadInt32(reader);

            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }



    #undef shouldParseTag
    #undef shouldParseUnknown
    #undef recursively
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPNavigationSettingsIsValid(reader);
}

BOOL GEORPNavigationSettingsIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* voiceVolume */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint64(reader);
                break;
            case 2 /* distanceUnits */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint64(reader);
                break;
            case 3 /* pauseSpokenAudio */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 4 /* muteSpeechOverride */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 5 /* speechEnabled */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 6 /* maxAlternateRouteCount */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint64(reader);
                break;
            case 7 /* beepBeforeInstruction */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 8 /* voiceLanguage */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 9 /* shouldUseGuidanceEventManager */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 10 /* userPreferredTransportType */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPNavigationSettingsReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{

    /* voiceVolume */
    {
        if (self->_flags.has_voiceVolume)
        {
            PBDataWriterWriteUint64Field(writer, self->_voiceVolume, 1);
        }
    }

    /* distanceUnits */
    {
        if (self->_flags.has_distanceUnits)
        {
            PBDataWriterWriteUint64Field(writer, self->_distanceUnits, 2);
        }
    }

    /* pauseSpokenAudio */
    {
        if (self->_flags.has_pauseSpokenAudio)
        {
            PBDataWriterWriteBOOLField(writer, self->_pauseSpokenAudio, 3);
        }
    }

    /* muteSpeechOverride */
    {
        if (self->_flags.has_muteSpeechOverride)
        {
            PBDataWriterWriteBOOLField(writer, self->_muteSpeechOverride, 4);
        }
    }

    /* speechEnabled */
    {
        if (self->_flags.has_speechEnabled)
        {
            PBDataWriterWriteBOOLField(writer, self->_speechEnabled, 5);
        }
    }

    /* maxAlternateRouteCount */
    {
        if (self->_flags.has_maxAlternateRouteCount)
        {
            PBDataWriterWriteUint64Field(writer, self->_maxAlternateRouteCount, 6);
        }
    }

    /* beepBeforeInstruction */
    {
        if (self->_flags.has_beepBeforeInstruction)
        {
            PBDataWriterWriteBOOLField(writer, self->_beepBeforeInstruction, 7);
        }
    }

    /* voiceLanguage */
    {
        if (self->_voiceLanguage)
        {
            PBDataWriterWriteStringField(writer, self->_voiceLanguage, 8);
        }
    }

    /* shouldUseGuidanceEventManager */
    {
        if (self->_flags.has_shouldUseGuidanceEventManager)
        {
            PBDataWriterWriteBOOLField(writer, self->_shouldUseGuidanceEventManager, 9);
        }
    }

    /* userPreferredTransportType */
    {
        if (self->_flags.has_userPreferredTransportType)
        {
            PBDataWriterWriteInt32Field(writer, self->_userPreferredTransportType, 10);
        }
    }
}



- (void)copyTo:(GEORPNavigationSettings *)other
{
    [self readAll:NO];
    if (self->_flags.has_voiceVolume)
    {
        other->_voiceVolume = _voiceVolume;
        other->_flags.has_voiceVolume = YES;
    }
    if (self->_flags.has_distanceUnits)
    {
        other->_distanceUnits = _distanceUnits;
        other->_flags.has_distanceUnits = YES;
    }
    if (self->_flags.has_pauseSpokenAudio)
    {
        other->_pauseSpokenAudio = _pauseSpokenAudio;
        other->_flags.has_pauseSpokenAudio = YES;
    }
    if (self->_flags.has_muteSpeechOverride)
    {
        other->_muteSpeechOverride = _muteSpeechOverride;
        other->_flags.has_muteSpeechOverride = YES;
    }
    if (self->_flags.has_speechEnabled)
    {
        other->_speechEnabled = _speechEnabled;
        other->_flags.has_speechEnabled = YES;
    }
    if (self->_flags.has_maxAlternateRouteCount)
    {
        other->_maxAlternateRouteCount = _maxAlternateRouteCount;
        other->_flags.has_maxAlternateRouteCount = YES;
    }
    if (self->_flags.has_beepBeforeInstruction)
    {
        other->_beepBeforeInstruction = _beepBeforeInstruction;
        other->_flags.has_beepBeforeInstruction = YES;
    }
    if (_voiceLanguage)
    {
        other.voiceLanguage = _voiceLanguage;
    }
    if (self->_flags.has_shouldUseGuidanceEventManager)
    {
        other->_shouldUseGuidanceEventManager = _shouldUseGuidanceEventManager;
        other->_flags.has_shouldUseGuidanceEventManager = YES;
    }
    if (self->_flags.has_userPreferredTransportType)
    {
        other->_userPreferredTransportType = _userPreferredTransportType;
        other->_flags.has_userPreferredTransportType = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPNavigationSettings *copy = [[[self class] allocWithZone:zone] init];
    if (self->_flags.has_voiceVolume)
    {
        copy->_voiceVolume = _voiceVolume;
        copy->_flags.has_voiceVolume = YES;
    }
    if (self->_flags.has_distanceUnits)
    {
        copy->_distanceUnits = _distanceUnits;
        copy->_flags.has_distanceUnits = YES;
    }
    if (self->_flags.has_pauseSpokenAudio)
    {
        copy->_pauseSpokenAudio = _pauseSpokenAudio;
        copy->_flags.has_pauseSpokenAudio = YES;
    }
    if (self->_flags.has_muteSpeechOverride)
    {
        copy->_muteSpeechOverride = _muteSpeechOverride;
        copy->_flags.has_muteSpeechOverride = YES;
    }
    if (self->_flags.has_speechEnabled)
    {
        copy->_speechEnabled = _speechEnabled;
        copy->_flags.has_speechEnabled = YES;
    }
    if (self->_flags.has_maxAlternateRouteCount)
    {
        copy->_maxAlternateRouteCount = _maxAlternateRouteCount;
        copy->_flags.has_maxAlternateRouteCount = YES;
    }
    if (self->_flags.has_beepBeforeInstruction)
    {
        copy->_beepBeforeInstruction = _beepBeforeInstruction;
        copy->_flags.has_beepBeforeInstruction = YES;
    }
    copy->_voiceLanguage = [_voiceLanguage copyWithZone:zone];
    if (self->_flags.has_shouldUseGuidanceEventManager)
    {
        copy->_shouldUseGuidanceEventManager = _shouldUseGuidanceEventManager;
        copy->_flags.has_shouldUseGuidanceEventManager = YES;
    }
    if (self->_flags.has_userPreferredTransportType)
    {
        copy->_userPreferredTransportType = _userPreferredTransportType;
        copy->_flags.has_userPreferredTransportType = YES;
    }
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPNavigationSettings *other = (GEORPNavigationSettings *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_voiceVolume && other->_flags.has_voiceVolume && self->_voiceVolume == other->_voiceVolume) || (!self->_flags.has_voiceVolume && !other->_flags.has_voiceVolume))
    &&
    ((self->_flags.has_distanceUnits && other->_flags.has_distanceUnits && self->_distanceUnits == other->_distanceUnits) || (!self->_flags.has_distanceUnits && !other->_flags.has_distanceUnits))
    &&
    ((self->_flags.has_pauseSpokenAudio && other->_flags.has_pauseSpokenAudio && ((self->_pauseSpokenAudio && other->_pauseSpokenAudio) || (!self->_pauseSpokenAudio && !other->_pauseSpokenAudio))) || (!self->_flags.has_pauseSpokenAudio && !other->_flags.has_pauseSpokenAudio))
    &&
    ((self->_flags.has_muteSpeechOverride && other->_flags.has_muteSpeechOverride && ((self->_muteSpeechOverride && other->_muteSpeechOverride) || (!self->_muteSpeechOverride && !other->_muteSpeechOverride))) || (!self->_flags.has_muteSpeechOverride && !other->_flags.has_muteSpeechOverride))
    &&
    ((self->_flags.has_speechEnabled && other->_flags.has_speechEnabled && ((self->_speechEnabled && other->_speechEnabled) || (!self->_speechEnabled && !other->_speechEnabled))) || (!self->_flags.has_speechEnabled && !other->_flags.has_speechEnabled))
    &&
    ((self->_flags.has_maxAlternateRouteCount && other->_flags.has_maxAlternateRouteCount && self->_maxAlternateRouteCount == other->_maxAlternateRouteCount) || (!self->_flags.has_maxAlternateRouteCount && !other->_flags.has_maxAlternateRouteCount))
    &&
    ((self->_flags.has_beepBeforeInstruction && other->_flags.has_beepBeforeInstruction && ((self->_beepBeforeInstruction && other->_beepBeforeInstruction) || (!self->_beepBeforeInstruction && !other->_beepBeforeInstruction))) || (!self->_flags.has_beepBeforeInstruction && !other->_flags.has_beepBeforeInstruction))
    &&
    ((!self->_voiceLanguage && !other->_voiceLanguage) || [self->_voiceLanguage isEqual:other->_voiceLanguage])
    &&
    ((self->_flags.has_shouldUseGuidanceEventManager && other->_flags.has_shouldUseGuidanceEventManager && ((self->_shouldUseGuidanceEventManager && other->_shouldUseGuidanceEventManager) || (!self->_shouldUseGuidanceEventManager && !other->_shouldUseGuidanceEventManager))) || (!self->_flags.has_shouldUseGuidanceEventManager && !other->_flags.has_shouldUseGuidanceEventManager))
    &&
    ((self->_flags.has_userPreferredTransportType && other->_flags.has_userPreferredTransportType && self->_userPreferredTransportType == other->_userPreferredTransportType) || (!self->_flags.has_userPreferredTransportType && !other->_flags.has_userPreferredTransportType))
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_voiceVolume ? PBHashInt((NSUInteger)self->_voiceVolume) : 0)
    ^
    (self->_flags.has_distanceUnits ? PBHashInt((NSUInteger)self->_distanceUnits) : 0)
    ^
    (self->_flags.has_pauseSpokenAudio ? PBHashInt((NSUInteger)self->_pauseSpokenAudio) : 0)
    ^
    (self->_flags.has_muteSpeechOverride ? PBHashInt((NSUInteger)self->_muteSpeechOverride) : 0)
    ^
    (self->_flags.has_speechEnabled ? PBHashInt((NSUInteger)self->_speechEnabled) : 0)
    ^
    (self->_flags.has_maxAlternateRouteCount ? PBHashInt((NSUInteger)self->_maxAlternateRouteCount) : 0)
    ^
    (self->_flags.has_beepBeforeInstruction ? PBHashInt((NSUInteger)self->_beepBeforeInstruction) : 0)
    ^
    [self->_voiceLanguage hash]
    ^
    (self->_flags.has_shouldUseGuidanceEventManager ? PBHashInt((NSUInteger)self->_shouldUseGuidanceEventManager) : 0)
    ^
    (self->_flags.has_userPreferredTransportType ? PBHashInt((NSUInteger)self->_userPreferredTransportType) : 0)
    ;
}

- (void)mergeFrom:(GEORPNavigationSettings *)other
{
    [other readAll:NO];
    if (other->_flags.has_voiceVolume)
    {
        self->_voiceVolume = other->_voiceVolume;
        self->_flags.has_voiceVolume = 1;
    }
    if (other->_flags.has_distanceUnits)
    {
        self->_distanceUnits = other->_distanceUnits;
        self->_flags.has_distanceUnits = 1;
    }
    if (other->_flags.has_pauseSpokenAudio)
    {
        self->_pauseSpokenAudio = other->_pauseSpokenAudio;
        self->_flags.has_pauseSpokenAudio = 1;
    }
    if (other->_flags.has_muteSpeechOverride)
    {
        self->_muteSpeechOverride = other->_muteSpeechOverride;
        self->_flags.has_muteSpeechOverride = 1;
    }
    if (other->_flags.has_speechEnabled)
    {
        self->_speechEnabled = other->_speechEnabled;
        self->_flags.has_speechEnabled = 1;
    }
    if (other->_flags.has_maxAlternateRouteCount)
    {
        self->_maxAlternateRouteCount = other->_maxAlternateRouteCount;
        self->_flags.has_maxAlternateRouteCount = 1;
    }
    if (other->_flags.has_beepBeforeInstruction)
    {
        self->_beepBeforeInstruction = other->_beepBeforeInstruction;
        self->_flags.has_beepBeforeInstruction = 1;
    }
    if (other->_voiceLanguage)
    {
        [self setVoiceLanguage:other->_voiceLanguage];
    }
    if (other->_flags.has_shouldUseGuidanceEventManager)
    {
        self->_shouldUseGuidanceEventManager = other->_shouldUseGuidanceEventManager;
        self->_flags.has_shouldUseGuidanceEventManager = 1;
    }
    if (other->_flags.has_userPreferredTransportType)
    {
        self->_userPreferredTransportType = other->_userPreferredTransportType;
        self->_flags.has_userPreferredTransportType = 1;
    }
}


@end


