// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPDetails.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEOMapRegion.h>
#import <GeoServices/GEOPDPlace.h>
#import <GeoServices/GEORPUpdatedLabel.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPDetails

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (GEORPDetails_DisplayStyle)displayStyle
{
    return _flags.has_displayStyle ? _displayStyle : GEORPDetails_DisplayStyle_SHOW_REGION;
}
- (void)setDisplayStyle:(GEORPDetails_DisplayStyle)v
{
    _flags.wrote_displayStyle = 1;
    _flags.has_displayStyle = 1;
    _displayStyle = v;
}
- (void)setHasDisplayStyle:(BOOL)f
{
    _flags.wrote_displayStyle = 1;
    _flags.has_displayStyle = f ? 1 : 0;
}
- (BOOL)hasDisplayStyle
{
    return (BOOL)_flags.has_displayStyle;
}
- (NSString *)displayStyleAsString:(GEORPDetails_DisplayStyle)value
{
    return GEORPDetails_DisplayStyleAsString(value);
}
- (GEORPDetails_DisplayStyle)StringAsDisplayStyle:(NSString *)str
{
    return StringAsGEORPDetails_DisplayStyle(str);
}

- (void)_readLocalizedTitle {
    if (_flags.read_localizedTitle) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_localizedTitle) {
            static const uint32_t tags[] = {2, 0};
            GEORPDetailsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasLocalizedTitle
{
    [self _readLocalizedTitle];
    return _localizedTitle != nil;
}
- (NSString *)localizedTitle
{
    [self _readLocalizedTitle];
    return _localizedTitle;
}
- (void)setLocalizedTitle:(NSString *)v
{
    _flags.read_localizedTitle = 1;
    _flags.wrote_localizedTitle = 1;
    _localizedTitle = v;
}

- (void)_readLocalizedDescription {
    if (_flags.read_localizedDescription) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_localizedDescription) {
            static const uint32_t tags[] = {3, 0};
            GEORPDetailsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasLocalizedDescription
{
    [self _readLocalizedDescription];
    return _localizedDescription != nil;
}
- (NSString *)localizedDescription
{
    [self _readLocalizedDescription];
    return _localizedDescription;
}
- (void)setLocalizedDescription:(NSString *)v
{
    _flags.read_localizedDescription = 1;
    _flags.wrote_localizedDescription = 1;
    _localizedDescription = v;
}

- (void)_readDisplayRegion {
    if (_flags.read_displayRegion) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_displayRegion) {
            static const uint32_t tags[] = {4, 0};
            GEORPDetailsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasDisplayRegion
{
    [self _readDisplayRegion];
    return _displayRegion != nil;
}
- (GEOMapRegion *)displayRegion
{
    [self _readDisplayRegion];
    return _displayRegion;
}
- (void)setDisplayRegion:(GEOMapRegion *)v
{
    _flags.read_displayRegion = 1;
    _flags.wrote_displayRegion = 1;
    _displayRegion = v;
}

- (void)_readPlaces {
    if (_flags.read_places) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_places) {
            static const uint32_t tags[] = {6, 0};
            GEORPDetailsReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEOPDPlace *> *)places
{
    [self _readPlaces];
    return _places;
}
- (void)setPlaces:(NSMutableArray<GEOPDPlace *> *)v
{
    _flags.read_places = 1;
    _flags.wrote_places = 1;
    _places = v;
}
- (void)clearPlaces
{
    _flags.read_places = 1;
    _flags.wrote_places = 1;
    [_places removeAllObjects];
}
- (void)addPlace:(GEOPDPlace *)i
{
    [self _readPlaces];
    [self _addNoFlagsPlace:i];
    _flags.read_places = 1;
    _flags.wrote_places = 1;
}
- (void)_addNoFlagsPlace:(GEOPDPlace *)i
{
    if (!_places)
    {
        _places = [[NSMutableArray alloc] init];
    }
    [_places addObject:i];
}
- (NSUInteger)placesCount
{
    [self _readPlaces];
    return [_places count];
}
- (GEOPDPlace *)placeAtIndex:(NSUInteger)idx
{
    [self _readPlaces];
    return [_places objectAtIndex:idx];
}
+ (Class)placeType
{
    return [GEOPDPlace class];
}

- (void)_readLabel {
    if (_flags.read_label) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_label) {
            static const uint32_t tags[] = {7, 0};
            GEORPDetailsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasLabel
{
    [self _readLabel];
    return _label != nil;
}
- (GEORPUpdatedLabel *)label
{
    [self _readLabel];
    return _label;
}
- (void)setLabel:(GEORPUpdatedLabel *)v
{
    _flags.read_label = 1;
    _flags.wrote_label = 1;
    _label = v;
}

- (GEOTransportType)directionsType
{
    return _flags.has_directionsType ? _directionsType : GEOTransportType_AUTOMOBILE;
}
- (void)setDirectionsType:(GEOTransportType)v
{
    _flags.wrote_directionsType = 1;
    _flags.has_directionsType = 1;
    _directionsType = v;
}
- (void)setHasDirectionsType:(BOOL)f
{
    _flags.wrote_directionsType = 1;
    _flags.has_directionsType = f ? 1 : 0;
}
- (BOOL)hasDirectionsType
{
    return (BOOL)_flags.has_directionsType;
}
- (NSString *)directionsTypeAsString:(GEOTransportType)value
{
    return GEOTransportTypeAsString(value);
}
- (GEOTransportType)StringAsDirectionsType:(NSString *)str
{
    return StringAsGEOTransportType(str);
}

- (GEOMapType)mapType
{
    return _flags.has_mapType ? _mapType : GEOMapType_MAP_TYPE_NONE;
}
- (void)setMapType:(GEOMapType)v
{
    _flags.wrote_mapType = 1;
    _flags.has_mapType = 1;
    _mapType = v;
}
- (void)setHasMapType:(BOOL)f
{
    _flags.wrote_mapType = 1;
    _flags.has_mapType = f ? 1 : 0;
}
- (BOOL)hasMapType
{
    return (BOOL)_flags.has_mapType;
}
- (NSString *)mapTypeAsString:(GEOMapType)value
{
    return GEOMapTypeAsString(value);
}
- (GEOMapType)StringAsMapType:(NSString *)str
{
    return StringAsGEOMapType(str);
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_displayStyle)
    {
        [dict setObject:GEORPDetails_DisplayStyleAsString(self->_displayStyle) forKey:@"display_style"];
    }

    {
        NSString * value = self.localizedTitle;
        if (value) {
            [dict setObject:value forKey:@"localized_title"];
        }
    }

    {
        NSString * value = self.localizedDescription;
        if (value) {
            [dict setObject:value forKey:@"localized_description"];
        }
    }

    {
        GEOMapRegion * value = self.displayRegion;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"display_region"];
        }
    }

    if ([self->_places count])
    {
        NSMutableArray *placesDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_places count]];
        for (GEOPDPlace * i_place in self->_places)
        {
            [placesDictReprs addObject:[i_place dictionaryRepresentation]];
        }
        [dict setObject:placesDictReprs forKey:@"place"];
    }

    {
        GEORPUpdatedLabel * value = self.label;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"label"];
        }
    }

    if (self->_flags.has_directionsType)
    {
        [dict setObject:GEOTransportTypeAsString(self->_directionsType) forKey:@"directions_type"];
    }

    if (self->_flags.has_mapType)
    {
        [dict setObject:GEOMapTypeAsString(self->_mapType) forKey:@"map_type"];
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPDetailsReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPDetailsReadAllFrom(__unsafe_unretained GEORPDetails *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPDetailsReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPDetailsReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPDetailsReadFrom(__unsafe_unretained GEORPDetails *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPDetailsReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPDetailsReadSpecified(__unsafe_unretained GEORPDetails *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_localizedTitle
        + self->_flags.read_localizedDescription
        + self->_flags.read_displayRegion
        + self->_flags.read_places
        + self->_flags.read_label
        ;
    #define requiredLazyFieldCount 4 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* displayStyle */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_displayStyle = YES;
                self->_displayStyle = PBReaderReadInt32(reader);

            }
            break;
            case 2 /* localizedTitle */:
            {
                if (!shouldParseTag || self->_flags.read_localizedTitle) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_localizedTitle) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_localizedTitle = PBReaderReadString(reader);
                self->_localizedTitle = new_localizedTitle;

                --tagsRemaining;
            }
            break;
            case 3 /* localizedDescription */:
            {
                if (!shouldParseTag || self->_flags.read_localizedDescription) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_localizedDescription) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_localizedDescription = PBReaderReadString(reader);
                self->_localizedDescription = new_localizedDescription;

                --tagsRemaining;
            }
            break;
            case 4 /* displayRegion */:
            {
                if (!shouldParseTag || self->_flags.read_displayRegion) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_displayRegion) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOMapRegion *new_displayRegion = [[GEOMapRegion alloc] init];
                self->_displayRegion = new_displayRegion;
                PBDataReaderMark mark_displayRegion;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_displayRegion);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOMapRegionReadAllFrom(new_displayRegion, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_displayRegion);

                --tagsRemaining;
            }
            break;
            case 6 /* places */:
            {
                if (!shouldParseTag || self->_flags.read_places) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEOPDPlace *new_place = [[GEOPDPlace alloc] init];
                [self _addNoFlagsPlace:new_place];
                PBDataReaderMark mark_place;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_place);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPDPlaceReadAllFrom(new_place, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_place);

            }
            break;
            case 7 /* label */:
            {
                if (!shouldParseTag || self->_flags.read_label) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_label) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPUpdatedLabel *new_label = [[GEORPUpdatedLabel alloc] init];
                self->_label = new_label;
                PBDataReaderMark mark_label;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_label);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPUpdatedLabelReadAllFrom(new_label, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_label);

                --tagsRemaining;
            }
            break;
            case 8 /* directionsType */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_directionsType = YES;
                self->_directionsType = PBReaderReadInt32(reader);

            }
            break;
            case 9 /* mapType */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_mapType = YES;
                self->_mapType = PBReaderReadInt32(reader);

            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
            [self->_displayRegion readAll:YES];
            for (GEOPDPlace * i in self->_places)
                [i readAll:YES];
            [self->_label readAll:YES];
        }
        self->_flags.read_localizedTitle = YES;
        self->_flags.read_localizedDescription = YES;
        self->_flags.read_displayRegion = YES;
        self->_flags.read_places = YES;
        self->_flags.read_label = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 2 /* localizedTitle */:
                    self->_flags.read_localizedTitle = YES;
                    break;
                case 3 /* localizedDescription */:
                    self->_flags.read_localizedDescription = YES;
                    break;
                case 4 /* displayRegion */:
                    self->_flags.read_displayRegion = YES;
                    break;
                case 6 /* places */:
                    self->_flags.read_places = YES;
                    break;
                case 7 /* label */:
                    self->_flags.read_label = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPDetailsIsValid(reader);
}

BOOL GEORPDetailsIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* displayStyle */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 2 /* localizedTitle */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 3 /* localizedDescription */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 4 /* displayRegion */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_displayRegion;
                    if (!PBReaderPlaceMark(reader, &mark_displayRegion))
                        returnValue(NO);
                    if (!GEOMapRegionIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_displayRegion);
                }
                break;
            case 6 /* places */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_place;
                    if (!PBReaderPlaceMark(reader, &mark_place))
                        returnValue(NO);
                    if (!GEOPDPlaceIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_place);
                }
                break;
            case 7 /* label */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_label;
                    if (!PBReaderPlaceMark(reader, &mark_label))
                        returnValue(NO);
                    if (!GEORPUpdatedLabelIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_label);
                }
                break;
            case 8 /* directionsType */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 9 /* mapType */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPDetailsReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPDetailsIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* displayStyle */
    {
        if (self->_flags.has_displayStyle)
        {
            PBDataWriterWriteInt32Field(writer, self->_displayStyle, 1);
        }
    }

    /* localizedTitle */
    {
        if (self->_localizedTitle)
        {
            PBDataWriterWriteStringField(writer, self->_localizedTitle, 2);
        }
    }

    /* localizedDescription */
    {
        if (self->_localizedDescription)
        {
            PBDataWriterWriteStringField(writer, self->_localizedDescription, 3);
        }
    }

    /* displayRegion */
    {
        if (self->_displayRegion != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_displayRegion, 4);
        }
    }

    /* places */
    {
        for (GEOPDPlace * i_place in self->_places)
        {
            PBDataWriterWriteSubmessage(writer, i_place, 6);
        }

    }

    /* label */
    {
        if (self->_label != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_label, 7);
        }
    }

    /* directionsType */
    {
        if (self->_flags.has_directionsType)
        {
            PBDataWriterWriteInt32Field(writer, self->_directionsType, 8);
        }
    }

    /* mapType */
    {
        if (self->_flags.has_mapType)
        {
            PBDataWriterWriteInt32Field(writer, self->_mapType, 9);
        }
    }
}

BOOL GEORPDetailsIsDirty(__unsafe_unretained GEORPDetails *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_displayStyle
        || self->_flags.wrote_localizedTitle
        || self->_flags.read_localizedTitle
        || self->_flags.wrote_localizedDescription
        || self->_flags.read_localizedDescription
        || self->_flags.wrote_displayRegion
        || self->_flags.read_displayRegion
        || self->_flags.wrote_places
        || self->_flags.wrote_label
        || (self->_flags.read_label && GEORPUpdatedLabelIsDirty(self->_label))
        || self->_flags.wrote_directionsType
        || self->_flags.wrote_mapType
    ;

    if (!dirty) {

            if (self->_flags.read_places) {
                for (GEOPDPlace *i in self->_places) {
                    if (GEOPDPlaceIsDirty(i)) {
                        return YES;
                    }
                }
            }
    }

    return dirty;
}


- (void)copyTo:(GEORPDetails *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (self->_flags.has_displayStyle)
    {
        other->_displayStyle = _displayStyle;
        other->_flags.has_displayStyle = YES;
    }
    if (_localizedTitle)
    {
        other.localizedTitle = _localizedTitle;
    }
    if (_localizedDescription)
    {
        other.localizedDescription = _localizedDescription;
    }
    if (_displayRegion)
    {
        other.displayRegion = _displayRegion;
    }
    if ([self placesCount])
    {
        [other clearPlaces];
        NSUInteger placesCnt = [self placesCount];
        for (NSUInteger i = 0; i < placesCnt; i++)
        {
            [other addPlace:[self placeAtIndex:i]];
        }
    }
    if (_label)
    {
        other.label = _label;
    }
    if (self->_flags.has_directionsType)
    {
        other->_directionsType = _directionsType;
        other->_flags.has_directionsType = YES;
    }
    if (self->_flags.has_mapType)
    {
        other->_mapType = _mapType;
        other->_flags.has_mapType = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPDetails *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_displayStyle
                || _flags.wrote_localizedTitle
                || _flags.wrote_localizedDescription
                || _flags.wrote_displayRegion
                || _flags.wrote_places
                || _flags.wrote_label
                || _flags.wrote_directionsType
                || _flags.wrote_mapType
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPDetailsReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    if (self->_flags.has_displayStyle)
    {
        copy->_displayStyle = _displayStyle;
        copy->_flags.has_displayStyle = YES;
    }
    copy->_localizedTitle = [_localizedTitle copyWithZone:zone];
    copy->_localizedDescription = [_localizedDescription copyWithZone:zone];
    copy->_displayRegion = [_displayRegion copyWithZone:zone];
    for (GEOPDPlace * v in _places)
    {
        GEOPDPlace * vCopy = [v copyWithZone:zone];
        [copy addPlace:vCopy];
    }
    copy->_label = [_label copyWithZone:zone];
    if (self->_flags.has_directionsType)
    {
        copy->_directionsType = _directionsType;
        copy->_flags.has_directionsType = YES;
    }
    if (self->_flags.has_mapType)
    {
        copy->_mapType = _mapType;
        copy->_flags.has_mapType = YES;
    }
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPDetails *other = (GEORPDetails *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_displayStyle && other->_flags.has_displayStyle && self->_displayStyle == other->_displayStyle) || (!self->_flags.has_displayStyle && !other->_flags.has_displayStyle))
    &&
    ((!self->_localizedTitle && !other->_localizedTitle) || [self->_localizedTitle isEqual:other->_localizedTitle])
    &&
    ((!self->_localizedDescription && !other->_localizedDescription) || [self->_localizedDescription isEqual:other->_localizedDescription])
    &&
    ((!self->_displayRegion && !other->_displayRegion) || [self->_displayRegion isEqual:other->_displayRegion])
    &&
    ((!self->_places && !other->_places) || [self->_places isEqual:other->_places])

    &&
    ((!self->_label && !other->_label) || [self->_label isEqual:other->_label])
    &&
    ((self->_flags.has_directionsType && other->_flags.has_directionsType && self->_directionsType == other->_directionsType) || (!self->_flags.has_directionsType && !other->_flags.has_directionsType))
    &&
    ((self->_flags.has_mapType && other->_flags.has_mapType && self->_mapType == other->_mapType) || (!self->_flags.has_mapType && !other->_flags.has_mapType))
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_displayStyle ? PBHashInt((NSUInteger)self->_displayStyle) : 0)
    ^
    [self->_localizedTitle hash]
    ^
    [self->_localizedDescription hash]
    ^
    [self->_displayRegion hash]
    ^
    [self->_places hash]
    ^
    [self->_label hash]
    ^
    (self->_flags.has_directionsType ? PBHashInt((NSUInteger)self->_directionsType) : 0)
    ^
    (self->_flags.has_mapType ? PBHashInt((NSUInteger)self->_mapType) : 0)
    ;
}

- (void)mergeFrom:(GEORPDetails *)other
{
    [other readAll:NO];
    if (other->_flags.has_displayStyle)
    {
        self->_displayStyle = other->_displayStyle;
        self->_flags.has_displayStyle = 1;
    }
    if (other->_localizedTitle)
    {
        [self setLocalizedTitle:other->_localizedTitle];
    }
    if (other->_localizedDescription)
    {
        [self setLocalizedDescription:other->_localizedDescription];
    }
    if (self->_displayRegion && other->_displayRegion)
    {
        [self->_displayRegion mergeFrom:other->_displayRegion];
    }
    else if (!self->_displayRegion && other->_displayRegion)
    {
        [self setDisplayRegion:other->_displayRegion];
    }
    for (GEOPDPlace * iter_places in other->_places)
    {
        [self addPlace:iter_places];
    }
    if (self->_label && other->_label)
    {
        [self->_label mergeFrom:other->_label];
    }
    else if (!self->_label && other->_label)
    {
        [self setLabel:other->_label];
    }
    if (other->_flags.has_directionsType)
    {
        self->_directionsType = other->_directionsType;
        self->_flags.has_directionsType = 1;
    }
    if (other->_flags.has_mapType)
    {
        self->_mapType = other->_mapType;
        self->_flags.has_mapType = 1;
    }
}


@end


