// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPProblem.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEORPProblemContext.h>
#import <GeoServices/GEORPProblemCorrections.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPProblem

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)dealloc
{
    PBRepeatedInt32Clear(&(self->_userPaths));
}

- (uint32_t)protocolVersion
{
    return _protocolVersion;
}
- (void)setProtocolVersion:(uint32_t)v
{
    _flags.wrote_protocolVersion = 1;
    _flags.has_protocolVersion = 1;
    _protocolVersion = v;
}
- (void)setHasProtocolVersion:(BOOL)f
{
    _flags.wrote_protocolVersion = 1;
    _flags.has_protocolVersion = f ? 1 : 0;
}
- (BOOL)hasProtocolVersion
{
    return (BOOL)_flags.has_protocolVersion;
}

- (void)_readUserPaths {
    if (_flags.read_userPaths) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_userPaths) {
            static const uint32_t tags[] = {2, 0};
            GEORPProblemReadSpecified(self, reader, tags);
        }
    }
}
- (NSUInteger)userPathsCount
{
    [self _readUserPaths];
    return _userPaths.count;
}
- (GEORPUserPathItem *)userPaths
{
    [self _readUserPaths];
    return _userPaths.list;
}
- (void)clearUserPaths
{
    _flags.read_userPaths = 1;
    _flags.wrote_userPaths = 1;
    PBRepeatedInt32Clear(&_userPaths);
}
- (void)addUserPath:(GEORPUserPathItem)i
{
    [self _readUserPaths];
    [self _addNoFlagsUserPath:i];
    _flags.read_userPaths = 1;
    _flags.wrote_userPaths = 1;
}
- (void)_addNoFlagsUserPath:(GEORPUserPathItem)i
{
    PBRepeatedInt32Add(&_userPaths, i);
}
- (GEORPUserPathItem)userPathAtIndex:(NSUInteger)idx
{
    [self _readUserPaths];
    if (_userPaths.count <= idx)
    {
        [[NSException exceptionWithName:NSRangeException reason:[NSString stringWithFormat:@"idx (%tu) is out of range (%tu)", idx, _userPaths.count] userInfo:nil] raise];
    }
    return _userPaths.list[idx];
}
- (void)setUserPaths:(GEORPUserPathItem *)list count:(NSUInteger)count
{
    _flags.read_userPaths = 1;
    _flags.wrote_userPaths = 1;
    PBRepeatedInt32Set(&_userPaths, list, count);
}
- (NSString *)userPathsAsString:(GEORPUserPathItem)value
{
    return GEORPUserPathItemAsString(value);
}
- (GEORPUserPathItem)StringAsUserPaths:(NSString *)str
{
    return StringAsGEORPUserPathItem(str);
}

- (GEORPProblemType)problemType
{
    return _flags.has_problemType ? _problemType : GEORPProblemType_PROBLEM_TYPE_UNKNOWN;
}
- (void)setProblemType:(GEORPProblemType)v
{
    _flags.wrote_problemType = 1;
    _flags.has_problemType = 1;
    _problemType = v;
}
- (void)setHasProblemType:(BOOL)f
{
    _flags.wrote_problemType = 1;
    _flags.has_problemType = f ? 1 : 0;
}
- (BOOL)hasProblemType
{
    return (BOOL)_flags.has_problemType;
}
- (NSString *)problemTypeAsString:(GEORPProblemType)value
{
    return GEORPProblemTypeAsString(value);
}
- (GEORPProblemType)StringAsProblemType:(NSString *)str
{
    return StringAsGEORPProblemType(str);
}

- (void)_readProblemCorrections {
    if (_flags.read_problemCorrections) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_problemCorrections) {
            static const uint32_t tags[] = {4, 0};
            GEORPProblemReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasProblemCorrections
{
    [self _readProblemCorrections];
    return _problemCorrections != nil;
}
- (GEORPProblemCorrections *)problemCorrections
{
    [self _readProblemCorrections];
    return _problemCorrections;
}
- (void)setProblemCorrections:(GEORPProblemCorrections *)v
{
    _flags.read_problemCorrections = 1;
    _flags.wrote_problemCorrections = 1;
    _problemCorrections = v;
}

- (void)_readProblemContext {
    if (_flags.read_problemContext) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_problemContext) {
            static const uint32_t tags[] = {5, 0};
            GEORPProblemReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasProblemContext
{
    [self _readProblemContext];
    return _problemContext != nil;
}
- (GEORPProblemContext *)problemContext
{
    [self _readProblemContext];
    return _problemContext;
}
- (void)setProblemContext:(GEORPProblemContext *)v
{
    _flags.read_problemContext = 1;
    _flags.wrote_problemContext = 1;
    _problemContext = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_protocolVersion)
    {
        [dict setObject:@(self->_protocolVersion) forKey:@"protocol_version"];
    }

    if (self->_userPaths.count > 0)
    {
        NSMutableArray *userPathsValues = [NSMutableArray arrayWithCapacity:self->_userPaths.count];
        for (NSUInteger i = 0; i < self->_userPaths.count; i++)
        {
            [userPathsValues addObject:GEORPUserPathItemAsString(self->_userPaths.list[i])];
        }
        [dict setObject:userPathsValues forKey:@"user_path"];
    }

    if (self->_flags.has_problemType)
    {
        [dict setObject:GEORPProblemTypeAsString(self->_problemType) forKey:@"problem_type"];
    }

    {
        GEORPProblemCorrections * value = self.problemCorrections;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"problem_corrections"];
        }
    }

    {
        GEORPProblemContext * value = self.problemContext;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"problem_context"];
        }
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPProblemReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPProblemReadAllFrom(__unsafe_unretained GEORPProblem *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPProblemReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPProblemReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPProblemReadFrom(__unsafe_unretained GEORPProblem *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPProblemReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPProblemReadSpecified(__unsafe_unretained GEORPProblem *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_userPaths
        + self->_flags.read_problemCorrections
        + self->_flags.read_problemContext
        ;
    #define requiredLazyFieldCount 2 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* protocolVersion */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_protocolVersion = YES;
                self->_protocolVersion = PBReaderReadUint32(reader);

            }
            break;
            case 2 /* userPaths */:
            {
                if (!shouldParseTag || self->_flags.read_userPaths) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
            if (TYPE_LENGTH_DELIMITED == aType)
                {
                    PBDataReaderMark mark_userPath;
                    BOOL markError = !PBReaderPlaceMark(reader, &mark_userPath);
                    if (markError)
                    {
                        return NO;
                    }
                    while (PBReaderHasMoreData(reader))
                    {
                        GEORPUserPathItem new_userPath = PBReaderReadInt32(reader);
                        PBRepeatedInt32Add(&(self->_userPaths), new_userPath);
                    }
                    PBReaderRecallMark(reader, &mark_userPath);
                }
                else
                {
                    PBRepeatedInt32Add(&(self->_userPaths), PBReaderReadInt32(reader));
                }

            }
            break;
            case 3 /* problemType */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_problemType = YES;
                self->_problemType = PBReaderReadInt32(reader);

            }
            break;
            case 4 /* problemCorrections */:
            {
                if (!shouldParseTag || self->_flags.read_problemCorrections) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_problemCorrections) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPProblemCorrections *new_problemCorrections = [[GEORPProblemCorrections alloc] init];
                self->_problemCorrections = new_problemCorrections;
                PBDataReaderMark mark_problemCorrections;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_problemCorrections);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPProblemCorrectionsReadAllFrom(new_problemCorrections, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_problemCorrections);

                --tagsRemaining;
            }
            break;
            case 5 /* problemContext */:
            {
                if (!shouldParseTag || self->_flags.read_problemContext) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_problemContext) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPProblemContext *new_problemContext = [[GEORPProblemContext alloc] init];
                self->_problemContext = new_problemContext;
                PBDataReaderMark mark_problemContext;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_problemContext);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPProblemContextReadAllFrom(new_problemContext, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_problemContext);

                --tagsRemaining;
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
            [self->_problemCorrections readAll:YES];
            [self->_problemContext readAll:YES];
        }
        self->_flags.read_userPaths = YES;
        self->_flags.read_problemCorrections = YES;
        self->_flags.read_problemContext = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 2 /* userPaths */:
                    self->_flags.read_userPaths = YES;
                    break;
                case 4 /* problemCorrections */:
                    self->_flags.read_problemCorrections = YES;
                    break;
                case 5 /* problemContext */:
                    self->_flags.read_problemContext = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPProblemIsValid(reader);
}

BOOL GEORPProblemIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* protocolVersion */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint32(reader);
                break;
            case 2 /* userPaths */:
                if (TYPE_LENGTH_DELIMITED == aType)
                {
                    PBDataReaderMark mark_userPath;
                    if (!PBReaderPlaceMark(reader, &mark_userPath))
                        returnValue(NO);
                    while (PBReaderHasMoreData(reader))
                        PBReaderReadInt32(reader);
                    PBReaderRecallMark(reader, &mark_userPath);
                }
                else if (TYPE_VARINT != aType)
                    returnValue(NO);
                else
                    PBReaderReadInt32(reader);
                break;
            case 3 /* problemType */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 4 /* problemCorrections */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_problemCorrections;
                    if (!PBReaderPlaceMark(reader, &mark_problemCorrections))
                        returnValue(NO);
                    if (!GEORPProblemCorrectionsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_problemCorrections);
                }
                break;
            case 5 /* problemContext */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_problemContext;
                    if (!PBReaderPlaceMark(reader, &mark_problemContext))
                        returnValue(NO);
                    if (!GEORPProblemContextIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_problemContext);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPProblemReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPProblemIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* protocolVersion */
    {
        if (self->_flags.has_protocolVersion)
        {
            PBDataWriterWriteUint32Field(writer, self->_protocolVersion, 1);
        }
    }

    /* userPaths */
    {
        if (self->_userPaths.count)
        {
            NSUInteger i_userPaths;
            for (i_userPaths = 0; i_userPaths < self->_userPaths.count; i_userPaths++)
            {
                PBDataWriterWriteInt32Field(writer, self->_userPaths.list[i_userPaths], 2);
            }
        }

    }

    /* problemType */
    {
        if (self->_flags.has_problemType)
        {
            PBDataWriterWriteInt32Field(writer, self->_problemType, 3);
        }
    }

    /* problemCorrections */
    {
        if (self->_problemCorrections != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_problemCorrections, 4);
        }
    }

    /* problemContext */
    {
        if (self->_problemContext != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_problemContext, 5);
        }
    }
}

BOOL GEORPProblemIsDirty(__unsafe_unretained GEORPProblem *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_protocolVersion
        || self->_flags.wrote_userPaths
        || self->_flags.read_userPaths
        || self->_flags.wrote_problemType
        || self->_flags.wrote_problemCorrections
        || (self->_flags.read_problemCorrections && GEORPProblemCorrectionsIsDirty(self->_problemCorrections))
        || self->_flags.wrote_problemContext
        || (self->_flags.read_problemContext && GEORPProblemContextIsDirty(self->_problemContext))
    ;


    return dirty;
}


- (void)copyTo:(GEORPProblem *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (self->_flags.has_protocolVersion)
    {
        other->_protocolVersion = _protocolVersion;
        other->_flags.has_protocolVersion = YES;
    }
    if ([self userPathsCount])
    {
        [other clearUserPaths];
        NSUInteger userPathsCnt = [self userPathsCount];
        for (NSUInteger i = 0; i < userPathsCnt; i++)
        {
            [other addUserPath:[self userPathAtIndex:i]];
        }
    }
    if (self->_flags.has_problemType)
    {
        other->_problemType = _problemType;
        other->_flags.has_problemType = YES;
    }
    if (_problemCorrections)
    {
        other.problemCorrections = _problemCorrections;
    }
    if (_problemContext)
    {
        other.problemContext = _problemContext;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPProblem *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_protocolVersion
                || _flags.wrote_userPaths
                || _flags.wrote_problemType
                || _flags.wrote_problemCorrections
                || _flags.wrote_problemContext
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPProblemReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    if (self->_flags.has_protocolVersion)
    {
        copy->_protocolVersion = _protocolVersion;
        copy->_flags.has_protocolVersion = YES;
    }
    PBRepeatedInt32Copy(&(copy->_userPaths), &_userPaths);
    if (self->_flags.has_problemType)
    {
        copy->_problemType = _problemType;
        copy->_flags.has_problemType = YES;
    }
    copy->_problemCorrections = [_problemCorrections copyWithZone:zone];
    copy->_problemContext = [_problemContext copyWithZone:zone];
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPProblem *other = (GEORPProblem *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_protocolVersion && other->_flags.has_protocolVersion && self->_protocolVersion == other->_protocolVersion) || (!self->_flags.has_protocolVersion && !other->_flags.has_protocolVersion))
    &&
    PBRepeatedInt32IsEqual(&(self->_userPaths), &(other->_userPaths))

    &&
    ((self->_flags.has_problemType && other->_flags.has_problemType && self->_problemType == other->_problemType) || (!self->_flags.has_problemType && !other->_flags.has_problemType))
    &&
    ((!self->_problemCorrections && !other->_problemCorrections) || [self->_problemCorrections isEqual:other->_problemCorrections])
    &&
    ((!self->_problemContext && !other->_problemContext) || [self->_problemContext isEqual:other->_problemContext])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_protocolVersion ? PBHashInt((NSUInteger)self->_protocolVersion) : 0)
    ^
    PBRepeatedInt32Hash(&(self->_userPaths))
    ^
    (self->_flags.has_problemType ? PBHashInt((NSUInteger)self->_problemType) : 0)
    ^
    [self->_problemCorrections hash]
    ^
    [self->_problemContext hash]
    ;
}

- (void)mergeFrom:(GEORPProblem *)other
{
    [other readAll:NO];
    if (other->_flags.has_protocolVersion)
    {
        self->_protocolVersion = other->_protocolVersion;
        self->_flags.has_protocolVersion = 1;
    }
    NSUInteger userPathsCnt = [other userPathsCount];
    for (NSUInteger i = 0; i < userPathsCnt; i++)
    {
        [self addUserPath:[other userPathAtIndex:i]];
    }
    if (other->_flags.has_problemType)
    {
        self->_problemType = other->_problemType;
        self->_flags.has_problemType = 1;
    }
    if (self->_problemCorrections && other->_problemCorrections)
    {
        [self->_problemCorrections mergeFrom:other->_problemCorrections];
    }
    else if (!self->_problemCorrections && other->_problemCorrections)
    {
        [self setProblemCorrections:other->_problemCorrections];
    }
    if (self->_problemContext && other->_problemContext)
    {
        [self->_problemContext mergeFrom:other->_problemContext];
    }
    else if (!self->_problemContext && other->_problemContext)
    {
        [self setProblemContext:other->_problemContext];
    }
}


@end


