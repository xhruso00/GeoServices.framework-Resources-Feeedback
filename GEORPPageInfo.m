// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPPageInfo.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPPageInfo


- (uint32_t)pageSize
{
    return _pageSize;
}
- (void)setPageSize:(uint32_t)v
{
    _flags.has_pageSize = 1;
    _pageSize = v;
}
- (void)setHasPageSize:(BOOL)f
{
    _flags.has_pageSize = f ? 1 : 0;
}
- (BOOL)hasPageSize
{
    return (BOOL)_flags.has_pageSize;
}

- (BOOL)hasNextPageToken
{
    return _nextPageToken != nil;
}
- (NSData *)nextPageToken
{
    return _nextPageToken;
}
- (void)setNextPageToken:(NSData *)v
{
    _nextPageToken = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_pageSize)
    {
        [dict setObject:@(self->_pageSize) forKey:@"page_size"];
    }

    {
        NSData * value = self.nextPageToken;
        if (value) {
            [dict setObject:value forKey:@"next_page_token"];
        }
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively { /* noop */ }
BOOL GEORPPageInfoReadAllFrom(__unsafe_unretained GEORPPageInfo *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};

    @synchronized(reader) {
        BOOL result = GEORPPageInfoReadSpecified(self, reader, recursively ? recursiveTag : nil);
        return result;
    }
}
BOOL GEORPPageInfoReadFrom(__unsafe_unretained GEORPPageInfo *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPPageInfoReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPPageInfoReadSpecified(__unsafe_unretained GEORPPageInfo *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    #define shouldParseUnknown YES
    __attribute__((unused)) BOOL const recursively = (tags != nil && tags[0] == TAG_PARSE_ALL_RECURSIVE);
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
    #define shouldParseTag YES

        switch (tag) {

            case 1 /* pageSize */:
            {
                self->_flags.has_pageSize = YES;
                self->_pageSize = PBReaderReadUint32(reader);

            }
            break;
            case 2 /* nextPageToken */:
            {
                NSData * new_nextPageToken = PBReaderReadData(reader);
                self->_nextPageToken = new_nextPageToken;

            }
            break;
            default:
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
    }



    #undef shouldParseTag
    #undef shouldParseUnknown
    #undef recursively
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPPageInfoIsValid(reader);
}

BOOL GEORPPageInfoIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* pageSize */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint32(reader);
                break;
            case 2 /* nextPageToken */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPPageInfoReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{

    /* pageSize */
    {
        if (self->_flags.has_pageSize)
        {
            PBDataWriterWriteUint32Field(writer, self->_pageSize, 1);
        }
    }

    /* nextPageToken */
    {
        if (self->_nextPageToken)
        {
            PBDataWriterWriteDataField(writer, self->_nextPageToken, 2);
        }
    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}



- (void)copyTo:(GEORPPageInfo *)other
{
    [self readAll:NO];
    if (self->_flags.has_pageSize)
    {
        other->_pageSize = _pageSize;
        other->_flags.has_pageSize = YES;
    }
    if (_nextPageToken)
    {
        other.nextPageToken = _nextPageToken;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPPageInfo *copy = [[[self class] allocWithZone:zone] init];
    if (self->_flags.has_pageSize)
    {
        copy->_pageSize = _pageSize;
        copy->_flags.has_pageSize = YES;
    }
    copy->_nextPageToken = [_nextPageToken copyWithZone:zone];
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPPageInfo *other = (GEORPPageInfo *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_pageSize && other->_flags.has_pageSize && self->_pageSize == other->_pageSize) || (!self->_flags.has_pageSize && !other->_flags.has_pageSize))
    &&
    ((!self->_nextPageToken && !other->_nextPageToken) || [self->_nextPageToken isEqual:other->_nextPageToken])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_pageSize ? PBHashInt((NSUInteger)self->_pageSize) : 0)
    ^
    [self->_nextPageToken hash]
    ;
}

- (void)mergeFrom:(GEORPPageInfo *)other
{
    [other readAll:NO];
    if (other->_flags.has_pageSize)
    {
        self->_pageSize = other->_pageSize;
        self->_flags.has_pageSize = 1;
    }
    if (other->_nextPageToken)
    {
        [self setNextPageToken:other->_nextPageToken];
    }
}

- (PBUnknownFields *)unknownFields
{
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
}

@end


