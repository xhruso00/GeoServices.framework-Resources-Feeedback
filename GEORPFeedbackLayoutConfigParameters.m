// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPFeedbackLayoutConfigParameters.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEOLatLng.h>
#import <GeoServices/GEOMapRegion.h>
#import <GeoServices/GEOPDMapsIdentifier.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPFeedbackLayoutConfigParameters

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (GEORPFeedbackLayoutFormType)formType
{
    return _flags.has_formType ? _formType : GEORPFeedbackLayoutFormType_FEEDBACK_LAYOUT_FORM_UNKNOWN;
}
- (void)setFormType:(GEORPFeedbackLayoutFormType)v
{
    _flags.wrote_formType = 1;
    _flags.has_formType = 1;
    _formType = v;
}
- (void)setHasFormType:(BOOL)f
{
    _flags.wrote_formType = 1;
    _flags.has_formType = f ? 1 : 0;
}
- (BOOL)hasFormType
{
    return (BOOL)_flags.has_formType;
}
- (NSString *)formTypeAsString:(GEORPFeedbackLayoutFormType)value
{
    return GEORPFeedbackLayoutFormTypeAsString(value);
}
- (GEORPFeedbackLayoutFormType)StringAsFormType:(NSString *)str
{
    return StringAsGEORPFeedbackLayoutFormType(str);
}

- (void)_readMapRegion {
    if (_flags.read_mapRegion) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_mapRegion) {
            static const uint32_t tags[] = {2, 0};
            GEORPFeedbackLayoutConfigParametersReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasMapRegion
{
    [self _readMapRegion];
    return _mapRegion != nil;
}
- (GEOMapRegion *)mapRegion
{
    [self _readMapRegion];
    return _mapRegion;
}
- (void)setMapRegion:(GEOMapRegion *)v
{
    _flags.read_mapRegion = 1;
    _flags.wrote_mapRegion = 1;
    _mapRegion = v;
}

- (void)_readCoordinate {
    if (_flags.read_coordinate) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_coordinate) {
            static const uint32_t tags[] = {3, 0};
            GEORPFeedbackLayoutConfigParametersReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCoordinate
{
    [self _readCoordinate];
    return _coordinate != nil;
}
- (GEOLatLng *)coordinate
{
    [self _readCoordinate];
    return _coordinate;
}
- (void)setCoordinate:(GEOLatLng *)v
{
    _flags.read_coordinate = 1;
    _flags.wrote_coordinate = 1;
    _coordinate = v;
}

- (void)_readMapsId {
    if (_flags.read_mapsId) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_mapsId) {
            static const uint32_t tags[] = {4, 0};
            GEORPFeedbackLayoutConfigParametersReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasMapsId
{
    [self _readMapsId];
    return _mapsId != nil;
}
- (GEOPDMapsIdentifier *)mapsId
{
    [self _readMapsId];
    return _mapsId;
}
- (void)setMapsId:(GEOPDMapsIdentifier *)v
{
    _flags.read_mapsId = 1;
    _flags.wrote_mapsId = 1;
    _mapsId = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_formType)
    {
        [dict setObject:GEORPFeedbackLayoutFormTypeAsString(self->_formType) forKey:@"form_type"];
    }

    {
        GEOMapRegion * value = self.mapRegion;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"map_region"];
        }
    }

    {
        GEOLatLng * value = self.coordinate;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"coordinate"];
        }
    }

    {
        GEOPDMapsIdentifier * value = self.mapsId;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"maps_id"];
        }
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPFeedbackLayoutConfigParametersReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPFeedbackLayoutConfigParametersReadAllFrom(__unsafe_unretained GEORPFeedbackLayoutConfigParameters *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPFeedbackLayoutConfigParametersReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPFeedbackLayoutConfigParametersReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPFeedbackLayoutConfigParametersReadFrom(__unsafe_unretained GEORPFeedbackLayoutConfigParameters *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPFeedbackLayoutConfigParametersReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPFeedbackLayoutConfigParametersReadSpecified(__unsafe_unretained GEORPFeedbackLayoutConfigParameters *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_mapRegion
        + self->_flags.read_coordinate
        + self->_flags.read_mapsId
        + self->_flags.read_unknownFields
        ;
    #define requiredLazyFieldCount 2 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL shouldParseUnknown = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            case TAG_UNKNOWN_FIELDS:
                shouldParseUnknown = YES;
                ++readLazyCount;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
        shouldParseUnknown = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !(readAll || shouldParseUnknown);
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* formType */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_formType = YES;
                self->_formType = PBReaderReadInt32(reader);

            }
            break;
            case 2 /* mapRegion */:
            {
                if (!shouldParseTag || self->_flags.read_mapRegion) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_mapRegion) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOMapRegion *new_mapRegion = [[GEOMapRegion alloc] init];
                self->_mapRegion = new_mapRegion;
                PBDataReaderMark mark_mapRegion;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_mapRegion);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOMapRegionReadAllFrom(new_mapRegion, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_mapRegion);

                --tagsRemaining;
            }
            break;
            case 3 /* coordinate */:
            {
                if (!shouldParseTag || self->_flags.read_coordinate) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_coordinate) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOLatLng *new_coordinate = [[GEOLatLng alloc] init];
                self->_coordinate = new_coordinate;
                PBDataReaderMark mark_coordinate;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_coordinate);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOLatLngReadAllFrom(new_coordinate, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_coordinate);

                --tagsRemaining;
            }
            break;
            case 4 /* mapsId */:
            {
                if (!shouldParseTag || self->_flags.read_mapsId) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_mapsId) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOPDMapsIdentifier *new_mapsId = [[GEOPDMapsIdentifier alloc] init];
                self->_mapsId = new_mapsId;
                PBDataReaderMark mark_mapsId;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_mapsId);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPDMapsIdentifierReadAllFrom(new_mapsId, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_mapsId);

                --tagsRemaining;
            }
            break;
            default:
                if (!shouldParseUnknown || self->_flags.read_unknownFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }

    if (shouldParseUnknown) {
        self->_flags.read_unknownFields = YES;
    }

    if (readAll) {
        if (recursively) {
            [self->_mapRegion readAll:YES];
            [self->_coordinate readAll:YES];
            [self->_mapsId readAll:YES];
        }
        self->_flags.read_mapRegion = YES;
        self->_flags.read_coordinate = YES;
        self->_flags.read_mapsId = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 2 /* mapRegion */:
                    self->_flags.read_mapRegion = YES;
                    break;
                case 3 /* coordinate */:
                    self->_flags.read_coordinate = YES;
                    break;
                case 4 /* mapsId */:
                    self->_flags.read_mapsId = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPFeedbackLayoutConfigParametersIsValid(reader);
}

BOOL GEORPFeedbackLayoutConfigParametersIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* formType */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 2 /* mapRegion */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_mapRegion;
                    if (!PBReaderPlaceMark(reader, &mark_mapRegion))
                        returnValue(NO);
                    if (!GEOMapRegionIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_mapRegion);
                }
                break;
            case 3 /* coordinate */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_coordinate;
                    if (!PBReaderPlaceMark(reader, &mark_coordinate))
                        returnValue(NO);
                    if (!GEOLatLngIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_coordinate);
                }
                break;
            case 4 /* mapsId */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_mapsId;
                    if (!PBReaderPlaceMark(reader, &mark_mapsId))
                        returnValue(NO);
                    if (!GEOPDMapsIdentifierIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_mapsId);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPFeedbackLayoutConfigParametersReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPFeedbackLayoutConfigParametersIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* formType */
    {
        if (self->_flags.has_formType)
        {
            PBDataWriterWriteInt32Field(writer, self->_formType, 1);
        }
    }

    /* mapRegion */
    {
        if (self->_mapRegion != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_mapRegion, 2);
        }
    }

    /* coordinate */
    {
        if (self->_coordinate != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_coordinate, 3);
        }
    }

    /* mapsId */
    {
        if (self->_mapsId != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_mapsId, 4);
        }
    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}

BOOL GEORPFeedbackLayoutConfigParametersIsDirty(__unsafe_unretained GEORPFeedbackLayoutConfigParameters *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_formType
        || self->_flags.wrote_mapRegion
        || self->_flags.read_mapRegion
        || self->_flags.wrote_coordinate
        || self->_flags.read_coordinate
        || self->_flags.wrote_mapsId
        || self->_flags.read_mapsId
        || self->_flags.wrote_unknownFields
    ;


    return dirty;
}


- (void)copyTo:(GEORPFeedbackLayoutConfigParameters *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (self->_flags.has_formType)
    {
        other->_formType = _formType;
        other->_flags.has_formType = YES;
    }
    if (_mapRegion)
    {
        other.mapRegion = _mapRegion;
    }
    if (_coordinate)
    {
        other.coordinate = _coordinate;
    }
    if (_mapsId)
    {
        other.mapsId = _mapsId;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPFeedbackLayoutConfigParameters *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_formType
                || _flags.wrote_mapRegion
                || _flags.wrote_coordinate
                || _flags.wrote_mapsId
                || _flags.wrote_unknownFields
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPFeedbackLayoutConfigParametersReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    if (self->_flags.has_formType)
    {
        copy->_formType = _formType;
        copy->_flags.has_formType = YES;
    }
    copy->_mapRegion = [_mapRegion copyWithZone:zone];
    copy->_coordinate = [_coordinate copyWithZone:zone];
    copy->_mapsId = [_mapsId copyWithZone:zone];
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPFeedbackLayoutConfigParameters *other = (GEORPFeedbackLayoutConfigParameters *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_formType && other->_flags.has_formType && self->_formType == other->_formType) || (!self->_flags.has_formType && !other->_flags.has_formType))
    &&
    ((!self->_mapRegion && !other->_mapRegion) || [self->_mapRegion isEqual:other->_mapRegion])
    &&
    ((!self->_coordinate && !other->_coordinate) || [self->_coordinate isEqual:other->_coordinate])
    &&
    ((!self->_mapsId && !other->_mapsId) || [self->_mapsId isEqual:other->_mapsId])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_formType ? PBHashInt((NSUInteger)self->_formType) : 0)
    ^
    [self->_mapRegion hash]
    ^
    [self->_coordinate hash]
    ^
    [self->_mapsId hash]
    ;
}

- (void)mergeFrom:(GEORPFeedbackLayoutConfigParameters *)other
{
    [other readAll:NO];
    if (other->_flags.has_formType)
    {
        self->_formType = other->_formType;
        self->_flags.has_formType = 1;
    }
    if (self->_mapRegion && other->_mapRegion)
    {
        [self->_mapRegion mergeFrom:other->_mapRegion];
    }
    else if (!self->_mapRegion && other->_mapRegion)
    {
        [self setMapRegion:other->_mapRegion];
    }
    if (self->_coordinate && other->_coordinate)
    {
        [self->_coordinate mergeFrom:other->_coordinate];
    }
    else if (!self->_coordinate && other->_coordinate)
    {
        [self setCoordinate:other->_coordinate];
    }
    if (self->_mapsId && other->_mapsId)
    {
        [self->_mapsId mergeFrom:other->_mapsId];
    }
    else if (!self->_mapsId && other->_mapsId)
    {
        [self setMapsId:other->_mapsId];
    }
}

- (PBUnknownFields *)unknownFields
{
    if (_flags.read_unknownFields) return _unknownFields;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return _unknownFields;
    @synchronized(reader) {
        if (!_flags.read_unknownFields) {
            static const uint32_t tags[] = {TAG_UNKNOWN_FIELDS, 0};
            GEORPFeedbackLayoutConfigParametersReadSpecified(self, reader, tags);
        }
    }
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _flags.read_unknownFields = 1;
    _flags.wrote_unknownFields = 1;
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
    [_mapRegion clearUnknownFields:YES];
    [_coordinate clearUnknownFields:YES];
    [_mapsId clearUnknownFields:YES];
}

@end


