// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPFeedbackDetails.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEORPAddressFeedback.h>
#import <GeoServices/GEORPDirectionsFeedback.h>
#import <GeoServices/GEORPGroundViewFeedback.h>
#import <GeoServices/GEORPMerchantLookupFeedback.h>
#import <GeoServices/GEORPPoiFeedback.h>
#import <GeoServices/GEORPSearchFeedback.h>
#import <GeoServices/GEORPTileFeedback.h>
#import <GeoServices/GEORPTransitPoiFeedback.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPFeedbackDetails

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readPoiFeedback {
    if (_flags.read_poiFeedback) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_poiFeedback) {
            static const uint32_t tags[] = {1, 0};
            GEORPFeedbackDetailsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasPoiFeedback
{
    [self _readPoiFeedback];
    return _poiFeedback != nil;
}
- (GEORPPoiFeedback *)poiFeedback
{
    [self _readPoiFeedback];
    return _poiFeedback;
}
- (void)setPoiFeedback:(GEORPPoiFeedback *)v
{
    _flags.read_poiFeedback = 1;
    _flags.wrote_poiFeedback = 1;
    _poiFeedback = v;
}

- (void)_readTransitPoiFeedback {
    if (_flags.read_transitPoiFeedback) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_transitPoiFeedback) {
            static const uint32_t tags[] = {2, 0};
            GEORPFeedbackDetailsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasTransitPoiFeedback
{
    [self _readTransitPoiFeedback];
    return _transitPoiFeedback != nil;
}
- (GEORPTransitPoiFeedback *)transitPoiFeedback
{
    [self _readTransitPoiFeedback];
    return _transitPoiFeedback;
}
- (void)setTransitPoiFeedback:(GEORPTransitPoiFeedback *)v
{
    _flags.read_transitPoiFeedback = 1;
    _flags.wrote_transitPoiFeedback = 1;
    _transitPoiFeedback = v;
}

- (void)_readSearchFeedback {
    if (_flags.read_searchFeedback) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_searchFeedback) {
            static const uint32_t tags[] = {3, 0};
            GEORPFeedbackDetailsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasSearchFeedback
{
    [self _readSearchFeedback];
    return _searchFeedback != nil;
}
- (GEORPSearchFeedback *)searchFeedback
{
    [self _readSearchFeedback];
    return _searchFeedback;
}
- (void)setSearchFeedback:(GEORPSearchFeedback *)v
{
    _flags.read_searchFeedback = 1;
    _flags.wrote_searchFeedback = 1;
    _searchFeedback = v;
}

- (void)_readMerchantLookupFeedback {
    if (_flags.read_merchantLookupFeedback) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_merchantLookupFeedback) {
            static const uint32_t tags[] = {4, 0};
            GEORPFeedbackDetailsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasMerchantLookupFeedback
{
    [self _readMerchantLookupFeedback];
    return _merchantLookupFeedback != nil;
}
- (GEORPMerchantLookupFeedback *)merchantLookupFeedback
{
    [self _readMerchantLookupFeedback];
    return _merchantLookupFeedback;
}
- (void)setMerchantLookupFeedback:(GEORPMerchantLookupFeedback *)v
{
    _flags.read_merchantLookupFeedback = 1;
    _flags.wrote_merchantLookupFeedback = 1;
    _merchantLookupFeedback = v;
}

- (void)_readDirectionsFeedback {
    if (_flags.read_directionsFeedback) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_directionsFeedback) {
            static const uint32_t tags[] = {5, 0};
            GEORPFeedbackDetailsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasDirectionsFeedback
{
    [self _readDirectionsFeedback];
    return _directionsFeedback != nil;
}
- (GEORPDirectionsFeedback *)directionsFeedback
{
    [self _readDirectionsFeedback];
    return _directionsFeedback;
}
- (void)setDirectionsFeedback:(GEORPDirectionsFeedback *)v
{
    _flags.read_directionsFeedback = 1;
    _flags.wrote_directionsFeedback = 1;
    _directionsFeedback = v;
}

- (void)_readAddressPointFeedback {
    if (_flags.read_addressPointFeedback) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_addressPointFeedback) {
            static const uint32_t tags[] = {6, 0};
            GEORPFeedbackDetailsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasAddressPointFeedback
{
    [self _readAddressPointFeedback];
    return _addressPointFeedback != nil;
}
- (GEORPAddressFeedback *)addressPointFeedback
{
    [self _readAddressPointFeedback];
    return _addressPointFeedback;
}
- (void)setAddressPointFeedback:(GEORPAddressFeedback *)v
{
    _flags.read_addressPointFeedback = 1;
    _flags.wrote_addressPointFeedback = 1;
    _addressPointFeedback = v;
}

- (void)_readTileFeedback {
    if (_flags.read_tileFeedback) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_tileFeedback) {
            static const uint32_t tags[] = {7, 0};
            GEORPFeedbackDetailsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasTileFeedback
{
    [self _readTileFeedback];
    return _tileFeedback != nil;
}
- (GEORPTileFeedback *)tileFeedback
{
    [self _readTileFeedback];
    return _tileFeedback;
}
- (void)setTileFeedback:(GEORPTileFeedback *)v
{
    _flags.read_tileFeedback = 1;
    _flags.wrote_tileFeedback = 1;
    _tileFeedback = v;
}

#if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
- (void)_readGroundViewFeedback {
    if (_flags.read_groundViewFeedback) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_groundViewFeedback) {
            static const uint32_t tags[] = {8, 0};
            GEORPFeedbackDetailsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasGroundViewFeedback
{
    [self _readGroundViewFeedback];
    return _groundViewFeedback != nil;
}
- (GEORPGroundViewFeedback *)groundViewFeedback
{
    [self _readGroundViewFeedback];
    return _groundViewFeedback;
}
- (void)setGroundViewFeedback:(GEORPGroundViewFeedback *)v
{
    _flags.read_groundViewFeedback = 1;
    _flags.wrote_groundViewFeedback = 1;
    _groundViewFeedback = v;
}

#endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED

- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        GEORPPoiFeedback * value = self.poiFeedback;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"poi_feedback"];
        }
    }

    {
        GEORPTransitPoiFeedback * value = self.transitPoiFeedback;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"transit_poi_feedback"];
        }
    }

    {
        GEORPSearchFeedback * value = self.searchFeedback;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"search_feedback"];
        }
    }

    {
        GEORPMerchantLookupFeedback * value = self.merchantLookupFeedback;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"merchant_lookup_feedback"];
        }
    }

    {
        GEORPDirectionsFeedback * value = self.directionsFeedback;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"directions_feedback"];
        }
    }

    {
        GEORPAddressFeedback * value = self.addressPointFeedback;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"address_point_feedback"];
        }
    }

    {
        GEORPTileFeedback * value = self.tileFeedback;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"tile_feedback"];
        }
    }

    #if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
    {
        GEORPGroundViewFeedback * value = self.groundViewFeedback;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"ground_view_feedback"];
        }
    }

    #endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED

    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPFeedbackDetailsReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPFeedbackDetailsReadAllFrom(__unsafe_unretained GEORPFeedbackDetails *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPFeedbackDetailsReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPFeedbackDetailsReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPFeedbackDetailsReadFrom(__unsafe_unretained GEORPFeedbackDetails *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPFeedbackDetailsReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPFeedbackDetailsReadSpecified(__unsafe_unretained GEORPFeedbackDetails *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_poiFeedback
        + self->_flags.read_transitPoiFeedback
        + self->_flags.read_searchFeedback
        + self->_flags.read_merchantLookupFeedback
        + self->_flags.read_directionsFeedback
        + self->_flags.read_addressPointFeedback
        + self->_flags.read_tileFeedback
#if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
        + self->_flags.read_groundViewFeedback
#endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
        + self->_flags.read_unknownFields
        ;
    #define requiredLazyFieldCount 6 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL shouldParseUnknown = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            case TAG_UNKNOWN_FIELDS:
                shouldParseUnknown = YES;
                ++readLazyCount;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
        shouldParseUnknown = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !(readAll || shouldParseUnknown);
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* poiFeedback */:
            {
                if (!shouldParseTag || self->_flags.read_poiFeedback) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_poiFeedback) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPPoiFeedback *new_poiFeedback = [[GEORPPoiFeedback alloc] init];
                self->_poiFeedback = new_poiFeedback;
                PBDataReaderMark mark_poiFeedback;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_poiFeedback);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPPoiFeedbackReadAllFrom(new_poiFeedback, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_poiFeedback);

                --tagsRemaining;
            }
            break;
            case 2 /* transitPoiFeedback */:
            {
                if (!shouldParseTag || self->_flags.read_transitPoiFeedback) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_transitPoiFeedback) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPTransitPoiFeedback *new_transitPoiFeedback = [[GEORPTransitPoiFeedback alloc] init];
                self->_transitPoiFeedback = new_transitPoiFeedback;
                PBDataReaderMark mark_transitPoiFeedback;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_transitPoiFeedback);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPTransitPoiFeedbackReadAllFrom(new_transitPoiFeedback, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_transitPoiFeedback);

                --tagsRemaining;
            }
            break;
            case 3 /* searchFeedback */:
            {
                if (!shouldParseTag || self->_flags.read_searchFeedback) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_searchFeedback) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPSearchFeedback *new_searchFeedback = [[GEORPSearchFeedback alloc] init];
                self->_searchFeedback = new_searchFeedback;
                PBDataReaderMark mark_searchFeedback;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_searchFeedback);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPSearchFeedbackReadAllFrom(new_searchFeedback, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_searchFeedback);

                --tagsRemaining;
            }
            break;
            case 4 /* merchantLookupFeedback */:
            {
                if (!shouldParseTag || self->_flags.read_merchantLookupFeedback) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_merchantLookupFeedback) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPMerchantLookupFeedback *new_merchantLookupFeedback = [[GEORPMerchantLookupFeedback alloc] init];
                self->_merchantLookupFeedback = new_merchantLookupFeedback;
                PBDataReaderMark mark_merchantLookupFeedback;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_merchantLookupFeedback);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPMerchantLookupFeedbackReadAllFrom(new_merchantLookupFeedback, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_merchantLookupFeedback);

                --tagsRemaining;
            }
            break;
            case 5 /* directionsFeedback */:
            {
                if (!shouldParseTag || self->_flags.read_directionsFeedback) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_directionsFeedback) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPDirectionsFeedback *new_directionsFeedback = [[GEORPDirectionsFeedback alloc] init];
                self->_directionsFeedback = new_directionsFeedback;
                PBDataReaderMark mark_directionsFeedback;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_directionsFeedback);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPDirectionsFeedbackReadAllFrom(new_directionsFeedback, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_directionsFeedback);

                --tagsRemaining;
            }
            break;
            case 6 /* addressPointFeedback */:
            {
                if (!shouldParseTag || self->_flags.read_addressPointFeedback) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_addressPointFeedback) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPAddressFeedback *new_addressPointFeedback = [[GEORPAddressFeedback alloc] init];
                self->_addressPointFeedback = new_addressPointFeedback;
                PBDataReaderMark mark_addressPointFeedback;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_addressPointFeedback);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPAddressFeedbackReadAllFrom(new_addressPointFeedback, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_addressPointFeedback);

                --tagsRemaining;
            }
            break;
            case 7 /* tileFeedback */:
            {
                if (!shouldParseTag || self->_flags.read_tileFeedback) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_tileFeedback) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPTileFeedback *new_tileFeedback = [[GEORPTileFeedback alloc] init];
                self->_tileFeedback = new_tileFeedback;
                PBDataReaderMark mark_tileFeedback;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_tileFeedback);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPTileFeedbackReadAllFrom(new_tileFeedback, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_tileFeedback);

                --tagsRemaining;
            }
            break;
#if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
            case 8 /* groundViewFeedback */:
            {
                if (!shouldParseTag || self->_flags.read_groundViewFeedback) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_groundViewFeedback) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPGroundViewFeedback *new_groundViewFeedback = [[GEORPGroundViewFeedback alloc] init];
                self->_groundViewFeedback = new_groundViewFeedback;
                PBDataReaderMark mark_groundViewFeedback;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_groundViewFeedback);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPGroundViewFeedbackReadAllFrom(new_groundViewFeedback, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_groundViewFeedback);

                --tagsRemaining;
            }
            break;
#endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
            default:
                if (!shouldParseUnknown || self->_flags.read_unknownFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }

    if (shouldParseUnknown) {
        self->_flags.read_unknownFields = YES;
    }

    if (readAll) {
        if (recursively) {
            [self->_poiFeedback readAll:YES];
            [self->_transitPoiFeedback readAll:YES];
            [self->_searchFeedback readAll:YES];
            [self->_merchantLookupFeedback readAll:YES];
            [self->_directionsFeedback readAll:YES];
            [self->_addressPointFeedback readAll:YES];
            [self->_tileFeedback readAll:YES];
#if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
            [self->_groundViewFeedback readAll:YES];
#endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
        }
        self->_flags.read_poiFeedback = YES;
        self->_flags.read_transitPoiFeedback = YES;
        self->_flags.read_searchFeedback = YES;
        self->_flags.read_merchantLookupFeedback = YES;
        self->_flags.read_directionsFeedback = YES;
        self->_flags.read_addressPointFeedback = YES;
        self->_flags.read_tileFeedback = YES;
#if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
        self->_flags.read_groundViewFeedback = YES;
#endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* poiFeedback */:
                    self->_flags.read_poiFeedback = YES;
                    break;
                case 2 /* transitPoiFeedback */:
                    self->_flags.read_transitPoiFeedback = YES;
                    break;
                case 3 /* searchFeedback */:
                    self->_flags.read_searchFeedback = YES;
                    break;
                case 4 /* merchantLookupFeedback */:
                    self->_flags.read_merchantLookupFeedback = YES;
                    break;
                case 5 /* directionsFeedback */:
                    self->_flags.read_directionsFeedback = YES;
                    break;
                case 6 /* addressPointFeedback */:
                    self->_flags.read_addressPointFeedback = YES;
                    break;
                case 7 /* tileFeedback */:
                    self->_flags.read_tileFeedback = YES;
                    break;
#if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
                case 8 /* groundViewFeedback */:
                    self->_flags.read_groundViewFeedback = YES;
                    break;
#endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPFeedbackDetailsIsValid(reader);
}

BOOL GEORPFeedbackDetailsIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* poiFeedback */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_poiFeedback;
                    if (!PBReaderPlaceMark(reader, &mark_poiFeedback))
                        returnValue(NO);
                    if (!GEORPPoiFeedbackIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_poiFeedback);
                }
                break;
            case 2 /* transitPoiFeedback */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_transitPoiFeedback;
                    if (!PBReaderPlaceMark(reader, &mark_transitPoiFeedback))
                        returnValue(NO);
                    if (!GEORPTransitPoiFeedbackIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_transitPoiFeedback);
                }
                break;
            case 3 /* searchFeedback */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_searchFeedback;
                    if (!PBReaderPlaceMark(reader, &mark_searchFeedback))
                        returnValue(NO);
                    if (!GEORPSearchFeedbackIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_searchFeedback);
                }
                break;
            case 4 /* merchantLookupFeedback */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_merchantLookupFeedback;
                    if (!PBReaderPlaceMark(reader, &mark_merchantLookupFeedback))
                        returnValue(NO);
                    if (!GEORPMerchantLookupFeedbackIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_merchantLookupFeedback);
                }
                break;
            case 5 /* directionsFeedback */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_directionsFeedback;
                    if (!PBReaderPlaceMark(reader, &mark_directionsFeedback))
                        returnValue(NO);
                    if (!GEORPDirectionsFeedbackIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_directionsFeedback);
                }
                break;
            case 6 /* addressPointFeedback */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_addressPointFeedback;
                    if (!PBReaderPlaceMark(reader, &mark_addressPointFeedback))
                        returnValue(NO);
                    if (!GEORPAddressFeedbackIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_addressPointFeedback);
                }
                break;
            case 7 /* tileFeedback */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_tileFeedback;
                    if (!PBReaderPlaceMark(reader, &mark_tileFeedback))
                        returnValue(NO);
                    if (!GEORPTileFeedbackIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_tileFeedback);
                }
                break;
#if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
            case 8 /* groundViewFeedback */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_groundViewFeedback;
                    if (!PBReaderPlaceMark(reader, &mark_groundViewFeedback))
                        returnValue(NO);
                    if (!GEORPGroundViewFeedbackIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_groundViewFeedback);
                }
                break;
#endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPFeedbackDetailsReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPFeedbackDetailsIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* poiFeedback */
    {
        if (self->_poiFeedback != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_poiFeedback, 1);
        }
    }

    /* transitPoiFeedback */
    {
        if (self->_transitPoiFeedback != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_transitPoiFeedback, 2);
        }
    }

    /* searchFeedback */
    {
        if (self->_searchFeedback != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_searchFeedback, 3);
        }
    }

    /* merchantLookupFeedback */
    {
        if (self->_merchantLookupFeedback != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_merchantLookupFeedback, 4);
        }
    }

    /* directionsFeedback */
    {
        if (self->_directionsFeedback != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_directionsFeedback, 5);
        }
    }

    /* addressPointFeedback */
    {
        if (self->_addressPointFeedback != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_addressPointFeedback, 6);
        }
    }

    /* tileFeedback */
    {
        if (self->_tileFeedback != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_tileFeedback, 7);
        }
    }
#if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED

    /* groundViewFeedback */
    {
        if (self->_groundViewFeedback != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_groundViewFeedback, 8);
        }
    }
#endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}

BOOL GEORPFeedbackDetailsIsDirty(__unsafe_unretained GEORPFeedbackDetails *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_poiFeedback
        || (self->_flags.read_poiFeedback && GEORPPoiFeedbackIsDirty(self->_poiFeedback))
        || self->_flags.wrote_transitPoiFeedback
        || (self->_flags.read_transitPoiFeedback && GEORPTransitPoiFeedbackIsDirty(self->_transitPoiFeedback))
        || self->_flags.wrote_searchFeedback
        || (self->_flags.read_searchFeedback && GEORPSearchFeedbackIsDirty(self->_searchFeedback))
        || self->_flags.wrote_merchantLookupFeedback
        || (self->_flags.read_merchantLookupFeedback && GEORPMerchantLookupFeedbackIsDirty(self->_merchantLookupFeedback))
        || self->_flags.wrote_directionsFeedback
        || (self->_flags.read_directionsFeedback && GEORPDirectionsFeedbackIsDirty(self->_directionsFeedback))
        || self->_flags.wrote_addressPointFeedback
        || (self->_flags.read_addressPointFeedback && GEORPAddressFeedbackIsDirty(self->_addressPointFeedback))
        || self->_flags.wrote_tileFeedback
        || (self->_flags.read_tileFeedback && GEORPTileFeedbackIsDirty(self->_tileFeedback))
    #if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
        || self->_flags.wrote_groundViewFeedback
        || (self->_flags.read_groundViewFeedback && GEORPGroundViewFeedbackIsDirty(self->_groundViewFeedback))
    #endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
        || self->_flags.wrote_unknownFields
    ;


    return dirty;
}


- (void)copyTo:(GEORPFeedbackDetails *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_poiFeedback)
    {
        other.poiFeedback = _poiFeedback;
    }
    if (_transitPoiFeedback)
    {
        other.transitPoiFeedback = _transitPoiFeedback;
    }
    if (_searchFeedback)
    {
        other.searchFeedback = _searchFeedback;
    }
    if (_merchantLookupFeedback)
    {
        other.merchantLookupFeedback = _merchantLookupFeedback;
    }
    if (_directionsFeedback)
    {
        other.directionsFeedback = _directionsFeedback;
    }
    if (_addressPointFeedback)
    {
        other.addressPointFeedback = _addressPointFeedback;
    }
    if (_tileFeedback)
    {
        other.tileFeedback = _tileFeedback;
    }
#if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
    if (_groundViewFeedback)
    {
        other.groundViewFeedback = _groundViewFeedback;
    }
#endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPFeedbackDetails *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_poiFeedback
                || _flags.wrote_transitPoiFeedback
                || _flags.wrote_searchFeedback
                || _flags.wrote_merchantLookupFeedback
                || _flags.wrote_directionsFeedback
                || _flags.wrote_addressPointFeedback
                || _flags.wrote_tileFeedback
            #if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
                || _flags.wrote_groundViewFeedback
            #endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
                || _flags.wrote_unknownFields
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPFeedbackDetailsReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_poiFeedback = [_poiFeedback copyWithZone:zone];
    copy->_transitPoiFeedback = [_transitPoiFeedback copyWithZone:zone];
    copy->_searchFeedback = [_searchFeedback copyWithZone:zone];
    copy->_merchantLookupFeedback = [_merchantLookupFeedback copyWithZone:zone];
    copy->_directionsFeedback = [_directionsFeedback copyWithZone:zone];
    copy->_addressPointFeedback = [_addressPointFeedback copyWithZone:zone];
    copy->_tileFeedback = [_tileFeedback copyWithZone:zone];
    #if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
    copy->_groundViewFeedback = [_groundViewFeedback copyWithZone:zone];
    #endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPFeedbackDetails *other = (GEORPFeedbackDetails *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_poiFeedback && !other->_poiFeedback) || [self->_poiFeedback isEqual:other->_poiFeedback])
    &&
    ((!self->_transitPoiFeedback && !other->_transitPoiFeedback) || [self->_transitPoiFeedback isEqual:other->_transitPoiFeedback])
    &&
    ((!self->_searchFeedback && !other->_searchFeedback) || [self->_searchFeedback isEqual:other->_searchFeedback])
    &&
    ((!self->_merchantLookupFeedback && !other->_merchantLookupFeedback) || [self->_merchantLookupFeedback isEqual:other->_merchantLookupFeedback])
    &&
    ((!self->_directionsFeedback && !other->_directionsFeedback) || [self->_directionsFeedback isEqual:other->_directionsFeedback])
    &&
    ((!self->_addressPointFeedback && !other->_addressPointFeedback) || [self->_addressPointFeedback isEqual:other->_addressPointFeedback])
    &&
    ((!self->_tileFeedback && !other->_tileFeedback) || [self->_tileFeedback isEqual:other->_tileFeedback])
#if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
    &&
    ((!self->_groundViewFeedback && !other->_groundViewFeedback) || [self->_groundViewFeedback isEqual:other->_groundViewFeedback])
#endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_poiFeedback hash]
    ^
    [self->_transitPoiFeedback hash]
    ^
    [self->_searchFeedback hash]
    ^
    [self->_merchantLookupFeedback hash]
    ^
    [self->_directionsFeedback hash]
    ^
    [self->_addressPointFeedback hash]
    ^
    [self->_tileFeedback hash]
#if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
    ^
    [self->_groundViewFeedback hash]
#endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
    ;
}

- (void)mergeFrom:(GEORPFeedbackDetails *)other
{
    [other readAll:NO];
    if (self->_poiFeedback && other->_poiFeedback)
    {
        [self->_poiFeedback mergeFrom:other->_poiFeedback];
    }
    else if (!self->_poiFeedback && other->_poiFeedback)
    {
        [self setPoiFeedback:other->_poiFeedback];
    }
    if (self->_transitPoiFeedback && other->_transitPoiFeedback)
    {
        [self->_transitPoiFeedback mergeFrom:other->_transitPoiFeedback];
    }
    else if (!self->_transitPoiFeedback && other->_transitPoiFeedback)
    {
        [self setTransitPoiFeedback:other->_transitPoiFeedback];
    }
    if (self->_searchFeedback && other->_searchFeedback)
    {
        [self->_searchFeedback mergeFrom:other->_searchFeedback];
    }
    else if (!self->_searchFeedback && other->_searchFeedback)
    {
        [self setSearchFeedback:other->_searchFeedback];
    }
    if (self->_merchantLookupFeedback && other->_merchantLookupFeedback)
    {
        [self->_merchantLookupFeedback mergeFrom:other->_merchantLookupFeedback];
    }
    else if (!self->_merchantLookupFeedback && other->_merchantLookupFeedback)
    {
        [self setMerchantLookupFeedback:other->_merchantLookupFeedback];
    }
    if (self->_directionsFeedback && other->_directionsFeedback)
    {
        [self->_directionsFeedback mergeFrom:other->_directionsFeedback];
    }
    else if (!self->_directionsFeedback && other->_directionsFeedback)
    {
        [self setDirectionsFeedback:other->_directionsFeedback];
    }
    if (self->_addressPointFeedback && other->_addressPointFeedback)
    {
        [self->_addressPointFeedback mergeFrom:other->_addressPointFeedback];
    }
    else if (!self->_addressPointFeedback && other->_addressPointFeedback)
    {
        [self setAddressPointFeedback:other->_addressPointFeedback];
    }
    if (self->_tileFeedback && other->_tileFeedback)
    {
        [self->_tileFeedback mergeFrom:other->_tileFeedback];
    }
    else if (!self->_tileFeedback && other->_tileFeedback)
    {
        [self setTileFeedback:other->_tileFeedback];
    }
    #if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
    if (self->_groundViewFeedback && other->_groundViewFeedback)
    {
        [self->_groundViewFeedback mergeFrom:other->_groundViewFeedback];
    }
    else if (!self->_groundViewFeedback && other->_groundViewFeedback)
    {
        [self setGroundViewFeedback:other->_groundViewFeedback];
    }
    #endif
}

- (PBUnknownFields *)unknownFields
{
    if (_flags.read_unknownFields) return _unknownFields;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return _unknownFields;
    @synchronized(reader) {
        if (!_flags.read_unknownFields) {
            static const uint32_t tags[] = {TAG_UNKNOWN_FIELDS, 0};
            GEORPFeedbackDetailsReadSpecified(self, reader, tags);
        }
    }
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _flags.read_unknownFields = 1;
    _flags.wrote_unknownFields = 1;
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
    [_poiFeedback clearUnknownFields:YES];
    [_transitPoiFeedback clearUnknownFields:YES];
    [_searchFeedback clearUnknownFields:YES];
    [_merchantLookupFeedback clearUnknownFields:YES];
    [_directionsFeedback clearUnknownFields:YES];
    [_addressPointFeedback clearUnknownFields:YES];
    [_tileFeedback clearUnknownFields:YES];
#if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
    [_groundViewFeedback clearUnknownFields:YES];
#endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
}

@end


