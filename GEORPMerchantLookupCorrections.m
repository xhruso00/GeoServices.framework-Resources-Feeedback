// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPMerchantLookupCorrections.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPMerchantLookupCorrections


- (BOOL)isCategoryIncorrect
{
    return _isCategoryIncorrect;
}
- (void)setIsCategoryIncorrect:(BOOL)v
{
    _flags.has_isCategoryIncorrect = 1;
    _isCategoryIncorrect = v;
}
- (void)setHasIsCategoryIncorrect:(BOOL)f
{
    _flags.has_isCategoryIncorrect = f ? 1 : 0;
}
- (BOOL)hasIsCategoryIncorrect
{
    return (BOOL)_flags.has_isCategoryIncorrect;
}

- (BOOL)isMerchantIncorrect
{
    return _isMerchantIncorrect;
}
- (void)setIsMerchantIncorrect:(BOOL)v
{
    _flags.has_isMerchantIncorrect = 1;
    _isMerchantIncorrect = v;
}
- (void)setHasIsMerchantIncorrect:(BOOL)f
{
    _flags.has_isMerchantIncorrect = f ? 1 : 0;
}
- (BOOL)hasIsMerchantIncorrect
{
    return (BOOL)_flags.has_isMerchantIncorrect;
}

- (BOOL)isOtherIssue
{
    return _isOtherIssue;
}
- (void)setIsOtherIssue:(BOOL)v
{
    _flags.has_isOtherIssue = 1;
    _isOtherIssue = v;
}
- (void)setHasIsOtherIssue:(BOOL)f
{
    _flags.has_isOtherIssue = f ? 1 : 0;
}
- (BOOL)hasIsOtherIssue
{
    return (BOOL)_flags.has_isOtherIssue;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_isCategoryIncorrect)
    {
        [dict setObject:@(self->_isCategoryIncorrect) forKey:@"is_category_incorrect"];
    }

    if (self->_flags.has_isMerchantIncorrect)
    {
        [dict setObject:@(self->_isMerchantIncorrect) forKey:@"is_merchant_incorrect"];
    }

    if (self->_flags.has_isOtherIssue)
    {
        [dict setObject:@(self->_isOtherIssue) forKey:@"is_other_issue"];
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively { /* noop */ }
BOOL GEORPMerchantLookupCorrectionsReadAllFrom(__unsafe_unretained GEORPMerchantLookupCorrections *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};

    @synchronized(reader) {
        BOOL result = GEORPMerchantLookupCorrectionsReadSpecified(self, reader, recursively ? recursiveTag : nil);
        return result;
    }
}
BOOL GEORPMerchantLookupCorrectionsReadFrom(__unsafe_unretained GEORPMerchantLookupCorrections *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPMerchantLookupCorrectionsReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPMerchantLookupCorrectionsReadSpecified(__unsafe_unretained GEORPMerchantLookupCorrections *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    #define shouldParseUnknown YES
    __attribute__((unused)) BOOL const recursively = (tags != nil && tags[0] == TAG_PARSE_ALL_RECURSIVE);
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
    #define shouldParseTag YES

        switch (tag) {

            case 1 /* isCategoryIncorrect */:
            {
                self->_flags.has_isCategoryIncorrect = YES;
                self->_isCategoryIncorrect = PBReaderReadBOOL(reader);

            }
            break;
            case 2 /* isMerchantIncorrect */:
            {
                self->_flags.has_isMerchantIncorrect = YES;
                self->_isMerchantIncorrect = PBReaderReadBOOL(reader);

            }
            break;
            case 3 /* isOtherIssue */:
            {
                self->_flags.has_isOtherIssue = YES;
                self->_isOtherIssue = PBReaderReadBOOL(reader);

            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }



    #undef shouldParseTag
    #undef shouldParseUnknown
    #undef recursively
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPMerchantLookupCorrectionsIsValid(reader);
}

BOOL GEORPMerchantLookupCorrectionsIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* isCategoryIncorrect */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 2 /* isMerchantIncorrect */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 3 /* isOtherIssue */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPMerchantLookupCorrectionsReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{

    /* isCategoryIncorrect */
    {
        if (self->_flags.has_isCategoryIncorrect)
        {
            PBDataWriterWriteBOOLField(writer, self->_isCategoryIncorrect, 1);
        }
    }

    /* isMerchantIncorrect */
    {
        if (self->_flags.has_isMerchantIncorrect)
        {
            PBDataWriterWriteBOOLField(writer, self->_isMerchantIncorrect, 2);
        }
    }

    /* isOtherIssue */
    {
        if (self->_flags.has_isOtherIssue)
        {
            PBDataWriterWriteBOOLField(writer, self->_isOtherIssue, 3);
        }
    }
}



- (void)copyTo:(GEORPMerchantLookupCorrections *)other
{
    [self readAll:NO];
    if (self->_flags.has_isCategoryIncorrect)
    {
        other->_isCategoryIncorrect = _isCategoryIncorrect;
        other->_flags.has_isCategoryIncorrect = YES;
    }
    if (self->_flags.has_isMerchantIncorrect)
    {
        other->_isMerchantIncorrect = _isMerchantIncorrect;
        other->_flags.has_isMerchantIncorrect = YES;
    }
    if (self->_flags.has_isOtherIssue)
    {
        other->_isOtherIssue = _isOtherIssue;
        other->_flags.has_isOtherIssue = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPMerchantLookupCorrections *copy = [[[self class] allocWithZone:zone] init];
    if (self->_flags.has_isCategoryIncorrect)
    {
        copy->_isCategoryIncorrect = _isCategoryIncorrect;
        copy->_flags.has_isCategoryIncorrect = YES;
    }
    if (self->_flags.has_isMerchantIncorrect)
    {
        copy->_isMerchantIncorrect = _isMerchantIncorrect;
        copy->_flags.has_isMerchantIncorrect = YES;
    }
    if (self->_flags.has_isOtherIssue)
    {
        copy->_isOtherIssue = _isOtherIssue;
        copy->_flags.has_isOtherIssue = YES;
    }
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPMerchantLookupCorrections *other = (GEORPMerchantLookupCorrections *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_isCategoryIncorrect && other->_flags.has_isCategoryIncorrect && ((self->_isCategoryIncorrect && other->_isCategoryIncorrect) || (!self->_isCategoryIncorrect && !other->_isCategoryIncorrect))) || (!self->_flags.has_isCategoryIncorrect && !other->_flags.has_isCategoryIncorrect))
    &&
    ((self->_flags.has_isMerchantIncorrect && other->_flags.has_isMerchantIncorrect && ((self->_isMerchantIncorrect && other->_isMerchantIncorrect) || (!self->_isMerchantIncorrect && !other->_isMerchantIncorrect))) || (!self->_flags.has_isMerchantIncorrect && !other->_flags.has_isMerchantIncorrect))
    &&
    ((self->_flags.has_isOtherIssue && other->_flags.has_isOtherIssue && ((self->_isOtherIssue && other->_isOtherIssue) || (!self->_isOtherIssue && !other->_isOtherIssue))) || (!self->_flags.has_isOtherIssue && !other->_flags.has_isOtherIssue))
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_isCategoryIncorrect ? PBHashInt((NSUInteger)self->_isCategoryIncorrect) : 0)
    ^
    (self->_flags.has_isMerchantIncorrect ? PBHashInt((NSUInteger)self->_isMerchantIncorrect) : 0)
    ^
    (self->_flags.has_isOtherIssue ? PBHashInt((NSUInteger)self->_isOtherIssue) : 0)
    ;
}

- (void)mergeFrom:(GEORPMerchantLookupCorrections *)other
{
    [other readAll:NO];
    if (other->_flags.has_isCategoryIncorrect)
    {
        self->_isCategoryIncorrect = other->_isCategoryIncorrect;
        self->_flags.has_isCategoryIncorrect = 1;
    }
    if (other->_flags.has_isMerchantIncorrect)
    {
        self->_isMerchantIncorrect = other->_isMerchantIncorrect;
        self->_flags.has_isMerchantIncorrect = 1;
    }
    if (other->_flags.has_isOtherIssue)
    {
        self->_isOtherIssue = other->_isOtherIssue;
        self->_flags.has_isOtherIssue = 1;
    }
}


@end


