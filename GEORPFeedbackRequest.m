// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPFeedbackRequest.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEOABSecondPartyPlaceRequestClientMetaData.h>
#import <GeoServices/GEOPDAnalyticMetadata.h>
#import <GeoServices/GEOPDClientMetadata.h>
#import <GeoServices/GEORPClientCapabilities.h>
#import <GeoServices/GEORPDebugSettings.h>
#import <GeoServices/GEORPFeedbackRequestParameters.h>
#import <GeoServices/GEORPFeedbackUserInfo.h>
#import <GeoServices/GEORPFeedbackResponse.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPFeedbackRequest

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (GEORPFeedbackRequestType)feedbackRequestType
{
    return _flags.has_feedbackRequestType ? _feedbackRequestType : GEORPFeedbackRequestType_FEEDBACK_REQUEST_TYPE_UNKNOWN;
}
- (void)setFeedbackRequestType:(GEORPFeedbackRequestType)v
{
    _flags.wrote_feedbackRequestType = 1;
    _flags.has_feedbackRequestType = 1;
    _feedbackRequestType = v;
}
- (void)setHasFeedbackRequestType:(BOOL)f
{
    _flags.wrote_feedbackRequestType = 1;
    _flags.has_feedbackRequestType = f ? 1 : 0;
}
- (BOOL)hasFeedbackRequestType
{
    return (BOOL)_flags.has_feedbackRequestType;
}
- (NSString *)feedbackRequestTypeAsString:(GEORPFeedbackRequestType)value
{
    return GEORPFeedbackRequestTypeAsString(value);
}
- (GEORPFeedbackRequestType)StringAsFeedbackRequestType:(NSString *)str
{
    return StringAsGEORPFeedbackRequestType(str);
}

- (void)_readFeedbackRequestParameters {
    if (_flags.read_feedbackRequestParameters) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_feedbackRequestParameters) {
            static const uint32_t tags[] = {2, 0};
            GEORPFeedbackRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasFeedbackRequestParameters
{
    [self _readFeedbackRequestParameters];
    return _feedbackRequestParameters != nil;
}
- (GEORPFeedbackRequestParameters *)feedbackRequestParameters
{
    [self _readFeedbackRequestParameters];
    return _feedbackRequestParameters;
}
- (void)setFeedbackRequestParameters:(GEORPFeedbackRequestParameters *)v
{
    _flags.read_feedbackRequestParameters = 1;
    _flags.wrote_feedbackRequestParameters = 1;
    _feedbackRequestParameters = v;
}

- (void)_readUserInfo {
    if (_flags.read_userInfo) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_userInfo) {
            static const uint32_t tags[] = {3, 0};
            GEORPFeedbackRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasUserInfo
{
    [self _readUserInfo];
    return _userInfo != nil;
}
- (GEORPFeedbackUserInfo *)userInfo
{
    [self _readUserInfo];
    return _userInfo;
}
- (void)setUserInfo:(GEORPFeedbackUserInfo *)v
{
    _flags.read_userInfo = 1;
    _flags.wrote_userInfo = 1;
    _userInfo = v;
}

- (void)_readAnalyticMetadata {
    if (_flags.read_analyticMetadata) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_analyticMetadata) {
            static const uint32_t tags[] = {4, 0};
            GEORPFeedbackRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasAnalyticMetadata
{
    [self _readAnalyticMetadata];
    return _analyticMetadata != nil;
}
- (GEOPDAnalyticMetadata *)analyticMetadata
{
    [self _readAnalyticMetadata];
    return _analyticMetadata;
}
- (void)setAnalyticMetadata:(GEOPDAnalyticMetadata *)v
{
    _flags.read_analyticMetadata = 1;
    _flags.wrote_analyticMetadata = 1;
    _analyticMetadata = v;
}

- (void)_readClientMetadata {
    if (_flags.read_clientMetadata) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_clientMetadata) {
            static const uint32_t tags[] = {5, 0};
            GEORPFeedbackRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasClientMetadata
{
    [self _readClientMetadata];
    return _clientMetadata != nil;
}
- (GEOPDClientMetadata *)clientMetadata
{
    [self _readClientMetadata];
    return _clientMetadata;
}
- (void)setClientMetadata:(GEOPDClientMetadata *)v
{
    _flags.read_clientMetadata = 1;
    _flags.wrote_clientMetadata = 1;
    _clientMetadata = v;
}

- (void)_readClientCapabilities {
    if (_flags.read_clientCapabilities) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_clientCapabilities) {
            static const uint32_t tags[] = {6, 0};
            GEORPFeedbackRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasClientCapabilities
{
    [self _readClientCapabilities];
    return _clientCapabilities != nil;
}
- (GEORPClientCapabilities *)clientCapabilities
{
    [self _readClientCapabilities];
    return _clientCapabilities;
}
- (void)setClientCapabilities:(GEORPClientCapabilities *)v
{
    _flags.read_clientCapabilities = 1;
    _flags.wrote_clientCapabilities = 1;
    _clientCapabilities = v;
}

- (void)_readDisplayLanguages {
    if (_flags.read_displayLanguages) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_displayLanguages) {
            static const uint32_t tags[] = {7, 0};
            GEORPFeedbackRequestReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<NSString *> *)displayLanguages
{
    [self _readDisplayLanguages];
    return _displayLanguages;
}
- (void)setDisplayLanguages:(NSMutableArray<NSString *> *)v
{
    _flags.read_displayLanguages = 1;
    _flags.wrote_displayLanguages = 1;
    _displayLanguages = v;
}
- (void)clearDisplayLanguages
{
    _flags.read_displayLanguages = 1;
    _flags.wrote_displayLanguages = 1;
    [_displayLanguages removeAllObjects];
}
- (void)addDisplayLanguage:(NSString *)i
{
    [self _readDisplayLanguages];
    [self _addNoFlagsDisplayLanguage:i];
    _flags.read_displayLanguages = 1;
    _flags.wrote_displayLanguages = 1;
}
- (void)_addNoFlagsDisplayLanguage:(NSString *)i
{
    if (!_displayLanguages)
    {
        _displayLanguages = [[NSMutableArray alloc] init];
    }
    [_displayLanguages addObject:i];
}
- (NSUInteger)displayLanguagesCount
{
    [self _readDisplayLanguages];
    return [_displayLanguages count];
}
- (NSString *)displayLanguageAtIndex:(NSUInteger)idx
{
    [self _readDisplayLanguages];
    return [_displayLanguages objectAtIndex:idx];
}
+ (Class)displayLanguageType
{
    return [NSString class];
}

- (void)_readAbClientMetadata {
    if (_flags.read_abClientMetadata) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_abClientMetadata) {
            static const uint32_t tags[] = {8, 0};
            GEORPFeedbackRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasAbClientMetadata
{
    [self _readAbClientMetadata];
    return _abClientMetadata != nil;
}
- (GEOABSecondPartyPlaceRequestClientMetaData *)abClientMetadata
{
    [self _readAbClientMetadata];
    return _abClientMetadata;
}
- (void)setAbClientMetadata:(GEOABSecondPartyPlaceRequestClientMetaData *)v
{
    _flags.read_abClientMetadata = 1;
    _flags.wrote_abClientMetadata = 1;
    _abClientMetadata = v;
}

#if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
- (void)_readDebugSettings {
    if (_flags.read_debugSettings) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_debugSettings) {
            static const uint32_t tags[] = {201, 0};
            GEORPFeedbackRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasDebugSettings
{
    [self _readDebugSettings];
    return _debugSettings != nil;
}
- (GEORPDebugSettings *)debugSettings
{
    [self _readDebugSettings];
    return _debugSettings;
}
- (void)setDebugSettings:(GEORPDebugSettings *)v
{
    _flags.read_debugSettings = 1;
    _flags.wrote_debugSettings = 1;
    _debugSettings = v;
}

#endif // defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY

- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_feedbackRequestType)
    {
        [dict setObject:GEORPFeedbackRequestTypeAsString(self->_feedbackRequestType) forKey:@"feedback_request_type"];
    }

    {
        GEORPFeedbackRequestParameters * value = self.feedbackRequestParameters;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"feedback_request_parameters"];
        }
    }

    {
        GEORPFeedbackUserInfo * value = self.userInfo;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"user_info"];
        }
    }

    {
        GEOPDAnalyticMetadata * value = self.analyticMetadata;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"analytic_metadata"];
        }
    }

    {
        GEOPDClientMetadata * value = self.clientMetadata;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"client_metadata"];
        }
    }

    {
        GEORPClientCapabilities * value = self.clientCapabilities;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"client_capabilities"];
        }
    }

    if (self->_displayLanguages) {
        [dict setObject:self.displayLanguages forKey:@"display_language"];
    }

    {
        GEOABSecondPartyPlaceRequestClientMetaData * value = self.abClientMetadata;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"ab_client_metadata"];
        }
    }

    #if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
    {
        GEORPDebugSettings * value = self.debugSettings;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"debug_settings"];
        }
    }

    #endif // defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY

    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPFeedbackRequestReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPFeedbackRequestReadAllFrom(__unsafe_unretained GEORPFeedbackRequest *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPFeedbackRequestReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPFeedbackRequestReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPFeedbackRequestReadFrom(__unsafe_unretained GEORPFeedbackRequest *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPFeedbackRequestReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPFeedbackRequestReadSpecified(__unsafe_unretained GEORPFeedbackRequest *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_feedbackRequestParameters
        + self->_flags.read_userInfo
        + self->_flags.read_analyticMetadata
        + self->_flags.read_clientMetadata
        + self->_flags.read_clientCapabilities
        + self->_flags.read_displayLanguages
        + self->_flags.read_abClientMetadata
#if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
        + self->_flags.read_debugSettings
#endif // defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
        + self->_flags.read_unknownFields
        ;
    #define requiredLazyFieldCount 6 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL shouldParseUnknown = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            case TAG_UNKNOWN_FIELDS:
                shouldParseUnknown = YES;
                ++readLazyCount;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
        shouldParseUnknown = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !(readAll || shouldParseUnknown);
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* feedbackRequestType */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_feedbackRequestType = YES;
                self->_feedbackRequestType = PBReaderReadInt32(reader);

            }
            break;
            case 2 /* feedbackRequestParameters */:
            {
                if (!shouldParseTag || self->_flags.read_feedbackRequestParameters) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_feedbackRequestParameters) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPFeedbackRequestParameters *new_feedbackRequestParameters = [[GEORPFeedbackRequestParameters alloc] init];
                self->_feedbackRequestParameters = new_feedbackRequestParameters;
                PBDataReaderMark mark_feedbackRequestParameters;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_feedbackRequestParameters);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackRequestParametersReadAllFrom(new_feedbackRequestParameters, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_feedbackRequestParameters);

                --tagsRemaining;
            }
            break;
            case 3 /* userInfo */:
            {
                if (!shouldParseTag || self->_flags.read_userInfo) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_userInfo) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPFeedbackUserInfo *new_userInfo = [[GEORPFeedbackUserInfo alloc] init];
                self->_userInfo = new_userInfo;
                PBDataReaderMark mark_userInfo;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_userInfo);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackUserInfoReadAllFrom(new_userInfo, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_userInfo);

                --tagsRemaining;
            }
            break;
            case 4 /* analyticMetadata */:
            {
                if (!shouldParseTag || self->_flags.read_analyticMetadata) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_analyticMetadata) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOPDAnalyticMetadata *new_analyticMetadata = [[GEOPDAnalyticMetadata alloc] init];
                self->_analyticMetadata = new_analyticMetadata;
                PBDataReaderMark mark_analyticMetadata;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_analyticMetadata);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPDAnalyticMetadataReadAllFrom(new_analyticMetadata, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_analyticMetadata);

                --tagsRemaining;
            }
            break;
            case 5 /* clientMetadata */:
            {
                if (!shouldParseTag || self->_flags.read_clientMetadata) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_clientMetadata) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOPDClientMetadata *new_clientMetadata = [[GEOPDClientMetadata alloc] init];
                self->_clientMetadata = new_clientMetadata;
                PBDataReaderMark mark_clientMetadata;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_clientMetadata);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPDClientMetadataReadAllFrom(new_clientMetadata, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_clientMetadata);

                --tagsRemaining;
            }
            break;
            case 6 /* clientCapabilities */:
            {
                if (!shouldParseTag || self->_flags.read_clientCapabilities) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_clientCapabilities) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPClientCapabilities *new_clientCapabilities = [[GEORPClientCapabilities alloc] init];
                self->_clientCapabilities = new_clientCapabilities;
                PBDataReaderMark mark_clientCapabilities;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_clientCapabilities);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPClientCapabilitiesReadAllFrom(new_clientCapabilities, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_clientCapabilities);

                --tagsRemaining;
            }
            break;
            case 7 /* displayLanguages */:
            {
                if (!shouldParseTag || self->_flags.read_displayLanguages) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
            NSString *new_displayLanguages = PBReaderReadString(reader);
                if (new_displayLanguages)
                {
                    [self _addNoFlagsDisplayLanguage:new_displayLanguages];
                }

            }
            break;
            case 8 /* abClientMetadata */:
            {
                if (!shouldParseTag || self->_flags.read_abClientMetadata) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_abClientMetadata) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOABSecondPartyPlaceRequestClientMetaData *new_abClientMetadata = [[GEOABSecondPartyPlaceRequestClientMetaData alloc] init];
                self->_abClientMetadata = new_abClientMetadata;
                PBDataReaderMark mark_abClientMetadata;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_abClientMetadata);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom(new_abClientMetadata, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_abClientMetadata);

                --tagsRemaining;
            }
            break;
#if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
            case 201 /* debugSettings */:
            {
                if (!shouldParseTag || self->_flags.read_debugSettings) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_debugSettings) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPDebugSettings *new_debugSettings = [[GEORPDebugSettings alloc] init];
                self->_debugSettings = new_debugSettings;
                PBDataReaderMark mark_debugSettings;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_debugSettings);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPDebugSettingsReadAllFrom(new_debugSettings, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_debugSettings);

                --tagsRemaining;
            }
            break;
#endif // defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
            default:
                if (!shouldParseUnknown || self->_flags.read_unknownFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }

    if (shouldParseUnknown) {
        self->_flags.read_unknownFields = YES;
    }

    if (readAll) {
        if (recursively) {
            [self->_feedbackRequestParameters readAll:YES];
            [self->_userInfo readAll:YES];
            [self->_analyticMetadata readAll:YES];
            [self->_clientMetadata readAll:YES];
            [self->_clientCapabilities readAll:YES];
            [self->_abClientMetadata readAll:YES];
#if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
            [self->_debugSettings readAll:YES];
#endif // defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
        }
        self->_flags.read_feedbackRequestParameters = YES;
        self->_flags.read_userInfo = YES;
        self->_flags.read_analyticMetadata = YES;
        self->_flags.read_clientMetadata = YES;
        self->_flags.read_clientCapabilities = YES;
        self->_flags.read_displayLanguages = YES;
        self->_flags.read_abClientMetadata = YES;
#if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
        self->_flags.read_debugSettings = YES;
#endif // defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 2 /* feedbackRequestParameters */:
                    self->_flags.read_feedbackRequestParameters = YES;
                    break;
                case 3 /* userInfo */:
                    self->_flags.read_userInfo = YES;
                    break;
                case 4 /* analyticMetadata */:
                    self->_flags.read_analyticMetadata = YES;
                    break;
                case 5 /* clientMetadata */:
                    self->_flags.read_clientMetadata = YES;
                    break;
                case 6 /* clientCapabilities */:
                    self->_flags.read_clientCapabilities = YES;
                    break;
                case 7 /* displayLanguages */:
                    self->_flags.read_displayLanguages = YES;
                    break;
                case 8 /* abClientMetadata */:
                    self->_flags.read_abClientMetadata = YES;
                    break;
#if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
                case 201 /* debugSettings */:
                    self->_flags.read_debugSettings = YES;
                    break;
#endif // defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPFeedbackRequestIsValid(reader);
}

BOOL GEORPFeedbackRequestIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* feedbackRequestType */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 2 /* feedbackRequestParameters */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_feedbackRequestParameters;
                    if (!PBReaderPlaceMark(reader, &mark_feedbackRequestParameters))
                        returnValue(NO);
                    if (!GEORPFeedbackRequestParametersIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_feedbackRequestParameters);
                }
                break;
            case 3 /* userInfo */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_userInfo;
                    if (!PBReaderPlaceMark(reader, &mark_userInfo))
                        returnValue(NO);
                    if (!GEORPFeedbackUserInfoIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_userInfo);
                }
                break;
            case 4 /* analyticMetadata */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_analyticMetadata;
                    if (!PBReaderPlaceMark(reader, &mark_analyticMetadata))
                        returnValue(NO);
                    if (!GEOPDAnalyticMetadataIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_analyticMetadata);
                }
                break;
            case 5 /* clientMetadata */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_clientMetadata;
                    if (!PBReaderPlaceMark(reader, &mark_clientMetadata))
                        returnValue(NO);
                    if (!GEOPDClientMetadataIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_clientMetadata);
                }
                break;
            case 6 /* clientCapabilities */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_clientCapabilities;
                    if (!PBReaderPlaceMark(reader, &mark_clientCapabilities))
                        returnValue(NO);
                    if (!GEORPClientCapabilitiesIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_clientCapabilities);
                }
                break;
            case 7 /* displayLanguages */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 8 /* abClientMetadata */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_abClientMetadata;
                    if (!PBReaderPlaceMark(reader, &mark_abClientMetadata))
                        returnValue(NO);
                    if (!GEOABSecondPartyPlaceRequestClientMetaDataIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_abClientMetadata);
                }
                break;
#if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
            case 201 /* debugSettings */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_debugSettings;
                    if (!PBReaderPlaceMark(reader, &mark_debugSettings))
                        returnValue(NO);
                    if (!GEORPDebugSettingsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_debugSettings);
                }
                break;
#endif // defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPFeedbackRequestReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPFeedbackRequestIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* feedbackRequestType */
    {
        if (self->_flags.has_feedbackRequestType)
        {
            PBDataWriterWriteInt32Field(writer, self->_feedbackRequestType, 1);
        }
    }

    /* feedbackRequestParameters */
    {
        if (self->_feedbackRequestParameters != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_feedbackRequestParameters, 2);
        }
    }

    /* userInfo */
    {
        if (self->_userInfo != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_userInfo, 3);
        }
    }

    /* analyticMetadata */
    {
        if (self->_analyticMetadata != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_analyticMetadata, 4);
        }
    }

    /* clientMetadata */
    {
        if (self->_clientMetadata != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_clientMetadata, 5);
        }
    }

    /* clientCapabilities */
    {
        if (self->_clientCapabilities != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_clientCapabilities, 6);
        }
    }

    /* displayLanguages */
    {
        for (NSString * s_displayLanguages in self->_displayLanguages)
        {
            PBDataWriterWriteStringField(writer, s_displayLanguages, 7);
        }

    }

    /* abClientMetadata */
    {
        if (self->_abClientMetadata != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_abClientMetadata, 8);
        }
    }
#if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY

    /* debugSettings */
    {
        if (self->_debugSettings != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_debugSettings, 201);
        }
    }
#endif // defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}

BOOL GEORPFeedbackRequestIsDirty(__unsafe_unretained GEORPFeedbackRequest *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_feedbackRequestType
        || self->_flags.wrote_feedbackRequestParameters
        || (self->_flags.read_feedbackRequestParameters && GEORPFeedbackRequestParametersIsDirty(self->_feedbackRequestParameters))
        || self->_flags.wrote_userInfo
        || (self->_flags.read_userInfo && GEORPFeedbackUserInfoIsDirty(self->_userInfo))
        || self->_flags.wrote_analyticMetadata
        || (self->_flags.read_analyticMetadata && GEOPDAnalyticMetadataIsDirty(self->_analyticMetadata))
        || self->_flags.wrote_clientMetadata
        || (self->_flags.read_clientMetadata && GEOPDClientMetadataIsDirty(self->_clientMetadata))
        || self->_flags.wrote_clientCapabilities
        || self->_flags.read_clientCapabilities
        || self->_flags.wrote_displayLanguages
        || self->_flags.read_displayLanguages
        || self->_flags.wrote_abClientMetadata
        || (self->_flags.read_abClientMetadata && GEOABSecondPartyPlaceRequestClientMetaDataIsDirty(self->_abClientMetadata))
    #if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
        || self->_flags.wrote_debugSettings
        || self->_flags.read_debugSettings
    #endif // defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
        || self->_flags.wrote_unknownFields
    ;


    return dirty;
}


- (uint32_t)requestTypeCode
{
    return 1015;
}

- (Class)responseClass
{
    return [GEORPFeedbackResponse class];
}

- (void)copyTo:(GEORPFeedbackRequest *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (self->_flags.has_feedbackRequestType)
    {
        other->_feedbackRequestType = _feedbackRequestType;
        other->_flags.has_feedbackRequestType = YES;
    }
    if (_feedbackRequestParameters)
    {
        other.feedbackRequestParameters = _feedbackRequestParameters;
    }
    if (_userInfo)
    {
        other.userInfo = _userInfo;
    }
    if (_analyticMetadata)
    {
        other.analyticMetadata = _analyticMetadata;
    }
    if (_clientMetadata)
    {
        other.clientMetadata = _clientMetadata;
    }
    if (_clientCapabilities)
    {
        other.clientCapabilities = _clientCapabilities;
    }
    if ([self displayLanguagesCount])
    {
        [other clearDisplayLanguages];
        NSUInteger displayLanguagesCnt = [self displayLanguagesCount];
        for (NSUInteger i = 0; i < displayLanguagesCnt; i++)
        {
            [other addDisplayLanguage:[self displayLanguageAtIndex:i]];
        }
    }
    if (_abClientMetadata)
    {
        other.abClientMetadata = _abClientMetadata;
    }
#if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
    if (_debugSettings)
    {
        other.debugSettings = _debugSettings;
    }
#endif // defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPFeedbackRequest *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_feedbackRequestType
                || _flags.wrote_feedbackRequestParameters
                || _flags.wrote_userInfo
                || _flags.wrote_analyticMetadata
                || _flags.wrote_clientMetadata
                || _flags.wrote_clientCapabilities
                || _flags.wrote_displayLanguages
                || _flags.wrote_abClientMetadata
            #if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
                || _flags.wrote_debugSettings
            #endif // defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
                || _flags.wrote_unknownFields
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPFeedbackRequestReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    if (self->_flags.has_feedbackRequestType)
    {
        copy->_feedbackRequestType = _feedbackRequestType;
        copy->_flags.has_feedbackRequestType = YES;
    }
    copy->_feedbackRequestParameters = [_feedbackRequestParameters copyWithZone:zone];
    copy->_userInfo = [_userInfo copyWithZone:zone];
    copy->_analyticMetadata = [_analyticMetadata copyWithZone:zone];
    copy->_clientMetadata = [_clientMetadata copyWithZone:zone];
    copy->_clientCapabilities = [_clientCapabilities copyWithZone:zone];
    for (NSString * v in _displayLanguages)
    {
        NSString * vCopy = [v copyWithZone:zone];
        [copy addDisplayLanguage:vCopy];
    }
    copy->_abClientMetadata = [_abClientMetadata copyWithZone:zone];
    #if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
    copy->_debugSettings = [_debugSettings copyWithZone:zone];
    #endif // defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPFeedbackRequest *other = (GEORPFeedbackRequest *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_feedbackRequestType && other->_flags.has_feedbackRequestType && self->_feedbackRequestType == other->_feedbackRequestType) || (!self->_flags.has_feedbackRequestType && !other->_flags.has_feedbackRequestType))
    &&
    ((!self->_feedbackRequestParameters && !other->_feedbackRequestParameters) || [self->_feedbackRequestParameters isEqual:other->_feedbackRequestParameters])
    &&
    ((!self->_userInfo && !other->_userInfo) || [self->_userInfo isEqual:other->_userInfo])
    &&
    ((!self->_analyticMetadata && !other->_analyticMetadata) || [self->_analyticMetadata isEqual:other->_analyticMetadata])
    &&
    ((!self->_clientMetadata && !other->_clientMetadata) || [self->_clientMetadata isEqual:other->_clientMetadata])
    &&
    ((!self->_clientCapabilities && !other->_clientCapabilities) || [self->_clientCapabilities isEqual:other->_clientCapabilities])
    &&
    ((!self->_displayLanguages && !other->_displayLanguages) || [self->_displayLanguages isEqual:other->_displayLanguages])

    &&
    ((!self->_abClientMetadata && !other->_abClientMetadata) || [self->_abClientMetadata isEqual:other->_abClientMetadata])
#if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
    &&
    ((!self->_debugSettings && !other->_debugSettings) || [self->_debugSettings isEqual:other->_debugSettings])
#endif // defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_feedbackRequestType ? PBHashInt((NSUInteger)self->_feedbackRequestType) : 0)
    ^
    [self->_feedbackRequestParameters hash]
    ^
    [self->_userInfo hash]
    ^
    [self->_analyticMetadata hash]
    ^
    [self->_clientMetadata hash]
    ^
    [self->_clientCapabilities hash]
    ^
    [self->_displayLanguages hash]
    ^
    [self->_abClientMetadata hash]
#if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
    ^
    [self->_debugSettings hash]
#endif // defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
    ;
}

- (void)mergeFrom:(GEORPFeedbackRequest *)other
{
    [other readAll:NO];
    if (other->_flags.has_feedbackRequestType)
    {
        self->_feedbackRequestType = other->_feedbackRequestType;
        self->_flags.has_feedbackRequestType = 1;
    }
    if (self->_feedbackRequestParameters && other->_feedbackRequestParameters)
    {
        [self->_feedbackRequestParameters mergeFrom:other->_feedbackRequestParameters];
    }
    else if (!self->_feedbackRequestParameters && other->_feedbackRequestParameters)
    {
        [self setFeedbackRequestParameters:other->_feedbackRequestParameters];
    }
    if (self->_userInfo && other->_userInfo)
    {
        [self->_userInfo mergeFrom:other->_userInfo];
    }
    else if (!self->_userInfo && other->_userInfo)
    {
        [self setUserInfo:other->_userInfo];
    }
    if (self->_analyticMetadata && other->_analyticMetadata)
    {
        [self->_analyticMetadata mergeFrom:other->_analyticMetadata];
    }
    else if (!self->_analyticMetadata && other->_analyticMetadata)
    {
        [self setAnalyticMetadata:other->_analyticMetadata];
    }
    if (self->_clientMetadata && other->_clientMetadata)
    {
        [self->_clientMetadata mergeFrom:other->_clientMetadata];
    }
    else if (!self->_clientMetadata && other->_clientMetadata)
    {
        [self setClientMetadata:other->_clientMetadata];
    }
    if (self->_clientCapabilities && other->_clientCapabilities)
    {
        [self->_clientCapabilities mergeFrom:other->_clientCapabilities];
    }
    else if (!self->_clientCapabilities && other->_clientCapabilities)
    {
        [self setClientCapabilities:other->_clientCapabilities];
    }
    for (NSString * iter_displayLanguages in other->_displayLanguages)
    {
        [self addDisplayLanguage:iter_displayLanguages];
    }
    if (self->_abClientMetadata && other->_abClientMetadata)
    {
        [self->_abClientMetadata mergeFrom:other->_abClientMetadata];
    }
    else if (!self->_abClientMetadata && other->_abClientMetadata)
    {
        [self setAbClientMetadata:other->_abClientMetadata];
    }
    #if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
    if (self->_debugSettings && other->_debugSettings)
    {
        [self->_debugSettings mergeFrom:other->_debugSettings];
    }
    else if (!self->_debugSettings && other->_debugSettings)
    {
        [self setDebugSettings:other->_debugSettings];
    }
    #endif
}

- (PBUnknownFields *)unknownFields
{
    if (_flags.read_unknownFields) return _unknownFields;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return _unknownFields;
    @synchronized(reader) {
        if (!_flags.read_unknownFields) {
            static const uint32_t tags[] = {TAG_UNKNOWN_FIELDS, 0};
            GEORPFeedbackRequestReadSpecified(self, reader, tags);
        }
    }
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _flags.read_unknownFields = 1;
    _flags.wrote_unknownFields = 1;
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
    [_feedbackRequestParameters clearUnknownFields:YES];
    [_userInfo clearUnknownFields:YES];
    [_analyticMetadata clearUnknownFields:YES];
    [_clientMetadata clearUnknownFields:YES];
    [_abClientMetadata clearUnknownFields:YES];
#if defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
    [_debugSettings clearUnknownFields:YES];
#endif // defined(GEO_INTERNAL_ONLY) && GEO_INTERNAL_ONLY
}

@end


