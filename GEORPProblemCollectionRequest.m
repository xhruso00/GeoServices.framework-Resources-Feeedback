// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPProblemCollectionRequest.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEOLocation.h>
#import <GeoServices/GEORPProblem.h>
#import <GeoServices/GEORPUserCredentials.h>
#import <GeoServices/GEORPProblemCollectionResponse.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPProblemCollectionRequest

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readRequestElements {
    if (_flags.read_requestElements) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_requestElements) {
            static const uint32_t tags[] = {1, 0};
            GEORPProblemCollectionRequestReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPProblem *> *)requestElements
{
    [self _readRequestElements];
    return _requestElements;
}
- (void)setRequestElements:(NSMutableArray<GEORPProblem *> *)v
{
    _flags.read_requestElements = 1;
    _flags.wrote_requestElements = 1;
    _requestElements = v;
}
- (void)clearRequestElements
{
    _flags.read_requestElements = 1;
    _flags.wrote_requestElements = 1;
    [_requestElements removeAllObjects];
}
- (void)addRequestElement:(GEORPProblem *)i
{
    [self _readRequestElements];
    [self _addNoFlagsRequestElement:i];
    _flags.read_requestElements = 1;
    _flags.wrote_requestElements = 1;
}
- (void)_addNoFlagsRequestElement:(GEORPProblem *)i
{
    if (!_requestElements)
    {
        _requestElements = [[NSMutableArray alloc] init];
    }
    [_requestElements addObject:i];
}
- (NSUInteger)requestElementsCount
{
    [self _readRequestElements];
    return [_requestElements count];
}
- (GEORPProblem *)requestElementAtIndex:(NSUInteger)idx
{
    [self _readRequestElements];
    return [_requestElements objectAtIndex:idx];
}
+ (Class)requestElementType
{
    return [GEORPProblem class];
}

- (void)_readHwMachine {
    if (_flags.read_hwMachine) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_hwMachine) {
            static const uint32_t tags[] = {2, 0};
            GEORPProblemCollectionRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasHwMachine
{
    [self _readHwMachine];
    return _hwMachine != nil;
}
- (NSString *)hwMachine
{
    [self _readHwMachine];
    return _hwMachine;
}
- (void)setHwMachine:(NSString *)v
{
    _flags.read_hwMachine = 1;
    _flags.wrote_hwMachine = 1;
    _hwMachine = v;
}

- (void)_readOsRelease {
    if (_flags.read_osRelease) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_osRelease) {
            static const uint32_t tags[] = {3, 0};
            GEORPProblemCollectionRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasOsRelease
{
    [self _readOsRelease];
    return _osRelease != nil;
}
- (NSString *)osRelease
{
    [self _readOsRelease];
    return _osRelease;
}
- (void)setOsRelease:(NSString *)v
{
    _flags.read_osRelease = 1;
    _flags.wrote_osRelease = 1;
    _osRelease = v;
}

- (void)_readCountryCode {
    if (_flags.read_countryCode) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_countryCode) {
            static const uint32_t tags[] = {4, 0};
            GEORPProblemCollectionRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCountryCode
{
    [self _readCountryCode];
    return _countryCode != nil;
}
- (NSString *)countryCode
{
    [self _readCountryCode];
    return _countryCode;
}
- (void)setCountryCode:(NSString *)v
{
    _flags.read_countryCode = 1;
    _flags.wrote_countryCode = 1;
    _countryCode = v;
}

- (void)_readInputLanguage {
    if (_flags.read_inputLanguage) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_inputLanguage) {
            static const uint32_t tags[] = {5, 0};
            GEORPProblemCollectionRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasInputLanguage
{
    [self _readInputLanguage];
    return _inputLanguage != nil;
}
- (NSString *)inputLanguage
{
    [self _readInputLanguage];
    return _inputLanguage;
}
- (void)setInputLanguage:(NSString *)v
{
    _flags.read_inputLanguage = 1;
    _flags.wrote_inputLanguage = 1;
    _inputLanguage = v;
}

- (void)_readUserCredentials {
    if (_flags.read_userCredentials) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_userCredentials) {
            static const uint32_t tags[] = {6, 0};
            GEORPProblemCollectionRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasUserCredentials
{
    [self _readUserCredentials];
    return _userCredentials != nil;
}
- (GEORPUserCredentials *)userCredentials
{
    [self _readUserCredentials];
    return _userCredentials;
}
- (void)setUserCredentials:(GEORPUserCredentials *)v
{
    _flags.read_userCredentials = 1;
    _flags.wrote_userCredentials = 1;
    _userCredentials = v;
}

- (void)_readDevicePushToken {
    if (_flags.read_devicePushToken) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_devicePushToken) {
            static const uint32_t tags[] = {7, 0};
            GEORPProblemCollectionRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasDevicePushToken
{
    [self _readDevicePushToken];
    return _devicePushToken != nil;
}
- (NSData *)devicePushToken
{
    [self _readDevicePushToken];
    return _devicePushToken;
}
- (void)setDevicePushToken:(NSData *)v
{
    _flags.read_devicePushToken = 1;
    _flags.wrote_devicePushToken = 1;
    _devicePushToken = v;
}

- (void)_readUserEmail {
    if (_flags.read_userEmail) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_userEmail) {
            static const uint32_t tags[] = {8, 0};
            GEORPProblemCollectionRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasUserEmail
{
    [self _readUserEmail];
    return _userEmail != nil;
}
- (NSString *)userEmail
{
    [self _readUserEmail];
    return _userEmail;
}
- (void)setUserEmail:(NSString *)v
{
    _flags.read_userEmail = 1;
    _flags.wrote_userEmail = 1;
    _userEmail = v;
}

- (void)_readUserLocation {
    if (_flags.read_userLocation) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_userLocation) {
            static const uint32_t tags[] = {9, 0};
            GEORPProblemCollectionRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasUserLocation
{
    [self _readUserLocation];
    return _userLocation != nil;
}
- (GEOLocation *)userLocation
{
    [self _readUserLocation];
    return _userLocation;
}
- (void)setUserLocation:(GEOLocation *)v
{
    _flags.read_userLocation = 1;
    _flags.wrote_userLocation = 1;
    _userLocation = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if ([self->_requestElements count])
    {
        NSMutableArray *requestElementsDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_requestElements count]];
        for (GEORPProblem * i_requestElement in self->_requestElements)
        {
            [requestElementsDictReprs addObject:[i_requestElement dictionaryRepresentation]];
        }
        [dict setObject:requestElementsDictReprs forKey:@"request_element"];
    }

    {
        NSString * value = self.hwMachine;
        if (value) {
            [dict setObject:value forKey:@"hw_machine"];
        }
    }

    {
        NSString * value = self.osRelease;
        if (value) {
            [dict setObject:value forKey:@"os_release"];
        }
    }

    {
        NSString * value = self.countryCode;
        if (value) {
            [dict setObject:value forKey:@"country_code"];
        }
    }

    {
        NSString * value = self.inputLanguage;
        if (value) {
            [dict setObject:value forKey:@"input_language"];
        }
    }

    {
        GEORPUserCredentials * value = self.userCredentials;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"user_credentials"];
        }
    }

    {
        NSData * value = self.devicePushToken;
        if (value) {
            [dict setObject:value forKey:@"device_push_token"];
        }
    }

    {
        NSString * value = self.userEmail;
        if (value) {
            [dict setObject:value forKey:@"user_email"];
        }
    }

    {
        GEOLocation * value = self.userLocation;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"user_location"];
        }
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPProblemCollectionRequestReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPProblemCollectionRequestReadAllFrom(__unsafe_unretained GEORPProblemCollectionRequest *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPProblemCollectionRequestReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPProblemCollectionRequestReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPProblemCollectionRequestReadFrom(__unsafe_unretained GEORPProblemCollectionRequest *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPProblemCollectionRequestReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPProblemCollectionRequestReadSpecified(__unsafe_unretained GEORPProblemCollectionRequest *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_requestElements
        + self->_flags.read_hwMachine
        + self->_flags.read_osRelease
        + self->_flags.read_countryCode
        + self->_flags.read_inputLanguage
        + self->_flags.read_userCredentials
        + self->_flags.read_devicePushToken
        + self->_flags.read_userEmail
        + self->_flags.read_userLocation
        ;
    #define requiredLazyFieldCount 7 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* requestElements */:
            {
                if (!shouldParseTag || self->_flags.read_requestElements) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPProblem *new_requestElement = [[GEORPProblem alloc] init];
                [self _addNoFlagsRequestElement:new_requestElement];
                PBDataReaderMark mark_requestElement;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_requestElement);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPProblemReadAllFrom(new_requestElement, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_requestElement);

            }
            break;
            case 2 /* hwMachine */:
            {
                if (!shouldParseTag || self->_flags.read_hwMachine) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_hwMachine) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_hwMachine = PBReaderReadString(reader);
                self->_hwMachine = new_hwMachine;

                --tagsRemaining;
            }
            break;
            case 3 /* osRelease */:
            {
                if (!shouldParseTag || self->_flags.read_osRelease) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_osRelease) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_osRelease = PBReaderReadString(reader);
                self->_osRelease = new_osRelease;

                --tagsRemaining;
            }
            break;
            case 4 /* countryCode */:
            {
                if (!shouldParseTag || self->_flags.read_countryCode) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_countryCode) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_countryCode = PBReaderReadString(reader);
                self->_countryCode = new_countryCode;

                --tagsRemaining;
            }
            break;
            case 5 /* inputLanguage */:
            {
                if (!shouldParseTag || self->_flags.read_inputLanguage) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_inputLanguage) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_inputLanguage = PBReaderReadString(reader);
                self->_inputLanguage = new_inputLanguage;

                --tagsRemaining;
            }
            break;
            case 6 /* userCredentials */:
            {
                if (!shouldParseTag || self->_flags.read_userCredentials) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_userCredentials) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPUserCredentials *new_userCredentials = [[GEORPUserCredentials alloc] init];
                self->_userCredentials = new_userCredentials;
                PBDataReaderMark mark_userCredentials;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_userCredentials);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPUserCredentialsReadAllFrom(new_userCredentials, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_userCredentials);

                --tagsRemaining;
            }
            break;
            case 7 /* devicePushToken */:
            {
                if (!shouldParseTag || self->_flags.read_devicePushToken) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_devicePushToken) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSData * new_devicePushToken = PBReaderReadData(reader);
                self->_devicePushToken = new_devicePushToken;

                --tagsRemaining;
            }
            break;
            case 8 /* userEmail */:
            {
                if (!shouldParseTag || self->_flags.read_userEmail) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_userEmail) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_userEmail = PBReaderReadString(reader);
                self->_userEmail = new_userEmail;

                --tagsRemaining;
            }
            break;
            case 9 /* userLocation */:
            {
                if (!shouldParseTag || self->_flags.read_userLocation) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_userLocation) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOLocation *new_userLocation = [[GEOLocation alloc] init];
                self->_userLocation = new_userLocation;
                PBDataReaderMark mark_userLocation;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_userLocation);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOLocationReadAllFrom(new_userLocation, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_userLocation);

                --tagsRemaining;
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
            for (GEORPProblem * i in self->_requestElements)
                [i readAll:YES];
            [self->_userCredentials readAll:YES];
            [self->_userLocation readAll:YES];
        }
        self->_flags.read_requestElements = YES;
        self->_flags.read_hwMachine = YES;
        self->_flags.read_osRelease = YES;
        self->_flags.read_countryCode = YES;
        self->_flags.read_inputLanguage = YES;
        self->_flags.read_userCredentials = YES;
        self->_flags.read_devicePushToken = YES;
        self->_flags.read_userEmail = YES;
        self->_flags.read_userLocation = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* requestElements */:
                    self->_flags.read_requestElements = YES;
                    break;
                case 2 /* hwMachine */:
                    self->_flags.read_hwMachine = YES;
                    break;
                case 3 /* osRelease */:
                    self->_flags.read_osRelease = YES;
                    break;
                case 4 /* countryCode */:
                    self->_flags.read_countryCode = YES;
                    break;
                case 5 /* inputLanguage */:
                    self->_flags.read_inputLanguage = YES;
                    break;
                case 6 /* userCredentials */:
                    self->_flags.read_userCredentials = YES;
                    break;
                case 7 /* devicePushToken */:
                    self->_flags.read_devicePushToken = YES;
                    break;
                case 8 /* userEmail */:
                    self->_flags.read_userEmail = YES;
                    break;
                case 9 /* userLocation */:
                    self->_flags.read_userLocation = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPProblemCollectionRequestIsValid(reader);
}

BOOL GEORPProblemCollectionRequestIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* requestElements */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_requestElement;
                    if (!PBReaderPlaceMark(reader, &mark_requestElement))
                        returnValue(NO);
                    if (!GEORPProblemIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_requestElement);
                }
                break;
            case 2 /* hwMachine */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 3 /* osRelease */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 4 /* countryCode */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 5 /* inputLanguage */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 6 /* userCredentials */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_userCredentials;
                    if (!PBReaderPlaceMark(reader, &mark_userCredentials))
                        returnValue(NO);
                    if (!GEORPUserCredentialsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_userCredentials);
                }
                break;
            case 7 /* devicePushToken */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 8 /* userEmail */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 9 /* userLocation */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_userLocation;
                    if (!PBReaderPlaceMark(reader, &mark_userLocation))
                        returnValue(NO);
                    if (!GEOLocationIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_userLocation);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPProblemCollectionRequestReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPProblemCollectionRequestIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* requestElements */
    {
        for (GEORPProblem * i_requestElement in self->_requestElements)
        {
            PBDataWriterWriteSubmessage(writer, i_requestElement, 1);
        }

    }

    /* hwMachine */
    {
        if (self->_hwMachine)
        {
            PBDataWriterWriteStringField(writer, self->_hwMachine, 2);
        }
    }

    /* osRelease */
    {
        if (self->_osRelease)
        {
            PBDataWriterWriteStringField(writer, self->_osRelease, 3);
        }
    }

    /* countryCode */
    {
        if (self->_countryCode)
        {
            PBDataWriterWriteStringField(writer, self->_countryCode, 4);
        }
    }

    /* inputLanguage */
    {
        if (self->_inputLanguage)
        {
            PBDataWriterWriteStringField(writer, self->_inputLanguage, 5);
        }
    }

    /* userCredentials */
    {
        if (self->_userCredentials != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_userCredentials, 6);
        }
    }

    /* devicePushToken */
    {
        if (self->_devicePushToken)
        {
            PBDataWriterWriteDataField(writer, self->_devicePushToken, 7);
        }
    }

    /* userEmail */
    {
        if (self->_userEmail)
        {
            PBDataWriterWriteStringField(writer, self->_userEmail, 8);
        }
    }

    /* userLocation */
    {
        if (self->_userLocation != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_userLocation, 9);
        }
    }
}

BOOL GEORPProblemCollectionRequestIsDirty(__unsafe_unretained GEORPProblemCollectionRequest *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_requestElements
        || self->_flags.wrote_hwMachine
        || self->_flags.read_hwMachine
        || self->_flags.wrote_osRelease
        || self->_flags.read_osRelease
        || self->_flags.wrote_countryCode
        || self->_flags.read_countryCode
        || self->_flags.wrote_inputLanguage
        || self->_flags.read_inputLanguage
        || self->_flags.wrote_userCredentials
        || (self->_flags.read_userCredentials && GEORPUserCredentialsIsDirty(self->_userCredentials))
        || self->_flags.wrote_devicePushToken
        || self->_flags.read_devicePushToken
        || self->_flags.wrote_userEmail
        || self->_flags.read_userEmail
        || self->_flags.wrote_userLocation
        || self->_flags.read_userLocation
    ;

    if (!dirty) {

            if (self->_flags.read_requestElements) {
                for (GEORPProblem *i in self->_requestElements) {
                    if (GEORPProblemIsDirty(i)) {
                        return YES;
                    }
                }
            }
    }

    return dirty;
}


- (uint32_t)requestTypeCode
{
    return 1009;
}

- (Class)responseClass
{
    return [GEORPProblemCollectionResponse class];
}

- (void)copyTo:(GEORPProblemCollectionRequest *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if ([self requestElementsCount])
    {
        [other clearRequestElements];
        NSUInteger requestElementsCnt = [self requestElementsCount];
        for (NSUInteger i = 0; i < requestElementsCnt; i++)
        {
            [other addRequestElement:[self requestElementAtIndex:i]];
        }
    }
    if (_hwMachine)
    {
        other.hwMachine = _hwMachine;
    }
    if (_osRelease)
    {
        other.osRelease = _osRelease;
    }
    if (_countryCode)
    {
        other.countryCode = _countryCode;
    }
    if (_inputLanguage)
    {
        other.inputLanguage = _inputLanguage;
    }
    if (_userCredentials)
    {
        other.userCredentials = _userCredentials;
    }
    if (_devicePushToken)
    {
        other.devicePushToken = _devicePushToken;
    }
    if (_userEmail)
    {
        other.userEmail = _userEmail;
    }
    if (_userLocation)
    {
        other.userLocation = _userLocation;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPProblemCollectionRequest *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_requestElements
                || _flags.wrote_hwMachine
                || _flags.wrote_osRelease
                || _flags.wrote_countryCode
                || _flags.wrote_inputLanguage
                || _flags.wrote_userCredentials
                || _flags.wrote_devicePushToken
                || _flags.wrote_userEmail
                || _flags.wrote_userLocation
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPProblemCollectionRequestReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    for (GEORPProblem * v in _requestElements)
    {
        GEORPProblem * vCopy = [v copyWithZone:zone];
        [copy addRequestElement:vCopy];
    }
    copy->_hwMachine = [_hwMachine copyWithZone:zone];
    copy->_osRelease = [_osRelease copyWithZone:zone];
    copy->_countryCode = [_countryCode copyWithZone:zone];
    copy->_inputLanguage = [_inputLanguage copyWithZone:zone];
    copy->_userCredentials = [_userCredentials copyWithZone:zone];
    copy->_devicePushToken = [_devicePushToken copyWithZone:zone];
    copy->_userEmail = [_userEmail copyWithZone:zone];
    copy->_userLocation = [_userLocation copyWithZone:zone];
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPProblemCollectionRequest *other = (GEORPProblemCollectionRequest *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_requestElements && !other->_requestElements) || [self->_requestElements isEqual:other->_requestElements])

    &&
    ((!self->_hwMachine && !other->_hwMachine) || [self->_hwMachine isEqual:other->_hwMachine])
    &&
    ((!self->_osRelease && !other->_osRelease) || [self->_osRelease isEqual:other->_osRelease])
    &&
    ((!self->_countryCode && !other->_countryCode) || [self->_countryCode isEqual:other->_countryCode])
    &&
    ((!self->_inputLanguage && !other->_inputLanguage) || [self->_inputLanguage isEqual:other->_inputLanguage])
    &&
    ((!self->_userCredentials && !other->_userCredentials) || [self->_userCredentials isEqual:other->_userCredentials])
    &&
    ((!self->_devicePushToken && !other->_devicePushToken) || [self->_devicePushToken isEqual:other->_devicePushToken])
    &&
    ((!self->_userEmail && !other->_userEmail) || [self->_userEmail isEqual:other->_userEmail])
    &&
    ((!self->_userLocation && !other->_userLocation) || [self->_userLocation isEqual:other->_userLocation])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_requestElements hash]
    ^
    [self->_hwMachine hash]
    ^
    [self->_osRelease hash]
    ^
    [self->_countryCode hash]
    ^
    [self->_inputLanguage hash]
    ^
    [self->_userCredentials hash]
    ^
    [self->_devicePushToken hash]
    ^
    [self->_userEmail hash]
    ^
    [self->_userLocation hash]
    ;
}

- (void)mergeFrom:(GEORPProblemCollectionRequest *)other
{
    [other readAll:NO];
    for (GEORPProblem * iter_requestElements in other->_requestElements)
    {
        [self addRequestElement:iter_requestElements];
    }
    if (other->_hwMachine)
    {
        [self setHwMachine:other->_hwMachine];
    }
    if (other->_osRelease)
    {
        [self setOsRelease:other->_osRelease];
    }
    if (other->_countryCode)
    {
        [self setCountryCode:other->_countryCode];
    }
    if (other->_inputLanguage)
    {
        [self setInputLanguage:other->_inputLanguage];
    }
    if (self->_userCredentials && other->_userCredentials)
    {
        [self->_userCredentials mergeFrom:other->_userCredentials];
    }
    else if (!self->_userCredentials && other->_userCredentials)
    {
        [self setUserCredentials:other->_userCredentials];
    }
    if (other->_devicePushToken)
    {
        [self setDevicePushToken:other->_devicePushToken];
    }
    if (other->_userEmail)
    {
        [self setUserEmail:other->_userEmail];
    }
    if (self->_userLocation && other->_userLocation)
    {
        [self->_userLocation mergeFrom:other->_userLocation];
    }
    else if (!self->_userLocation && other->_userLocation)
    {
        [self setUserLocation:other->_userLocation];
    }
}


@end


