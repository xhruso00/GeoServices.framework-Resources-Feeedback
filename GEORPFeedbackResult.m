// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPFeedbackResult.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEORPFeedbackIdLookupResult.h>
#import <GeoServices/GEORPFeedbackImageUploadResult.h>
#import <GeoServices/GEORPFeedbackLayoutConfigResult.h>
#import <GeoServices/GEORPFeedbackQueryResult.h>
#import <GeoServices/GEORPFeedbackSubmissionResult.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPFeedbackResult

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readSubmissionResult {
    if (_flags.read_submissionResult) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_submissionResult) {
            static const uint32_t tags[] = {1, 0};
            GEORPFeedbackResultReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasSubmissionResult
{
    [self _readSubmissionResult];
    return _submissionResult != nil;
}
- (GEORPFeedbackSubmissionResult *)submissionResult
{
    [self _readSubmissionResult];
    return _submissionResult;
}
- (void)setSubmissionResult:(GEORPFeedbackSubmissionResult *)v
{
    _flags.read_submissionResult = 1;
    _flags.wrote_submissionResult = 1;
    _submissionResult = v;
}

- (void)_readIdLookupResult {
    if (_flags.read_idLookupResult) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_idLookupResult) {
            static const uint32_t tags[] = {2, 0};
            GEORPFeedbackResultReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasIdLookupResult
{
    [self _readIdLookupResult];
    return _idLookupResult != nil;
}
- (GEORPFeedbackIdLookupResult *)idLookupResult
{
    [self _readIdLookupResult];
    return _idLookupResult;
}
- (void)setIdLookupResult:(GEORPFeedbackIdLookupResult *)v
{
    _flags.read_idLookupResult = 1;
    _flags.wrote_idLookupResult = 1;
    _idLookupResult = v;
}

- (void)_readQueryResult {
    if (_flags.read_queryResult) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_queryResult) {
            static const uint32_t tags[] = {3, 0};
            GEORPFeedbackResultReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasQueryResult
{
    [self _readQueryResult];
    return _queryResult != nil;
}
- (GEORPFeedbackQueryResult *)queryResult
{
    [self _readQueryResult];
    return _queryResult;
}
- (void)setQueryResult:(GEORPFeedbackQueryResult *)v
{
    _flags.read_queryResult = 1;
    _flags.wrote_queryResult = 1;
    _queryResult = v;
}

- (void)_readImageUploadResult {
    if (_flags.read_imageUploadResult) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_imageUploadResult) {
            static const uint32_t tags[] = {4, 0};
            GEORPFeedbackResultReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasImageUploadResult
{
    [self _readImageUploadResult];
    return _imageUploadResult != nil;
}
- (GEORPFeedbackImageUploadResult *)imageUploadResult
{
    [self _readImageUploadResult];
    return _imageUploadResult;
}
- (void)setImageUploadResult:(GEORPFeedbackImageUploadResult *)v
{
    _flags.read_imageUploadResult = 1;
    _flags.wrote_imageUploadResult = 1;
    _imageUploadResult = v;
}

- (void)_readLayoutConfigResult {
    if (_flags.read_layoutConfigResult) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_layoutConfigResult) {
            static const uint32_t tags[] = {5, 0};
            GEORPFeedbackResultReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasLayoutConfigResult
{
    [self _readLayoutConfigResult];
    return _layoutConfigResult != nil;
}
- (GEORPFeedbackLayoutConfigResult *)layoutConfigResult
{
    [self _readLayoutConfigResult];
    return _layoutConfigResult;
}
- (void)setLayoutConfigResult:(GEORPFeedbackLayoutConfigResult *)v
{
    _flags.read_layoutConfigResult = 1;
    _flags.wrote_layoutConfigResult = 1;
    _layoutConfigResult = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        GEORPFeedbackSubmissionResult * value = self.submissionResult;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"submission_result"];
        }
    }

    {
        GEORPFeedbackIdLookupResult * value = self.idLookupResult;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"id_lookup_result"];
        }
    }

    {
        GEORPFeedbackQueryResult * value = self.queryResult;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"query_result"];
        }
    }

    {
        GEORPFeedbackImageUploadResult * value = self.imageUploadResult;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"image_upload_result"];
        }
    }

    {
        GEORPFeedbackLayoutConfigResult * value = self.layoutConfigResult;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"layout_config_result"];
        }
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPFeedbackResultReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPFeedbackResultReadAllFrom(__unsafe_unretained GEORPFeedbackResult *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPFeedbackResultReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPFeedbackResultReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPFeedbackResultReadFrom(__unsafe_unretained GEORPFeedbackResult *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPFeedbackResultReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPFeedbackResultReadSpecified(__unsafe_unretained GEORPFeedbackResult *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_submissionResult
        + self->_flags.read_idLookupResult
        + self->_flags.read_queryResult
        + self->_flags.read_imageUploadResult
        + self->_flags.read_layoutConfigResult
        + self->_flags.read_unknownFields
        ;
    #define requiredLazyFieldCount 4 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL shouldParseUnknown = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            case TAG_UNKNOWN_FIELDS:
                shouldParseUnknown = YES;
                ++readLazyCount;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
        shouldParseUnknown = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !(readAll || shouldParseUnknown);
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* submissionResult */:
            {
                if (!shouldParseTag || self->_flags.read_submissionResult) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_submissionResult) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPFeedbackSubmissionResult *new_submissionResult = [[GEORPFeedbackSubmissionResult alloc] init];
                self->_submissionResult = new_submissionResult;
                PBDataReaderMark mark_submissionResult;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_submissionResult);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackSubmissionResultReadAllFrom(new_submissionResult, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_submissionResult);

                --tagsRemaining;
            }
            break;
            case 2 /* idLookupResult */:
            {
                if (!shouldParseTag || self->_flags.read_idLookupResult) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_idLookupResult) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPFeedbackIdLookupResult *new_idLookupResult = [[GEORPFeedbackIdLookupResult alloc] init];
                self->_idLookupResult = new_idLookupResult;
                PBDataReaderMark mark_idLookupResult;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_idLookupResult);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackIdLookupResultReadAllFrom(new_idLookupResult, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_idLookupResult);

                --tagsRemaining;
            }
            break;
            case 3 /* queryResult */:
            {
                if (!shouldParseTag || self->_flags.read_queryResult) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_queryResult) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPFeedbackQueryResult *new_queryResult = [[GEORPFeedbackQueryResult alloc] init];
                self->_queryResult = new_queryResult;
                PBDataReaderMark mark_queryResult;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_queryResult);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackQueryResultReadAllFrom(new_queryResult, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_queryResult);

                --tagsRemaining;
            }
            break;
            case 4 /* imageUploadResult */:
            {
                if (!shouldParseTag || self->_flags.read_imageUploadResult) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_imageUploadResult) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPFeedbackImageUploadResult *new_imageUploadResult = [[GEORPFeedbackImageUploadResult alloc] init];
                self->_imageUploadResult = new_imageUploadResult;
                PBDataReaderMark mark_imageUploadResult;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_imageUploadResult);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackImageUploadResultReadAllFrom(new_imageUploadResult, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_imageUploadResult);

                --tagsRemaining;
            }
            break;
            case 5 /* layoutConfigResult */:
            {
                if (!shouldParseTag || self->_flags.read_layoutConfigResult) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_layoutConfigResult) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPFeedbackLayoutConfigResult *new_layoutConfigResult = [[GEORPFeedbackLayoutConfigResult alloc] init];
                self->_layoutConfigResult = new_layoutConfigResult;
                PBDataReaderMark mark_layoutConfigResult;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_layoutConfigResult);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackLayoutConfigResultReadAllFrom(new_layoutConfigResult, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_layoutConfigResult);

                --tagsRemaining;
            }
            break;
            default:
                if (!shouldParseUnknown || self->_flags.read_unknownFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }

    if (shouldParseUnknown) {
        self->_flags.read_unknownFields = YES;
    }

    if (readAll) {
        if (recursively) {
            [self->_submissionResult readAll:YES];
            [self->_idLookupResult readAll:YES];
            [self->_queryResult readAll:YES];
            [self->_imageUploadResult readAll:YES];
            [self->_layoutConfigResult readAll:YES];
        }
        self->_flags.read_submissionResult = YES;
        self->_flags.read_idLookupResult = YES;
        self->_flags.read_queryResult = YES;
        self->_flags.read_imageUploadResult = YES;
        self->_flags.read_layoutConfigResult = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* submissionResult */:
                    self->_flags.read_submissionResult = YES;
                    break;
                case 2 /* idLookupResult */:
                    self->_flags.read_idLookupResult = YES;
                    break;
                case 3 /* queryResult */:
                    self->_flags.read_queryResult = YES;
                    break;
                case 4 /* imageUploadResult */:
                    self->_flags.read_imageUploadResult = YES;
                    break;
                case 5 /* layoutConfigResult */:
                    self->_flags.read_layoutConfigResult = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPFeedbackResultIsValid(reader);
}

BOOL GEORPFeedbackResultIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* submissionResult */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_submissionResult;
                    if (!PBReaderPlaceMark(reader, &mark_submissionResult))
                        returnValue(NO);
                    if (!GEORPFeedbackSubmissionResultIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_submissionResult);
                }
                break;
            case 2 /* idLookupResult */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_idLookupResult;
                    if (!PBReaderPlaceMark(reader, &mark_idLookupResult))
                        returnValue(NO);
                    if (!GEORPFeedbackIdLookupResultIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_idLookupResult);
                }
                break;
            case 3 /* queryResult */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_queryResult;
                    if (!PBReaderPlaceMark(reader, &mark_queryResult))
                        returnValue(NO);
                    if (!GEORPFeedbackQueryResultIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_queryResult);
                }
                break;
            case 4 /* imageUploadResult */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_imageUploadResult;
                    if (!PBReaderPlaceMark(reader, &mark_imageUploadResult))
                        returnValue(NO);
                    if (!GEORPFeedbackImageUploadResultIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_imageUploadResult);
                }
                break;
            case 5 /* layoutConfigResult */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_layoutConfigResult;
                    if (!PBReaderPlaceMark(reader, &mark_layoutConfigResult))
                        returnValue(NO);
                    if (!GEORPFeedbackLayoutConfigResultIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_layoutConfigResult);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPFeedbackResultReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPFeedbackResultIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* submissionResult */
    {
        if (self->_submissionResult != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_submissionResult, 1);
        }
    }

    /* idLookupResult */
    {
        if (self->_idLookupResult != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_idLookupResult, 2);
        }
    }

    /* queryResult */
    {
        if (self->_queryResult != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_queryResult, 3);
        }
    }

    /* imageUploadResult */
    {
        if (self->_imageUploadResult != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_imageUploadResult, 4);
        }
    }

    /* layoutConfigResult */
    {
        if (self->_layoutConfigResult != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_layoutConfigResult, 5);
        }
    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}

BOOL GEORPFeedbackResultIsDirty(__unsafe_unretained GEORPFeedbackResult *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_submissionResult
        || self->_flags.read_submissionResult
        || self->_flags.wrote_idLookupResult
        || self->_flags.read_idLookupResult
        || self->_flags.wrote_queryResult
        || (self->_flags.read_queryResult && GEORPFeedbackQueryResultIsDirty(self->_queryResult))
        || self->_flags.wrote_imageUploadResult
        || self->_flags.read_imageUploadResult
        || self->_flags.wrote_layoutConfigResult
        || self->_flags.read_layoutConfigResult
        || self->_flags.wrote_unknownFields
    ;


    return dirty;
}


- (void)copyTo:(GEORPFeedbackResult *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_submissionResult)
    {
        other.submissionResult = _submissionResult;
    }
    if (_idLookupResult)
    {
        other.idLookupResult = _idLookupResult;
    }
    if (_queryResult)
    {
        other.queryResult = _queryResult;
    }
    if (_imageUploadResult)
    {
        other.imageUploadResult = _imageUploadResult;
    }
    if (_layoutConfigResult)
    {
        other.layoutConfigResult = _layoutConfigResult;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPFeedbackResult *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_submissionResult
                || _flags.wrote_idLookupResult
                || _flags.wrote_queryResult
                || _flags.wrote_imageUploadResult
                || _flags.wrote_layoutConfigResult
                || _flags.wrote_unknownFields
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPFeedbackResultReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_submissionResult = [_submissionResult copyWithZone:zone];
    copy->_idLookupResult = [_idLookupResult copyWithZone:zone];
    copy->_queryResult = [_queryResult copyWithZone:zone];
    copy->_imageUploadResult = [_imageUploadResult copyWithZone:zone];
    copy->_layoutConfigResult = [_layoutConfigResult copyWithZone:zone];
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPFeedbackResult *other = (GEORPFeedbackResult *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_submissionResult && !other->_submissionResult) || [self->_submissionResult isEqual:other->_submissionResult])
    &&
    ((!self->_idLookupResult && !other->_idLookupResult) || [self->_idLookupResult isEqual:other->_idLookupResult])
    &&
    ((!self->_queryResult && !other->_queryResult) || [self->_queryResult isEqual:other->_queryResult])
    &&
    ((!self->_imageUploadResult && !other->_imageUploadResult) || [self->_imageUploadResult isEqual:other->_imageUploadResult])
    &&
    ((!self->_layoutConfigResult && !other->_layoutConfigResult) || [self->_layoutConfigResult isEqual:other->_layoutConfigResult])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_submissionResult hash]
    ^
    [self->_idLookupResult hash]
    ^
    [self->_queryResult hash]
    ^
    [self->_imageUploadResult hash]
    ^
    [self->_layoutConfigResult hash]
    ;
}

- (void)mergeFrom:(GEORPFeedbackResult *)other
{
    [other readAll:NO];
    if (self->_submissionResult && other->_submissionResult)
    {
        [self->_submissionResult mergeFrom:other->_submissionResult];
    }
    else if (!self->_submissionResult && other->_submissionResult)
    {
        [self setSubmissionResult:other->_submissionResult];
    }
    if (self->_idLookupResult && other->_idLookupResult)
    {
        [self->_idLookupResult mergeFrom:other->_idLookupResult];
    }
    else if (!self->_idLookupResult && other->_idLookupResult)
    {
        [self setIdLookupResult:other->_idLookupResult];
    }
    if (self->_queryResult && other->_queryResult)
    {
        [self->_queryResult mergeFrom:other->_queryResult];
    }
    else if (!self->_queryResult && other->_queryResult)
    {
        [self setQueryResult:other->_queryResult];
    }
    if (self->_imageUploadResult && other->_imageUploadResult)
    {
        [self->_imageUploadResult mergeFrom:other->_imageUploadResult];
    }
    else if (!self->_imageUploadResult && other->_imageUploadResult)
    {
        [self setImageUploadResult:other->_imageUploadResult];
    }
    if (self->_layoutConfigResult && other->_layoutConfigResult)
    {
        [self->_layoutConfigResult mergeFrom:other->_layoutConfigResult];
    }
    else if (!self->_layoutConfigResult && other->_layoutConfigResult)
    {
        [self setLayoutConfigResult:other->_layoutConfigResult];
    }
}

- (PBUnknownFields *)unknownFields
{
    if (_flags.read_unknownFields) return _unknownFields;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return _unknownFields;
    @synchronized(reader) {
        if (!_flags.read_unknownFields) {
            static const uint32_t tags[] = {TAG_UNKNOWN_FIELDS, 0};
            GEORPFeedbackResultReadSpecified(self, reader, tags);
        }
    }
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _flags.read_unknownFields = 1;
    _flags.wrote_unknownFields = 1;
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
    [_submissionResult clearUnknownFields:YES];
    [_idLookupResult clearUnknownFields:YES];
    [_queryResult clearUnknownFields:YES];
    [_imageUploadResult clearUnknownFields:YES];
    [_layoutConfigResult clearUnknownFields:YES];
}

@end


