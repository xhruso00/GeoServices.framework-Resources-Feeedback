// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPDirectionsEvent.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEOLatLng.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPDirectionsEvent

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (GEORPDirectionsEvent_Type)type
{
    return _flags.has_type ? _type : GEORPDirectionsEvent_Type_SWITCHED_TO_ROUTE;
}
- (void)setType:(GEORPDirectionsEvent_Type)v
{
    _flags.wrote_type = 1;
    _flags.has_type = 1;
    _type = v;
}
- (void)setHasType:(BOOL)f
{
    _flags.wrote_type = 1;
    _flags.has_type = f ? 1 : 0;
}
- (BOOL)hasType
{
    return (BOOL)_flags.has_type;
}
- (NSString *)typeAsString:(GEORPDirectionsEvent_Type)value
{
    return GEORPDirectionsEvent_TypeAsString(value);
}
- (GEORPDirectionsEvent_Type)StringAsType:(NSString *)str
{
    return StringAsGEORPDirectionsEvent_Type(str);
}

- (uint32_t)occurrenceResponseIndex
{
    return _occurrenceResponseIndex;
}
- (void)setOccurrenceResponseIndex:(uint32_t)v
{
    _flags.wrote_occurrenceResponseIndex = 1;
    _flags.has_occurrenceResponseIndex = 1;
    _occurrenceResponseIndex = v;
}
- (void)setHasOccurrenceResponseIndex:(BOOL)f
{
    _flags.wrote_occurrenceResponseIndex = 1;
    _flags.has_occurrenceResponseIndex = f ? 1 : 0;
}
- (BOOL)hasOccurrenceResponseIndex
{
    return (BOOL)_flags.has_occurrenceResponseIndex;
}

- (void)_readOccurrenceRouteId {
    if (_flags.read_occurrenceRouteId) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_occurrenceRouteId) {
            static const uint32_t tags[] = {3, 0};
            GEORPDirectionsEventReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasOccurrenceRouteId
{
    [self _readOccurrenceRouteId];
    return _occurrenceRouteId != nil;
}
- (NSData *)occurrenceRouteId
{
    [self _readOccurrenceRouteId];
    return _occurrenceRouteId;
}
- (void)setOccurrenceRouteId:(NSData *)v
{
    _flags.read_occurrenceRouteId = 1;
    _flags.wrote_occurrenceRouteId = 1;
    _occurrenceRouteId = v;
}

- (uint32_t)occurrenceStepIndex
{
    return _occurrenceStepIndex;
}
- (void)setOccurrenceStepIndex:(uint32_t)v
{
    _flags.wrote_occurrenceStepIndex = 1;
    _flags.has_occurrenceStepIndex = 1;
    _occurrenceStepIndex = v;
}
- (void)setHasOccurrenceStepIndex:(BOOL)f
{
    _flags.wrote_occurrenceStepIndex = 1;
    _flags.has_occurrenceStepIndex = f ? 1 : 0;
}
- (BOOL)hasOccurrenceStepIndex
{
    return (BOOL)_flags.has_occurrenceStepIndex;
}

- (void)_readOccurrenceLatLng {
    if (_flags.read_occurrenceLatLng) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_occurrenceLatLng) {
            static const uint32_t tags[] = {5, 0};
            GEORPDirectionsEventReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasOccurrenceLatLng
{
    [self _readOccurrenceLatLng];
    return _occurrenceLatLng != nil;
}
- (GEOLatLng *)occurrenceLatLng
{
    [self _readOccurrenceLatLng];
    return _occurrenceLatLng;
}
- (void)setOccurrenceLatLng:(GEOLatLng *)v
{
    _flags.read_occurrenceLatLng = 1;
    _flags.wrote_occurrenceLatLng = 1;
    _occurrenceLatLng = v;
}

- (uint32_t)switchedToResponseIndex
{
    return _switchedToResponseIndex;
}
- (void)setSwitchedToResponseIndex:(uint32_t)v
{
    _flags.wrote_switchedToResponseIndex = 1;
    _flags.has_switchedToResponseIndex = 1;
    _switchedToResponseIndex = v;
}
- (void)setHasSwitchedToResponseIndex:(BOOL)f
{
    _flags.wrote_switchedToResponseIndex = 1;
    _flags.has_switchedToResponseIndex = f ? 1 : 0;
}
- (BOOL)hasSwitchedToResponseIndex
{
    return (BOOL)_flags.has_switchedToResponseIndex;
}

- (void)_readSwitchedToRouteId {
    if (_flags.read_switchedToRouteId) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_switchedToRouteId) {
            static const uint32_t tags[] = {8, 0};
            GEORPDirectionsEventReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasSwitchedToRouteId
{
    [self _readSwitchedToRouteId];
    return _switchedToRouteId != nil;
}
- (NSData *)switchedToRouteId
{
    [self _readSwitchedToRouteId];
    return _switchedToRouteId;
}
- (void)setSwitchedToRouteId:(NSData *)v
{
    _flags.read_switchedToRouteId = 1;
    _flags.wrote_switchedToRouteId = 1;
    _switchedToRouteId = v;
}

- (GEOManeuverType)synthesizedStepManeuverType
{
    return _flags.has_synthesizedStepManeuverType ? _synthesizedStepManeuverType : GEOManeuverType_NO_TURN;
}
- (void)setSynthesizedStepManeuverType:(GEOManeuverType)v
{
    _flags.wrote_synthesizedStepManeuverType = 1;
    _flags.has_synthesizedStepManeuverType = 1;
    _synthesizedStepManeuverType = v;
}
- (void)setHasSynthesizedStepManeuverType:(BOOL)f
{
    _flags.wrote_synthesizedStepManeuverType = 1;
    _flags.has_synthesizedStepManeuverType = f ? 1 : 0;
}
- (BOOL)hasSynthesizedStepManeuverType
{
    return (BOOL)_flags.has_synthesizedStepManeuverType;
}
- (NSString *)synthesizedStepManeuverTypeAsString:(GEOManeuverType)value
{
    return GEOManeuverTypeAsString(value);
}
- (GEOManeuverType)StringAsSynthesizedStepManeuverType:(NSString *)str
{
    return StringAsGEOManeuverType(str);
}

- (void)_readSynthesizedStepInstructions {
    if (_flags.read_synthesizedStepInstructions) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_synthesizedStepInstructions) {
            static const uint32_t tags[] = {10, 0};
            GEORPDirectionsEventReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasSynthesizedStepInstructions
{
    [self _readSynthesizedStepInstructions];
    return _synthesizedStepInstructions != nil;
}
- (NSString *)synthesizedStepInstructions
{
    [self _readSynthesizedStepInstructions];
    return _synthesizedStepInstructions;
}
- (void)setSynthesizedStepInstructions:(NSString *)v
{
    _flags.read_synthesizedStepInstructions = 1;
    _flags.wrote_synthesizedStepInstructions = 1;
    _synthesizedStepInstructions = v;
}

- (void)_readErrorDomain {
    if (_flags.read_errorDomain) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_errorDomain) {
            static const uint32_t tags[] = {11, 0};
            GEORPDirectionsEventReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasErrorDomain
{
    [self _readErrorDomain];
    return _errorDomain != nil;
}
- (NSString *)errorDomain
{
    [self _readErrorDomain];
    return _errorDomain;
}
- (void)setErrorDomain:(NSString *)v
{
    _flags.read_errorDomain = 1;
    _flags.wrote_errorDomain = 1;
    _errorDomain = v;
}

- (int64_t)errorCode
{
    return _errorCode;
}
- (void)setErrorCode:(int64_t)v
{
    _flags.wrote_errorCode = 1;
    _flags.has_errorCode = 1;
    _errorCode = v;
}
- (void)setHasErrorCode:(BOOL)f
{
    _flags.wrote_errorCode = 1;
    _flags.has_errorCode = f ? 1 : 0;
}
- (BOOL)hasErrorCode
{
    return (BOOL)_flags.has_errorCode;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_type)
    {
        [dict setObject:GEORPDirectionsEvent_TypeAsString(self->_type) forKey:@"type"];
    }

    if (self->_flags.has_occurrenceResponseIndex)
    {
        [dict setObject:@(self->_occurrenceResponseIndex) forKey:@"occurrence_response_index"];
    }

    {
        NSData * value = self.occurrenceRouteId;
        if (value) {
            [dict setObject:value forKey:@"occurrence_route_id"];
        }
    }

    if (self->_flags.has_occurrenceStepIndex)
    {
        [dict setObject:@(self->_occurrenceStepIndex) forKey:@"occurrence_step_index"];
    }

    {
        GEOLatLng * value = self.occurrenceLatLng;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"occurrence_lat_lng"];
        }
    }

    if (self->_flags.has_switchedToResponseIndex)
    {
        [dict setObject:@(self->_switchedToResponseIndex) forKey:@"switched_to_response_index"];
    }

    {
        NSData * value = self.switchedToRouteId;
        if (value) {
            [dict setObject:value forKey:@"switched_to_route_id"];
        }
    }

    if (self->_flags.has_synthesizedStepManeuverType)
    {
        [dict setObject:GEOManeuverTypeAsString(self->_synthesizedStepManeuverType) forKey:@"synthesized_step_maneuver_type"];
    }

    {
        NSString * value = self.synthesizedStepInstructions;
        if (value) {
            [dict setObject:value forKey:@"synthesized_step_instructions"];
        }
    }

    {
        NSString * value = self.errorDomain;
        if (value) {
            [dict setObject:value forKey:@"error_domain"];
        }
    }

    if (self->_flags.has_errorCode)
    {
        [dict setObject:@(self->_errorCode) forKey:@"error_code"];
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPDirectionsEventReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPDirectionsEventReadAllFrom(__unsafe_unretained GEORPDirectionsEvent *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPDirectionsEventReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPDirectionsEventReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPDirectionsEventReadFrom(__unsafe_unretained GEORPDirectionsEvent *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPDirectionsEventReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPDirectionsEventReadSpecified(__unsafe_unretained GEORPDirectionsEvent *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_occurrenceRouteId
        + self->_flags.read_occurrenceLatLng
        + self->_flags.read_switchedToRouteId
        + self->_flags.read_synthesizedStepInstructions
        + self->_flags.read_errorDomain
        ;
    #define requiredLazyFieldCount 4 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* type */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_type = YES;
                self->_type = PBReaderReadInt32(reader);

            }
            break;
            case 2 /* occurrenceResponseIndex */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_occurrenceResponseIndex = YES;
                self->_occurrenceResponseIndex = PBReaderReadUint32(reader);

            }
            break;
            case 3 /* occurrenceRouteId */:
            {
                if (!shouldParseTag || self->_flags.read_occurrenceRouteId) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_occurrenceRouteId) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSData * new_occurrenceRouteId = PBReaderReadData(reader);
                self->_occurrenceRouteId = new_occurrenceRouteId;

                --tagsRemaining;
            }
            break;
            case 4 /* occurrenceStepIndex */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_occurrenceStepIndex = YES;
                self->_occurrenceStepIndex = PBReaderReadUint32(reader);

            }
            break;
            case 5 /* occurrenceLatLng */:
            {
                if (!shouldParseTag || self->_flags.read_occurrenceLatLng) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_occurrenceLatLng) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOLatLng *new_occurrenceLatLng = [[GEOLatLng alloc] init];
                self->_occurrenceLatLng = new_occurrenceLatLng;
                PBDataReaderMark mark_occurrenceLatLng;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_occurrenceLatLng);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOLatLngReadAllFrom(new_occurrenceLatLng, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_occurrenceLatLng);

                --tagsRemaining;
            }
            break;
            case 7 /* switchedToResponseIndex */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_switchedToResponseIndex = YES;
                self->_switchedToResponseIndex = PBReaderReadUint32(reader);

            }
            break;
            case 8 /* switchedToRouteId */:
            {
                if (!shouldParseTag || self->_flags.read_switchedToRouteId) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_switchedToRouteId) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSData * new_switchedToRouteId = PBReaderReadData(reader);
                self->_switchedToRouteId = new_switchedToRouteId;

                --tagsRemaining;
            }
            break;
            case 9 /* synthesizedStepManeuverType */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_synthesizedStepManeuverType = YES;
                self->_synthesizedStepManeuverType = PBReaderReadInt32(reader);

            }
            break;
            case 10 /* synthesizedStepInstructions */:
            {
                if (!shouldParseTag || self->_flags.read_synthesizedStepInstructions) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_synthesizedStepInstructions) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_synthesizedStepInstructions = PBReaderReadString(reader);
                self->_synthesizedStepInstructions = new_synthesizedStepInstructions;

                --tagsRemaining;
            }
            break;
            case 11 /* errorDomain */:
            {
                if (!shouldParseTag || self->_flags.read_errorDomain) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_errorDomain) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_errorDomain = PBReaderReadString(reader);
                self->_errorDomain = new_errorDomain;

                --tagsRemaining;
            }
            break;
            case 12 /* errorCode */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_errorCode = YES;
                self->_errorCode = PBReaderReadInt64(reader);

            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
            [self->_occurrenceLatLng readAll:YES];
        }
        self->_flags.read_occurrenceRouteId = YES;
        self->_flags.read_occurrenceLatLng = YES;
        self->_flags.read_switchedToRouteId = YES;
        self->_flags.read_synthesizedStepInstructions = YES;
        self->_flags.read_errorDomain = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 3 /* occurrenceRouteId */:
                    self->_flags.read_occurrenceRouteId = YES;
                    break;
                case 5 /* occurrenceLatLng */:
                    self->_flags.read_occurrenceLatLng = YES;
                    break;
                case 8 /* switchedToRouteId */:
                    self->_flags.read_switchedToRouteId = YES;
                    break;
                case 10 /* synthesizedStepInstructions */:
                    self->_flags.read_synthesizedStepInstructions = YES;
                    break;
                case 11 /* errorDomain */:
                    self->_flags.read_errorDomain = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPDirectionsEventIsValid(reader);
}

BOOL GEORPDirectionsEventIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* type */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 2 /* occurrenceResponseIndex */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint32(reader);
                break;
            case 3 /* occurrenceRouteId */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 4 /* occurrenceStepIndex */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint32(reader);
                break;
            case 5 /* occurrenceLatLng */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_occurrenceLatLng;
                    if (!PBReaderPlaceMark(reader, &mark_occurrenceLatLng))
                        returnValue(NO);
                    if (!GEOLatLngIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_occurrenceLatLng);
                }
                break;
            case 7 /* switchedToResponseIndex */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint32(reader);
                break;
            case 8 /* switchedToRouteId */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 9 /* synthesizedStepManeuverType */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 10 /* synthesizedStepInstructions */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 11 /* errorDomain */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 12 /* errorCode */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt64(reader);
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPDirectionsEventReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPDirectionsEventIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* type */
    {
        if (self->_flags.has_type)
        {
            PBDataWriterWriteInt32Field(writer, self->_type, 1);
        }
    }

    /* occurrenceResponseIndex */
    {
        if (self->_flags.has_occurrenceResponseIndex)
        {
            PBDataWriterWriteUint32Field(writer, self->_occurrenceResponseIndex, 2);
        }
    }

    /* occurrenceRouteId */
    {
        if (self->_occurrenceRouteId)
        {
            PBDataWriterWriteDataField(writer, self->_occurrenceRouteId, 3);
        }
    }

    /* occurrenceStepIndex */
    {
        if (self->_flags.has_occurrenceStepIndex)
        {
            PBDataWriterWriteUint32Field(writer, self->_occurrenceStepIndex, 4);
        }
    }

    /* occurrenceLatLng */
    {
        if (self->_occurrenceLatLng != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_occurrenceLatLng, 5);
        }
    }

    /* switchedToResponseIndex */
    {
        if (self->_flags.has_switchedToResponseIndex)
        {
            PBDataWriterWriteUint32Field(writer, self->_switchedToResponseIndex, 7);
        }
    }

    /* switchedToRouteId */
    {
        if (self->_switchedToRouteId)
        {
            PBDataWriterWriteDataField(writer, self->_switchedToRouteId, 8);
        }
    }

    /* synthesizedStepManeuverType */
    {
        if (self->_flags.has_synthesizedStepManeuverType)
        {
            PBDataWriterWriteInt32Field(writer, self->_synthesizedStepManeuverType, 9);
        }
    }

    /* synthesizedStepInstructions */
    {
        if (self->_synthesizedStepInstructions)
        {
            PBDataWriterWriteStringField(writer, self->_synthesizedStepInstructions, 10);
        }
    }

    /* errorDomain */
    {
        if (self->_errorDomain)
        {
            PBDataWriterWriteStringField(writer, self->_errorDomain, 11);
        }
    }

    /* errorCode */
    {
        if (self->_flags.has_errorCode)
        {
            PBDataWriterWriteInt64Field(writer, self->_errorCode, 12);
        }
    }
}

BOOL GEORPDirectionsEventIsDirty(__unsafe_unretained GEORPDirectionsEvent *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_type
        || self->_flags.wrote_occurrenceResponseIndex
        || self->_flags.wrote_occurrenceRouteId
        || self->_flags.read_occurrenceRouteId
        || self->_flags.wrote_occurrenceStepIndex
        || self->_flags.wrote_occurrenceLatLng
        || self->_flags.read_occurrenceLatLng
        || self->_flags.wrote_switchedToResponseIndex
        || self->_flags.wrote_switchedToRouteId
        || self->_flags.read_switchedToRouteId
        || self->_flags.wrote_synthesizedStepManeuverType
        || self->_flags.wrote_synthesizedStepInstructions
        || self->_flags.read_synthesizedStepInstructions
        || self->_flags.wrote_errorDomain
        || self->_flags.read_errorDomain
        || self->_flags.wrote_errorCode
    ;


    return dirty;
}


- (void)copyTo:(GEORPDirectionsEvent *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (self->_flags.has_type)
    {
        other->_type = _type;
        other->_flags.has_type = YES;
    }
    if (self->_flags.has_occurrenceResponseIndex)
    {
        other->_occurrenceResponseIndex = _occurrenceResponseIndex;
        other->_flags.has_occurrenceResponseIndex = YES;
    }
    if (_occurrenceRouteId)
    {
        other.occurrenceRouteId = _occurrenceRouteId;
    }
    if (self->_flags.has_occurrenceStepIndex)
    {
        other->_occurrenceStepIndex = _occurrenceStepIndex;
        other->_flags.has_occurrenceStepIndex = YES;
    }
    if (_occurrenceLatLng)
    {
        other.occurrenceLatLng = _occurrenceLatLng;
    }
    if (self->_flags.has_switchedToResponseIndex)
    {
        other->_switchedToResponseIndex = _switchedToResponseIndex;
        other->_flags.has_switchedToResponseIndex = YES;
    }
    if (_switchedToRouteId)
    {
        other.switchedToRouteId = _switchedToRouteId;
    }
    if (self->_flags.has_synthesizedStepManeuverType)
    {
        other->_synthesizedStepManeuverType = _synthesizedStepManeuverType;
        other->_flags.has_synthesizedStepManeuverType = YES;
    }
    if (_synthesizedStepInstructions)
    {
        other.synthesizedStepInstructions = _synthesizedStepInstructions;
    }
    if (_errorDomain)
    {
        other.errorDomain = _errorDomain;
    }
    if (self->_flags.has_errorCode)
    {
        other->_errorCode = _errorCode;
        other->_flags.has_errorCode = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPDirectionsEvent *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_type
                || _flags.wrote_occurrenceResponseIndex
                || _flags.wrote_occurrenceRouteId
                || _flags.wrote_occurrenceStepIndex
                || _flags.wrote_occurrenceLatLng
                || _flags.wrote_switchedToResponseIndex
                || _flags.wrote_switchedToRouteId
                || _flags.wrote_synthesizedStepManeuverType
                || _flags.wrote_synthesizedStepInstructions
                || _flags.wrote_errorDomain
                || _flags.wrote_errorCode
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPDirectionsEventReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    if (self->_flags.has_type)
    {
        copy->_type = _type;
        copy->_flags.has_type = YES;
    }
    if (self->_flags.has_occurrenceResponseIndex)
    {
        copy->_occurrenceResponseIndex = _occurrenceResponseIndex;
        copy->_flags.has_occurrenceResponseIndex = YES;
    }
    copy->_occurrenceRouteId = [_occurrenceRouteId copyWithZone:zone];
    if (self->_flags.has_occurrenceStepIndex)
    {
        copy->_occurrenceStepIndex = _occurrenceStepIndex;
        copy->_flags.has_occurrenceStepIndex = YES;
    }
    copy->_occurrenceLatLng = [_occurrenceLatLng copyWithZone:zone];
    if (self->_flags.has_switchedToResponseIndex)
    {
        copy->_switchedToResponseIndex = _switchedToResponseIndex;
        copy->_flags.has_switchedToResponseIndex = YES;
    }
    copy->_switchedToRouteId = [_switchedToRouteId copyWithZone:zone];
    if (self->_flags.has_synthesizedStepManeuverType)
    {
        copy->_synthesizedStepManeuverType = _synthesizedStepManeuverType;
        copy->_flags.has_synthesizedStepManeuverType = YES;
    }
    copy->_synthesizedStepInstructions = [_synthesizedStepInstructions copyWithZone:zone];
    copy->_errorDomain = [_errorDomain copyWithZone:zone];
    if (self->_flags.has_errorCode)
    {
        copy->_errorCode = _errorCode;
        copy->_flags.has_errorCode = YES;
    }
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPDirectionsEvent *other = (GEORPDirectionsEvent *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_type && other->_flags.has_type && self->_type == other->_type) || (!self->_flags.has_type && !other->_flags.has_type))
    &&
    ((self->_flags.has_occurrenceResponseIndex && other->_flags.has_occurrenceResponseIndex && self->_occurrenceResponseIndex == other->_occurrenceResponseIndex) || (!self->_flags.has_occurrenceResponseIndex && !other->_flags.has_occurrenceResponseIndex))
    &&
    ((!self->_occurrenceRouteId && !other->_occurrenceRouteId) || [self->_occurrenceRouteId isEqual:other->_occurrenceRouteId])
    &&
    ((self->_flags.has_occurrenceStepIndex && other->_flags.has_occurrenceStepIndex && self->_occurrenceStepIndex == other->_occurrenceStepIndex) || (!self->_flags.has_occurrenceStepIndex && !other->_flags.has_occurrenceStepIndex))
    &&
    ((!self->_occurrenceLatLng && !other->_occurrenceLatLng) || [self->_occurrenceLatLng isEqual:other->_occurrenceLatLng])
    &&
    ((self->_flags.has_switchedToResponseIndex && other->_flags.has_switchedToResponseIndex && self->_switchedToResponseIndex == other->_switchedToResponseIndex) || (!self->_flags.has_switchedToResponseIndex && !other->_flags.has_switchedToResponseIndex))
    &&
    ((!self->_switchedToRouteId && !other->_switchedToRouteId) || [self->_switchedToRouteId isEqual:other->_switchedToRouteId])
    &&
    ((self->_flags.has_synthesizedStepManeuverType && other->_flags.has_synthesizedStepManeuverType && self->_synthesizedStepManeuverType == other->_synthesizedStepManeuverType) || (!self->_flags.has_synthesizedStepManeuverType && !other->_flags.has_synthesizedStepManeuverType))
    &&
    ((!self->_synthesizedStepInstructions && !other->_synthesizedStepInstructions) || [self->_synthesizedStepInstructions isEqual:other->_synthesizedStepInstructions])
    &&
    ((!self->_errorDomain && !other->_errorDomain) || [self->_errorDomain isEqual:other->_errorDomain])
    &&
    ((self->_flags.has_errorCode && other->_flags.has_errorCode && self->_errorCode == other->_errorCode) || (!self->_flags.has_errorCode && !other->_flags.has_errorCode))
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_type ? PBHashInt((NSUInteger)self->_type) : 0)
    ^
    (self->_flags.has_occurrenceResponseIndex ? PBHashInt((NSUInteger)self->_occurrenceResponseIndex) : 0)
    ^
    [self->_occurrenceRouteId hash]
    ^
    (self->_flags.has_occurrenceStepIndex ? PBHashInt((NSUInteger)self->_occurrenceStepIndex) : 0)
    ^
    [self->_occurrenceLatLng hash]
    ^
    (self->_flags.has_switchedToResponseIndex ? PBHashInt((NSUInteger)self->_switchedToResponseIndex) : 0)
    ^
    [self->_switchedToRouteId hash]
    ^
    (self->_flags.has_synthesizedStepManeuverType ? PBHashInt((NSUInteger)self->_synthesizedStepManeuverType) : 0)
    ^
    [self->_synthesizedStepInstructions hash]
    ^
    [self->_errorDomain hash]
    ^
    (self->_flags.has_errorCode ? PBHashInt((NSUInteger)self->_errorCode) : 0)
    ;
}

- (void)mergeFrom:(GEORPDirectionsEvent *)other
{
    [other readAll:NO];
    if (other->_flags.has_type)
    {
        self->_type = other->_type;
        self->_flags.has_type = 1;
    }
    if (other->_flags.has_occurrenceResponseIndex)
    {
        self->_occurrenceResponseIndex = other->_occurrenceResponseIndex;
        self->_flags.has_occurrenceResponseIndex = 1;
    }
    if (other->_occurrenceRouteId)
    {
        [self setOccurrenceRouteId:other->_occurrenceRouteId];
    }
    if (other->_flags.has_occurrenceStepIndex)
    {
        self->_occurrenceStepIndex = other->_occurrenceStepIndex;
        self->_flags.has_occurrenceStepIndex = 1;
    }
    if (self->_occurrenceLatLng && other->_occurrenceLatLng)
    {
        [self->_occurrenceLatLng mergeFrom:other->_occurrenceLatLng];
    }
    else if (!self->_occurrenceLatLng && other->_occurrenceLatLng)
    {
        [self setOccurrenceLatLng:other->_occurrenceLatLng];
    }
    if (other->_flags.has_switchedToResponseIndex)
    {
        self->_switchedToResponseIndex = other->_switchedToResponseIndex;
        self->_flags.has_switchedToResponseIndex = 1;
    }
    if (other->_switchedToRouteId)
    {
        [self setSwitchedToRouteId:other->_switchedToRouteId];
    }
    if (other->_flags.has_synthesizedStepManeuverType)
    {
        self->_synthesizedStepManeuverType = other->_synthesizedStepManeuverType;
        self->_flags.has_synthesizedStepManeuverType = 1;
    }
    if (other->_synthesizedStepInstructions)
    {
        [self setSynthesizedStepInstructions:other->_synthesizedStepInstructions];
    }
    if (other->_errorDomain)
    {
        [self setErrorDomain:other->_errorDomain];
    }
    if (other->_flags.has_errorCode)
    {
        self->_errorCode = other->_errorCode;
        self->_flags.has_errorCode = 1;
    }
}


@end


