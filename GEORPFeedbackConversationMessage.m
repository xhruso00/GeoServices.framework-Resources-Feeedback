// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPFeedbackConversationMessage.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEORPFeedbackSurveyResponse.h>
#import <GeoServices/GEORPPostedBy.h>
#import <GeoServices/GEORPTimestamp.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPFeedbackConversationMessage

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readUuid {
    if (_flags.read_uuid) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_uuid) {
            static const uint32_t tags[] = {1, 0};
            GEORPFeedbackConversationMessageReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasUuid
{
    [self _readUuid];
    return _uuid != nil;
}
- (NSString *)uuid
{
    [self _readUuid];
    return _uuid;
}
- (void)setUuid:(NSString *)v
{
    _flags.read_uuid = 1;
    _flags.wrote_uuid = 1;
    _uuid = v;
}

- (void)_readPostedBy {
    if (_flags.read_postedBy) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_postedBy) {
            static const uint32_t tags[] = {2, 0};
            GEORPFeedbackConversationMessageReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasPostedBy
{
    [self _readPostedBy];
    return _postedBy != nil;
}
- (GEORPPostedBy *)postedBy
{
    [self _readPostedBy];
    return _postedBy;
}
- (void)setPostedBy:(GEORPPostedBy *)v
{
    _flags.read_postedBy = 1;
    _flags.wrote_postedBy = 1;
    _postedBy = v;
}

- (void)_readPostedAt {
    if (_flags.read_postedAt) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_postedAt) {
            static const uint32_t tags[] = {3, 0};
            GEORPFeedbackConversationMessageReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasPostedAt
{
    [self _readPostedAt];
    return _postedAt != nil;
}
- (GEORPTimestamp *)postedAt
{
    [self _readPostedAt];
    return _postedAt;
}
- (void)setPostedAt:(GEORPTimestamp *)v
{
    _flags.read_postedAt = 1;
    _flags.wrote_postedAt = 1;
    _postedAt = v;
}

- (void)_readComments {
    if (_flags.read_comments) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_comments) {
            static const uint32_t tags[] = {4, 0};
            GEORPFeedbackConversationMessageReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasComments
{
    [self _readComments];
    return _comments != nil;
}
- (NSString *)comments
{
    [self _readComments];
    return _comments;
}
- (void)setComments:(NSString *)v
{
    _flags.read_comments = 1;
    _flags.wrote_comments = 1;
    _comments = v;
}

- (void)_readSurveyResponses {
    if (_flags.read_surveyResponses) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_surveyResponses) {
            static const uint32_t tags[] = {5, 0};
            GEORPFeedbackConversationMessageReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPFeedbackSurveyResponse *> *)surveyResponses
{
    [self _readSurveyResponses];
    return _surveyResponses;
}
- (void)setSurveyResponses:(NSMutableArray<GEORPFeedbackSurveyResponse *> *)v
{
    _flags.read_surveyResponses = 1;
    _flags.wrote_surveyResponses = 1;
    _surveyResponses = v;
}
- (void)clearSurveyResponses
{
    _flags.read_surveyResponses = 1;
    _flags.wrote_surveyResponses = 1;
    [_surveyResponses removeAllObjects];
}
- (void)addSurveyResponse:(GEORPFeedbackSurveyResponse *)i
{
    [self _readSurveyResponses];
    [self _addNoFlagsSurveyResponse:i];
    _flags.read_surveyResponses = 1;
    _flags.wrote_surveyResponses = 1;
}
- (void)_addNoFlagsSurveyResponse:(GEORPFeedbackSurveyResponse *)i
{
    if (!_surveyResponses)
    {
        _surveyResponses = [[NSMutableArray alloc] init];
    }
    [_surveyResponses addObject:i];
}
- (NSUInteger)surveyResponsesCount
{
    [self _readSurveyResponses];
    return [_surveyResponses count];
}
- (GEORPFeedbackSurveyResponse *)surveyResponseAtIndex:(NSUInteger)idx
{
    [self _readSurveyResponses];
    return [_surveyResponses objectAtIndex:idx];
}
+ (Class)surveyResponseType
{
    return [GEORPFeedbackSurveyResponse class];
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        NSString * value = self.uuid;
        if (value) {
            [dict setObject:value forKey:@"uuid"];
        }
    }

    {
        GEORPPostedBy * value = self.postedBy;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"posted_by"];
        }
    }

    {
        GEORPTimestamp * value = self.postedAt;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"posted_at"];
        }
    }

    {
        NSString * value = self.comments;
        if (value) {
            [dict setObject:value forKey:@"comments"];
        }
    }

    if ([self->_surveyResponses count])
    {
        NSMutableArray *surveyResponsesDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_surveyResponses count]];
        for (GEORPFeedbackSurveyResponse * i_surveyResponse in self->_surveyResponses)
        {
            [surveyResponsesDictReprs addObject:[i_surveyResponse dictionaryRepresentation]];
        }
        [dict setObject:surveyResponsesDictReprs forKey:@"survey_response"];
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPFeedbackConversationMessageReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPFeedbackConversationMessageReadAllFrom(__unsafe_unretained GEORPFeedbackConversationMessage *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPFeedbackConversationMessageReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPFeedbackConversationMessageReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPFeedbackConversationMessageReadFrom(__unsafe_unretained GEORPFeedbackConversationMessage *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPFeedbackConversationMessageReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPFeedbackConversationMessageReadSpecified(__unsafe_unretained GEORPFeedbackConversationMessage *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_uuid
        + self->_flags.read_postedBy
        + self->_flags.read_postedAt
        + self->_flags.read_comments
        + self->_flags.read_surveyResponses
        + self->_flags.read_unknownFields
        ;
    #define requiredLazyFieldCount 4 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL shouldParseUnknown = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            case TAG_UNKNOWN_FIELDS:
                shouldParseUnknown = YES;
                ++readLazyCount;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
        shouldParseUnknown = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !(readAll || shouldParseUnknown);
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* uuid */:
            {
                if (!shouldParseTag || self->_flags.read_uuid) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_uuid) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_uuid = PBReaderReadString(reader);
                self->_uuid = new_uuid;

                --tagsRemaining;
            }
            break;
            case 2 /* postedBy */:
            {
                if (!shouldParseTag || self->_flags.read_postedBy) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_postedBy) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPPostedBy *new_postedBy = [[GEORPPostedBy alloc] init];
                self->_postedBy = new_postedBy;
                PBDataReaderMark mark_postedBy;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_postedBy);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPPostedByReadAllFrom(new_postedBy, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_postedBy);

                --tagsRemaining;
            }
            break;
            case 3 /* postedAt */:
            {
                if (!shouldParseTag || self->_flags.read_postedAt) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_postedAt) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPTimestamp *new_postedAt = [[GEORPTimestamp alloc] init];
                self->_postedAt = new_postedAt;
                PBDataReaderMark mark_postedAt;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_postedAt);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPTimestampReadAllFrom(new_postedAt, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_postedAt);

                --tagsRemaining;
            }
            break;
            case 4 /* comments */:
            {
                if (!shouldParseTag || self->_flags.read_comments) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_comments) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_comments = PBReaderReadString(reader);
                self->_comments = new_comments;

                --tagsRemaining;
            }
            break;
            case 5 /* surveyResponses */:
            {
                if (!shouldParseTag || self->_flags.read_surveyResponses) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPFeedbackSurveyResponse *new_surveyResponse = [[GEORPFeedbackSurveyResponse alloc] init];
                [self _addNoFlagsSurveyResponse:new_surveyResponse];
                PBDataReaderMark mark_surveyResponse;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_surveyResponse);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackSurveyResponseReadAllFrom(new_surveyResponse, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_surveyResponse);

            }
            break;
            default:
                if (!shouldParseUnknown || self->_flags.read_unknownFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }

    if (shouldParseUnknown) {
        self->_flags.read_unknownFields = YES;
    }

    if (readAll) {
        if (recursively) {
            [self->_postedBy readAll:YES];
            [self->_postedAt readAll:YES];
            for (GEORPFeedbackSurveyResponse * i in self->_surveyResponses)
                [i readAll:YES];
        }
        self->_flags.read_uuid = YES;
        self->_flags.read_postedBy = YES;
        self->_flags.read_postedAt = YES;
        self->_flags.read_comments = YES;
        self->_flags.read_surveyResponses = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* uuid */:
                    self->_flags.read_uuid = YES;
                    break;
                case 2 /* postedBy */:
                    self->_flags.read_postedBy = YES;
                    break;
                case 3 /* postedAt */:
                    self->_flags.read_postedAt = YES;
                    break;
                case 4 /* comments */:
                    self->_flags.read_comments = YES;
                    break;
                case 5 /* surveyResponses */:
                    self->_flags.read_surveyResponses = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPFeedbackConversationMessageIsValid(reader);
}

BOOL GEORPFeedbackConversationMessageIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* uuid */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 2 /* postedBy */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_postedBy;
                    if (!PBReaderPlaceMark(reader, &mark_postedBy))
                        returnValue(NO);
                    if (!GEORPPostedByIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_postedBy);
                }
                break;
            case 3 /* postedAt */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_postedAt;
                    if (!PBReaderPlaceMark(reader, &mark_postedAt))
                        returnValue(NO);
                    if (!GEORPTimestampIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_postedAt);
                }
                break;
            case 4 /* comments */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 5 /* surveyResponses */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_surveyResponse;
                    if (!PBReaderPlaceMark(reader, &mark_surveyResponse))
                        returnValue(NO);
                    if (!GEORPFeedbackSurveyResponseIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_surveyResponse);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPFeedbackConversationMessageReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPFeedbackConversationMessageIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* uuid */
    {
        if (self->_uuid)
        {
            PBDataWriterWriteStringField(writer, self->_uuid, 1);
        }
    }

    /* postedBy */
    {
        if (self->_postedBy != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_postedBy, 2);
        }
    }

    /* postedAt */
    {
        if (self->_postedAt != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_postedAt, 3);
        }
    }

    /* comments */
    {
        if (self->_comments)
        {
            PBDataWriterWriteStringField(writer, self->_comments, 4);
        }
    }

    /* surveyResponses */
    {
        for (GEORPFeedbackSurveyResponse * i_surveyResponse in self->_surveyResponses)
        {
            PBDataWriterWriteSubmessage(writer, i_surveyResponse, 5);
        }

    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}

BOOL GEORPFeedbackConversationMessageIsDirty(__unsafe_unretained GEORPFeedbackConversationMessage *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_uuid
        || self->_flags.read_uuid
        || self->_flags.wrote_postedBy
        || (self->_flags.read_postedBy && GEORPPostedByIsDirty(self->_postedBy))
        || self->_flags.wrote_postedAt
        || self->_flags.read_postedAt
        || self->_flags.wrote_comments
        || self->_flags.read_comments
        || self->_flags.wrote_surveyResponses
        || self->_flags.wrote_unknownFields
    ;

    if (!dirty) {

            if (self->_flags.read_surveyResponses) {
                for (GEORPFeedbackSurveyResponse *i in self->_surveyResponses) {
                    if (GEORPFeedbackSurveyResponseIsDirty(i)) {
                        return YES;
                    }
                }
            }
    }

    return dirty;
}


- (void)copyTo:(GEORPFeedbackConversationMessage *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_uuid)
    {
        other.uuid = _uuid;
    }
    if (_postedBy)
    {
        other.postedBy = _postedBy;
    }
    if (_postedAt)
    {
        other.postedAt = _postedAt;
    }
    if (_comments)
    {
        other.comments = _comments;
    }
    if ([self surveyResponsesCount])
    {
        [other clearSurveyResponses];
        NSUInteger surveyResponsesCnt = [self surveyResponsesCount];
        for (NSUInteger i = 0; i < surveyResponsesCnt; i++)
        {
            [other addSurveyResponse:[self surveyResponseAtIndex:i]];
        }
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPFeedbackConversationMessage *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_uuid
                || _flags.wrote_postedBy
                || _flags.wrote_postedAt
                || _flags.wrote_comments
                || _flags.wrote_surveyResponses
                || _flags.wrote_unknownFields
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPFeedbackConversationMessageReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_uuid = [_uuid copyWithZone:zone];
    copy->_postedBy = [_postedBy copyWithZone:zone];
    copy->_postedAt = [_postedAt copyWithZone:zone];
    copy->_comments = [_comments copyWithZone:zone];
    for (GEORPFeedbackSurveyResponse * v in _surveyResponses)
    {
        GEORPFeedbackSurveyResponse * vCopy = [v copyWithZone:zone];
        [copy addSurveyResponse:vCopy];
    }
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPFeedbackConversationMessage *other = (GEORPFeedbackConversationMessage *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_uuid && !other->_uuid) || [self->_uuid isEqual:other->_uuid])
    &&
    ((!self->_postedBy && !other->_postedBy) || [self->_postedBy isEqual:other->_postedBy])
    &&
    ((!self->_postedAt && !other->_postedAt) || [self->_postedAt isEqual:other->_postedAt])
    &&
    ((!self->_comments && !other->_comments) || [self->_comments isEqual:other->_comments])
    &&
    ((!self->_surveyResponses && !other->_surveyResponses) || [self->_surveyResponses isEqual:other->_surveyResponses])

    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_uuid hash]
    ^
    [self->_postedBy hash]
    ^
    [self->_postedAt hash]
    ^
    [self->_comments hash]
    ^
    [self->_surveyResponses hash]
    ;
}

- (void)mergeFrom:(GEORPFeedbackConversationMessage *)other
{
    [other readAll:NO];
    if (other->_uuid)
    {
        [self setUuid:other->_uuid];
    }
    if (self->_postedBy && other->_postedBy)
    {
        [self->_postedBy mergeFrom:other->_postedBy];
    }
    else if (!self->_postedBy && other->_postedBy)
    {
        [self setPostedBy:other->_postedBy];
    }
    if (self->_postedAt && other->_postedAt)
    {
        [self->_postedAt mergeFrom:other->_postedAt];
    }
    else if (!self->_postedAt && other->_postedAt)
    {
        [self setPostedAt:other->_postedAt];
    }
    if (other->_comments)
    {
        [self setComments:other->_comments];
    }
    for (GEORPFeedbackSurveyResponse * iter_surveyResponses in other->_surveyResponses)
    {
        [self addSurveyResponse:iter_surveyResponses];
    }
}

- (PBUnknownFields *)unknownFields
{
    if (_flags.read_unknownFields) return _unknownFields;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return _unknownFields;
    @synchronized(reader) {
        if (!_flags.read_unknownFields) {
            static const uint32_t tags[] = {TAG_UNKNOWN_FIELDS, 0};
            GEORPFeedbackConversationMessageReadSpecified(self, reader, tags);
        }
    }
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _flags.read_unknownFields = 1;
    _flags.wrote_unknownFields = 1;
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
    [_postedBy clearUnknownFields:YES];
    [_postedAt clearUnknownFields:YES];
    for (GEORPFeedbackSurveyResponse * v in self.surveyResponses) {
        [v clearUnknownFields:YES];
    }
}

@end


