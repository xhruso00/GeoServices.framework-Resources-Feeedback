// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPFeedbackImageUploadParameters.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#import <GeoServices/GEORPPhotoMetadata.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPFeedbackImageUploadParameters


- (NSMutableArray<GEORPPhotoMetadata *> *)images
{
    return _images;
}
- (void)setImages:(NSMutableArray<GEORPPhotoMetadata *> *)v
{
    _images = v;
}
- (void)clearImages
{
    [_images removeAllObjects];
}
- (void)addImage:(GEORPPhotoMetadata *)i
{
    if (!_images)
    {
        _images = [[NSMutableArray alloc] init];
    }
    [_images addObject:i];
}
- (NSUInteger)imagesCount
{
    return [_images count];
}
- (GEORPPhotoMetadata *)imageAtIndex:(NSUInteger)idx
{
    return [_images objectAtIndex:idx];
}
+ (Class)imageType
{
    return [GEORPPhotoMetadata class];
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if ([self->_images count])
    {
        NSMutableArray *imagesDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_images count]];
        for (GEORPPhotoMetadata * i_image in self->_images)
        {
            [imagesDictReprs addObject:[i_image dictionaryRepresentation]];
        }
        [dict setObject:imagesDictReprs forKey:@"image"];
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively { /* noop */ }
BOOL GEORPFeedbackImageUploadParametersReadAllFrom(__unsafe_unretained GEORPFeedbackImageUploadParameters *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};

    @synchronized(reader) {
        BOOL result = GEORPFeedbackImageUploadParametersReadSpecified(self, reader, recursively ? recursiveTag : nil);
        return result;
    }
}
BOOL GEORPFeedbackImageUploadParametersReadFrom(__unsafe_unretained GEORPFeedbackImageUploadParameters *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPFeedbackImageUploadParametersReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPFeedbackImageUploadParametersReadSpecified(__unsafe_unretained GEORPFeedbackImageUploadParameters *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    #define shouldParseUnknown YES
    __attribute__((unused)) BOOL const recursively = (tags != nil && tags[0] == TAG_PARSE_ALL_RECURSIVE);
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
    #define shouldParseTag YES

        switch (tag) {

            case 1 /* images */:
            {
                GEORPPhotoMetadata *new_image = [[GEORPPhotoMetadata alloc] init];
                [self addImage:new_image];
                PBDataReaderMark mark_image;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_image);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPPhotoMetadataReadAllFrom(new_image, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_image);

            }
            break;
            default:
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
    }



    #undef shouldParseTag
    #undef shouldParseUnknown
    #undef recursively
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPFeedbackImageUploadParametersIsValid(reader);
}

BOOL GEORPFeedbackImageUploadParametersIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* images */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_image;
                    if (!PBReaderPlaceMark(reader, &mark_image))
                        returnValue(NO);
                    if (!GEORPPhotoMetadataIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_image);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPFeedbackImageUploadParametersReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{

    /* images */
    {
        for (GEORPPhotoMetadata * i_image in self->_images)
        {
            PBDataWriterWriteSubmessage(writer, i_image, 1);
        }

    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}



- (void)copyTo:(GEORPFeedbackImageUploadParameters *)other
{
    [self readAll:NO];
    if ([self imagesCount])
    {
        [other clearImages];
        NSUInteger imagesCnt = [self imagesCount];
        for (NSUInteger i = 0; i < imagesCnt; i++)
        {
            [other addImage:[self imageAtIndex:i]];
        }
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPFeedbackImageUploadParameters *copy = [[[self class] allocWithZone:zone] init];
    for (GEORPPhotoMetadata * v in _images)
    {
        GEORPPhotoMetadata * vCopy = [v copyWithZone:zone];
        [copy addImage:vCopy];
    }
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPFeedbackImageUploadParameters *other = (GEORPFeedbackImageUploadParameters *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_images && !other->_images) || [self->_images isEqual:other->_images])

    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_images hash]
    ;
}

- (void)mergeFrom:(GEORPFeedbackImageUploadParameters *)other
{
    [other readAll:NO];
    for (GEORPPhotoMetadata * iter_images in other->_images)
    {
        [self addImage:iter_images];
    }
}

- (PBUnknownFields *)unknownFields
{
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
    for (GEORPPhotoMetadata * v in self.images) {
        [v clearUnknownFields:YES];
    }
}

@end


