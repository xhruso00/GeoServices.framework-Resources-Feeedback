// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPTransitPoiCorrections.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEORPAccessPointCorrections.h>
#import <GeoServices/GEORPAmenityCorrections.h>
#import <GeoServices/GEORPCorrectedCoordinate.h>
#import <GeoServices/GEORPFeedbackBusinessHours.h>
#import <GeoServices/GEORPMapLocation.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPTransitPoiCorrections

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readName {
    if (_flags.read_name) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_name) {
            static const uint32_t tags[] = {1, 0};
            GEORPTransitPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasName
{
    [self _readName];
    return _name != nil;
}
- (NSString *)name
{
    [self _readName];
    return _name;
}
- (void)setName:(NSString *)v
{
    _flags.read_name = 1;
    _flags.wrote_name = 1;
    _name = v;
}

- (void)_readAmenity {
    if (_flags.read_amenity) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_amenity) {
            static const uint32_t tags[] = {2, 0};
            GEORPTransitPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasAmenity
{
    [self _readAmenity];
    return _amenity != nil;
}
- (GEORPAmenityCorrections *)amenity
{
    [self _readAmenity];
    return _amenity;
}
- (void)setAmenity:(GEORPAmenityCorrections *)v
{
    _flags.read_amenity = 1;
    _flags.wrote_amenity = 1;
    _amenity = v;
}

- (void)_readBusinessHours {
    if (_flags.read_businessHours) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_businessHours) {
            static const uint32_t tags[] = {3, 0};
            GEORPTransitPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPFeedbackBusinessHours *> *)businessHours
{
    [self _readBusinessHours];
    return _businessHours;
}
- (void)setBusinessHours:(NSMutableArray<GEORPFeedbackBusinessHours *> *)v
{
    _flags.read_businessHours = 1;
    _flags.wrote_businessHours = 1;
    _businessHours = v;
}
- (void)clearBusinessHours
{
    _flags.read_businessHours = 1;
    _flags.wrote_businessHours = 1;
    [_businessHours removeAllObjects];
}
- (void)addBusinessHours:(GEORPFeedbackBusinessHours *)i
{
    [self _readBusinessHours];
    [self _addNoFlagsBusinessHours:i];
    _flags.read_businessHours = 1;
    _flags.wrote_businessHours = 1;
}
- (void)_addNoFlagsBusinessHours:(GEORPFeedbackBusinessHours *)i
{
    if (!_businessHours)
    {
        _businessHours = [[NSMutableArray alloc] init];
    }
    [_businessHours addObject:i];
}
- (NSUInteger)businessHoursCount
{
    [self _readBusinessHours];
    return [_businessHours count];
}
- (GEORPFeedbackBusinessHours *)businessHoursAtIndex:(NSUInteger)idx
{
    [self _readBusinessHours];
    return [_businessHours objectAtIndex:idx];
}
+ (Class)businessHoursType
{
    return [GEORPFeedbackBusinessHours class];
}

- (void)_readCoordinate {
    if (_flags.read_coordinate) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_coordinate) {
            static const uint32_t tags[] = {4, 0};
            GEORPTransitPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCoordinate
{
    [self _readCoordinate];
    return _coordinate != nil;
}
- (GEORPCorrectedCoordinate *)coordinate
{
    [self _readCoordinate];
    return _coordinate;
}
- (void)setCoordinate:(GEORPCorrectedCoordinate *)v
{
    _flags.read_coordinate = 1;
    _flags.wrote_coordinate = 1;
    _coordinate = v;
}

- (void)_readMapLocation {
    if (_flags.read_mapLocation) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_mapLocation) {
            static const uint32_t tags[] = {5, 0};
            GEORPTransitPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasMapLocation
{
    [self _readMapLocation];
    return _mapLocation != nil;
}
- (GEORPMapLocation *)mapLocation
{
    [self _readMapLocation];
    return _mapLocation;
}
- (void)setMapLocation:(GEORPMapLocation *)v
{
    _flags.read_mapLocation = 1;
    _flags.wrote_mapLocation = 1;
    _mapLocation = v;
}

- (BOOL)lineShapeIncorrect
{
    return _lineShapeIncorrect;
}
- (void)setLineShapeIncorrect:(BOOL)v
{
    _flags.wrote_lineShapeIncorrect = 1;
    _flags.has_lineShapeIncorrect = 1;
    _lineShapeIncorrect = v;
}
- (void)setHasLineShapeIncorrect:(BOOL)f
{
    _flags.wrote_lineShapeIncorrect = 1;
    _flags.has_lineShapeIncorrect = f ? 1 : 0;
}
- (BOOL)hasLineShapeIncorrect
{
    return (BOOL)_flags.has_lineShapeIncorrect;
}

- (BOOL)lineScheduleDelay
{
    return _lineScheduleDelay;
}
- (void)setLineScheduleDelay:(BOOL)v
{
    _flags.wrote_lineScheduleDelay = 1;
    _flags.has_lineScheduleDelay = 1;
    _lineScheduleDelay = v;
}
- (void)setHasLineScheduleDelay:(BOOL)f
{
    _flags.wrote_lineScheduleDelay = 1;
    _flags.has_lineScheduleDelay = f ? 1 : 0;
}
- (BOOL)hasLineScheduleDelay
{
    return (BOOL)_flags.has_lineScheduleDelay;
}

- (void)_readAccessPoint {
    if (_flags.read_accessPoint) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_accessPoint) {
            static const uint32_t tags[] = {8, 0};
            GEORPTransitPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasAccessPoint
{
    [self _readAccessPoint];
    return _accessPoint != nil;
}
- (GEORPAccessPointCorrections *)accessPoint
{
    [self _readAccessPoint];
    return _accessPoint;
}
- (void)setAccessPoint:(GEORPAccessPointCorrections *)v
{
    _flags.read_accessPoint = 1;
    _flags.wrote_accessPoint = 1;
    _accessPoint = v;
}

- (void)_readOriginalName {
    if (_flags.read_originalName) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_originalName) {
            static const uint32_t tags[] = {9, 0};
            GEORPTransitPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasOriginalName
{
    [self _readOriginalName];
    return _originalName != nil;
}
- (NSString *)originalName
{
    [self _readOriginalName];
    return _originalName;
}
- (void)setOriginalName:(NSString *)v
{
    _flags.read_originalName = 1;
    _flags.wrote_originalName = 1;
    _originalName = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        NSString * value = self.name;
        if (value) {
            [dict setObject:value forKey:@"name"];
        }
    }

    {
        GEORPAmenityCorrections * value = self.amenity;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"amenity"];
        }
    }

    if ([self->_businessHours count])
    {
        NSMutableArray *businessHoursDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_businessHours count]];
        for (GEORPFeedbackBusinessHours * i_businessHours in self->_businessHours)
        {
            [businessHoursDictReprs addObject:[i_businessHours dictionaryRepresentation]];
        }
        [dict setObject:businessHoursDictReprs forKey:@"business_hours"];
    }

    {
        GEORPCorrectedCoordinate * value = self.coordinate;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"coordinate"];
        }
    }

    {
        GEORPMapLocation * value = self.mapLocation;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"map_location"];
        }
    }

    if (self->_flags.has_lineShapeIncorrect)
    {
        [dict setObject:@(self->_lineShapeIncorrect) forKey:@"line_shape_incorrect"];
    }

    if (self->_flags.has_lineScheduleDelay)
    {
        [dict setObject:@(self->_lineScheduleDelay) forKey:@"line_schedule_delay"];
    }

    {
        GEORPAccessPointCorrections * value = self.accessPoint;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"access_point"];
        }
    }

    {
        NSString * value = self.originalName;
        if (value) {
            [dict setObject:value forKey:@"original_name"];
        }
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPTransitPoiCorrectionsReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPTransitPoiCorrectionsReadAllFrom(__unsafe_unretained GEORPTransitPoiCorrections *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPTransitPoiCorrectionsReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPTransitPoiCorrectionsReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPTransitPoiCorrectionsReadFrom(__unsafe_unretained GEORPTransitPoiCorrections *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPTransitPoiCorrectionsReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPTransitPoiCorrectionsReadSpecified(__unsafe_unretained GEORPTransitPoiCorrections *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_name
        + self->_flags.read_amenity
        + self->_flags.read_businessHours
        + self->_flags.read_coordinate
        + self->_flags.read_mapLocation
        + self->_flags.read_accessPoint
        + self->_flags.read_originalName
        + self->_flags.read_unknownFields
        ;
    #define requiredLazyFieldCount 5 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL shouldParseUnknown = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            case TAG_UNKNOWN_FIELDS:
                shouldParseUnknown = YES;
                ++readLazyCount;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
        shouldParseUnknown = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !(readAll || shouldParseUnknown);
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* name */:
            {
                if (!shouldParseTag || self->_flags.read_name) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_name) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_name = PBReaderReadString(reader);
                self->_name = new_name;

                --tagsRemaining;
            }
            break;
            case 2 /* amenity */:
            {
                if (!shouldParseTag || self->_flags.read_amenity) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_amenity) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPAmenityCorrections *new_amenity = [[GEORPAmenityCorrections alloc] init];
                self->_amenity = new_amenity;
                PBDataReaderMark mark_amenity;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_amenity);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPAmenityCorrectionsReadAllFrom(new_amenity, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_amenity);

                --tagsRemaining;
            }
            break;
            case 3 /* businessHours */:
            {
                if (!shouldParseTag || self->_flags.read_businessHours) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPFeedbackBusinessHours *new_businessHours = [[GEORPFeedbackBusinessHours alloc] init];
                [self _addNoFlagsBusinessHours:new_businessHours];
                PBDataReaderMark mark_businessHours;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_businessHours);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackBusinessHoursReadAllFrom(new_businessHours, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_businessHours);

            }
            break;
            case 4 /* coordinate */:
            {
                if (!shouldParseTag || self->_flags.read_coordinate) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_coordinate) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPCorrectedCoordinate *new_coordinate = [[GEORPCorrectedCoordinate alloc] init];
                self->_coordinate = new_coordinate;
                PBDataReaderMark mark_coordinate;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_coordinate);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPCorrectedCoordinateReadAllFrom(new_coordinate, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_coordinate);

                --tagsRemaining;
            }
            break;
            case 5 /* mapLocation */:
            {
                if (!shouldParseTag || self->_flags.read_mapLocation) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_mapLocation) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPMapLocation *new_mapLocation = [[GEORPMapLocation alloc] init];
                self->_mapLocation = new_mapLocation;
                PBDataReaderMark mark_mapLocation;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_mapLocation);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPMapLocationReadAllFrom(new_mapLocation, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_mapLocation);

                --tagsRemaining;
            }
            break;
            case 6 /* lineShapeIncorrect */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_lineShapeIncorrect = YES;
                self->_lineShapeIncorrect = PBReaderReadBOOL(reader);

            }
            break;
            case 7 /* lineScheduleDelay */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_lineScheduleDelay = YES;
                self->_lineScheduleDelay = PBReaderReadBOOL(reader);

            }
            break;
            case 8 /* accessPoint */:
            {
                if (!shouldParseTag || self->_flags.read_accessPoint) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_accessPoint) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPAccessPointCorrections *new_accessPoint = [[GEORPAccessPointCorrections alloc] init];
                self->_accessPoint = new_accessPoint;
                PBDataReaderMark mark_accessPoint;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_accessPoint);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPAccessPointCorrectionsReadAllFrom(new_accessPoint, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_accessPoint);

                --tagsRemaining;
            }
            break;
            case 9 /* originalName */:
            {
                if (!shouldParseTag || self->_flags.read_originalName) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_originalName) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_originalName = PBReaderReadString(reader);
                self->_originalName = new_originalName;

                --tagsRemaining;
            }
            break;
            default:
                if (!shouldParseUnknown || self->_flags.read_unknownFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }

    if (shouldParseUnknown) {
        self->_flags.read_unknownFields = YES;
    }

    if (readAll) {
        if (recursively) {
            [self->_amenity readAll:YES];
            for (GEORPFeedbackBusinessHours * i in self->_businessHours)
                [i readAll:YES];
            [self->_coordinate readAll:YES];
            [self->_mapLocation readAll:YES];
            [self->_accessPoint readAll:YES];
        }
        self->_flags.read_name = YES;
        self->_flags.read_amenity = YES;
        self->_flags.read_businessHours = YES;
        self->_flags.read_coordinate = YES;
        self->_flags.read_mapLocation = YES;
        self->_flags.read_accessPoint = YES;
        self->_flags.read_originalName = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* name */:
                    self->_flags.read_name = YES;
                    break;
                case 2 /* amenity */:
                    self->_flags.read_amenity = YES;
                    break;
                case 3 /* businessHours */:
                    self->_flags.read_businessHours = YES;
                    break;
                case 4 /* coordinate */:
                    self->_flags.read_coordinate = YES;
                    break;
                case 5 /* mapLocation */:
                    self->_flags.read_mapLocation = YES;
                    break;
                case 8 /* accessPoint */:
                    self->_flags.read_accessPoint = YES;
                    break;
                case 9 /* originalName */:
                    self->_flags.read_originalName = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPTransitPoiCorrectionsIsValid(reader);
}

BOOL GEORPTransitPoiCorrectionsIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* name */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 2 /* amenity */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_amenity;
                    if (!PBReaderPlaceMark(reader, &mark_amenity))
                        returnValue(NO);
                    if (!GEORPAmenityCorrectionsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_amenity);
                }
                break;
            case 3 /* businessHours */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_businessHours;
                    if (!PBReaderPlaceMark(reader, &mark_businessHours))
                        returnValue(NO);
                    if (!GEORPFeedbackBusinessHoursIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_businessHours);
                }
                break;
            case 4 /* coordinate */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_coordinate;
                    if (!PBReaderPlaceMark(reader, &mark_coordinate))
                        returnValue(NO);
                    if (!GEORPCorrectedCoordinateIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_coordinate);
                }
                break;
            case 5 /* mapLocation */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_mapLocation;
                    if (!PBReaderPlaceMark(reader, &mark_mapLocation))
                        returnValue(NO);
                    if (!GEORPMapLocationIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_mapLocation);
                }
                break;
            case 6 /* lineShapeIncorrect */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 7 /* lineScheduleDelay */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 8 /* accessPoint */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_accessPoint;
                    if (!PBReaderPlaceMark(reader, &mark_accessPoint))
                        returnValue(NO);
                    if (!GEORPAccessPointCorrectionsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_accessPoint);
                }
                break;
            case 9 /* originalName */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPTransitPoiCorrectionsReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPTransitPoiCorrectionsIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* name */
    {
        if (self->_name)
        {
            PBDataWriterWriteStringField(writer, self->_name, 1);
        }
    }

    /* amenity */
    {
        if (self->_amenity != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_amenity, 2);
        }
    }

    /* businessHours */
    {
        for (GEORPFeedbackBusinessHours * i_businessHours in self->_businessHours)
        {
            PBDataWriterWriteSubmessage(writer, i_businessHours, 3);
        }

    }

    /* coordinate */
    {
        if (self->_coordinate != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_coordinate, 4);
        }
    }

    /* mapLocation */
    {
        if (self->_mapLocation != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_mapLocation, 5);
        }
    }

    /* lineShapeIncorrect */
    {
        if (self->_flags.has_lineShapeIncorrect)
        {
            PBDataWriterWriteBOOLField(writer, self->_lineShapeIncorrect, 6);
        }
    }

    /* lineScheduleDelay */
    {
        if (self->_flags.has_lineScheduleDelay)
        {
            PBDataWriterWriteBOOLField(writer, self->_lineScheduleDelay, 7);
        }
    }

    /* accessPoint */
    {
        if (self->_accessPoint != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_accessPoint, 8);
        }
    }

    /* originalName */
    {
        if (self->_originalName)
        {
            PBDataWriterWriteStringField(writer, self->_originalName, 9);
        }
    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}

BOOL GEORPTransitPoiCorrectionsIsDirty(__unsafe_unretained GEORPTransitPoiCorrections *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_name
        || self->_flags.read_name
        || self->_flags.wrote_amenity
        || (self->_flags.read_amenity && GEORPAmenityCorrectionsIsDirty(self->_amenity))
        || self->_flags.wrote_businessHours
        || self->_flags.wrote_coordinate
        || (self->_flags.read_coordinate && GEORPCorrectedCoordinateIsDirty(self->_coordinate))
        || self->_flags.wrote_mapLocation
        || (self->_flags.read_mapLocation && GEORPMapLocationIsDirty(self->_mapLocation))
        || self->_flags.wrote_lineShapeIncorrect
        || self->_flags.wrote_lineScheduleDelay
        || self->_flags.wrote_accessPoint
        || (self->_flags.read_accessPoint && GEORPAccessPointCorrectionsIsDirty(self->_accessPoint))
        || self->_flags.wrote_originalName
        || self->_flags.read_originalName
        || self->_flags.wrote_unknownFields
    ;

    if (!dirty) {

            if (self->_flags.read_businessHours) {
                for (GEORPFeedbackBusinessHours *i in self->_businessHours) {
                    if (GEORPFeedbackBusinessHoursIsDirty(i)) {
                        return YES;
                    }
                }
            }
    }

    return dirty;
}


- (void)copyTo:(GEORPTransitPoiCorrections *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_name)
    {
        other.name = _name;
    }
    if (_amenity)
    {
        other.amenity = _amenity;
    }
    if ([self businessHoursCount])
    {
        [other clearBusinessHours];
        NSUInteger businessHoursCnt = [self businessHoursCount];
        for (NSUInteger i = 0; i < businessHoursCnt; i++)
        {
            [other addBusinessHours:[self businessHoursAtIndex:i]];
        }
    }
    if (_coordinate)
    {
        other.coordinate = _coordinate;
    }
    if (_mapLocation)
    {
        other.mapLocation = _mapLocation;
    }
    if (self->_flags.has_lineShapeIncorrect)
    {
        other->_lineShapeIncorrect = _lineShapeIncorrect;
        other->_flags.has_lineShapeIncorrect = YES;
    }
    if (self->_flags.has_lineScheduleDelay)
    {
        other->_lineScheduleDelay = _lineScheduleDelay;
        other->_flags.has_lineScheduleDelay = YES;
    }
    if (_accessPoint)
    {
        other.accessPoint = _accessPoint;
    }
    if (_originalName)
    {
        other.originalName = _originalName;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPTransitPoiCorrections *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_name
                || _flags.wrote_amenity
                || _flags.wrote_businessHours
                || _flags.wrote_coordinate
                || _flags.wrote_mapLocation
                || _flags.wrote_lineShapeIncorrect
                || _flags.wrote_lineScheduleDelay
                || _flags.wrote_accessPoint
                || _flags.wrote_originalName
                || _flags.wrote_unknownFields
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPTransitPoiCorrectionsReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_name = [_name copyWithZone:zone];
    copy->_amenity = [_amenity copyWithZone:zone];
    for (GEORPFeedbackBusinessHours * v in _businessHours)
    {
        GEORPFeedbackBusinessHours * vCopy = [v copyWithZone:zone];
        [copy addBusinessHours:vCopy];
    }
    copy->_coordinate = [_coordinate copyWithZone:zone];
    copy->_mapLocation = [_mapLocation copyWithZone:zone];
    if (self->_flags.has_lineShapeIncorrect)
    {
        copy->_lineShapeIncorrect = _lineShapeIncorrect;
        copy->_flags.has_lineShapeIncorrect = YES;
    }
    if (self->_flags.has_lineScheduleDelay)
    {
        copy->_lineScheduleDelay = _lineScheduleDelay;
        copy->_flags.has_lineScheduleDelay = YES;
    }
    copy->_accessPoint = [_accessPoint copyWithZone:zone];
    copy->_originalName = [_originalName copyWithZone:zone];
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPTransitPoiCorrections *other = (GEORPTransitPoiCorrections *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_name && !other->_name) || [self->_name isEqual:other->_name])
    &&
    ((!self->_amenity && !other->_amenity) || [self->_amenity isEqual:other->_amenity])
    &&
    ((!self->_businessHours && !other->_businessHours) || [self->_businessHours isEqual:other->_businessHours])

    &&
    ((!self->_coordinate && !other->_coordinate) || [self->_coordinate isEqual:other->_coordinate])
    &&
    ((!self->_mapLocation && !other->_mapLocation) || [self->_mapLocation isEqual:other->_mapLocation])
    &&
    ((self->_flags.has_lineShapeIncorrect && other->_flags.has_lineShapeIncorrect && ((self->_lineShapeIncorrect && other->_lineShapeIncorrect) || (!self->_lineShapeIncorrect && !other->_lineShapeIncorrect))) || (!self->_flags.has_lineShapeIncorrect && !other->_flags.has_lineShapeIncorrect))
    &&
    ((self->_flags.has_lineScheduleDelay && other->_flags.has_lineScheduleDelay && ((self->_lineScheduleDelay && other->_lineScheduleDelay) || (!self->_lineScheduleDelay && !other->_lineScheduleDelay))) || (!self->_flags.has_lineScheduleDelay && !other->_flags.has_lineScheduleDelay))
    &&
    ((!self->_accessPoint && !other->_accessPoint) || [self->_accessPoint isEqual:other->_accessPoint])
    &&
    ((!self->_originalName && !other->_originalName) || [self->_originalName isEqual:other->_originalName])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_name hash]
    ^
    [self->_amenity hash]
    ^
    [self->_businessHours hash]
    ^
    [self->_coordinate hash]
    ^
    [self->_mapLocation hash]
    ^
    (self->_flags.has_lineShapeIncorrect ? PBHashInt((NSUInteger)self->_lineShapeIncorrect) : 0)
    ^
    (self->_flags.has_lineScheduleDelay ? PBHashInt((NSUInteger)self->_lineScheduleDelay) : 0)
    ^
    [self->_accessPoint hash]
    ^
    [self->_originalName hash]
    ;
}

- (void)mergeFrom:(GEORPTransitPoiCorrections *)other
{
    [other readAll:NO];
    if (other->_name)
    {
        [self setName:other->_name];
    }
    if (self->_amenity && other->_amenity)
    {
        [self->_amenity mergeFrom:other->_amenity];
    }
    else if (!self->_amenity && other->_amenity)
    {
        [self setAmenity:other->_amenity];
    }
    for (GEORPFeedbackBusinessHours * iter_businessHours in other->_businessHours)
    {
        [self addBusinessHours:iter_businessHours];
    }
    if (self->_coordinate && other->_coordinate)
    {
        [self->_coordinate mergeFrom:other->_coordinate];
    }
    else if (!self->_coordinate && other->_coordinate)
    {
        [self setCoordinate:other->_coordinate];
    }
    if (self->_mapLocation && other->_mapLocation)
    {
        [self->_mapLocation mergeFrom:other->_mapLocation];
    }
    else if (!self->_mapLocation && other->_mapLocation)
    {
        [self setMapLocation:other->_mapLocation];
    }
    if (other->_flags.has_lineShapeIncorrect)
    {
        self->_lineShapeIncorrect = other->_lineShapeIncorrect;
        self->_flags.has_lineShapeIncorrect = 1;
    }
    if (other->_flags.has_lineScheduleDelay)
    {
        self->_lineScheduleDelay = other->_lineScheduleDelay;
        self->_flags.has_lineScheduleDelay = 1;
    }
    if (self->_accessPoint && other->_accessPoint)
    {
        [self->_accessPoint mergeFrom:other->_accessPoint];
    }
    else if (!self->_accessPoint && other->_accessPoint)
    {
        [self setAccessPoint:other->_accessPoint];
    }
    if (other->_originalName)
    {
        [self setOriginalName:other->_originalName];
    }
}

- (PBUnknownFields *)unknownFields
{
    if (_flags.read_unknownFields) return _unknownFields;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return _unknownFields;
    @synchronized(reader) {
        if (!_flags.read_unknownFields) {
            static const uint32_t tags[] = {TAG_UNKNOWN_FIELDS, 0};
            GEORPTransitPoiCorrectionsReadSpecified(self, reader, tags);
        }
    }
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _flags.read_unknownFields = 1;
    _flags.wrote_unknownFields = 1;
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
    [_amenity clearUnknownFields:YES];
    for (GEORPFeedbackBusinessHours * v in self.businessHours) {
        [v clearUnknownFields:YES];
    }
    [_accessPoint clearUnknownFields:YES];
}

@end


