// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPFeedbackIdLookupParameters.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPFeedbackIdLookupParameters

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)dealloc
{
    PBRepeatedInt32Clear(&(self->_feedbackComponentTypes));
}

- (void)_readFeedbackIds {
    if (_flags.read_feedbackIds) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_feedbackIds) {
            static const uint32_t tags[] = {1, 0};
            GEORPFeedbackIdLookupParametersReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<NSString *> *)feedbackIds
{
    [self _readFeedbackIds];
    return _feedbackIds;
}
- (void)setFeedbackIds:(NSMutableArray<NSString *> *)v
{
    _flags.read_feedbackIds = 1;
    _flags.wrote_feedbackIds = 1;
    _feedbackIds = v;
}
- (void)clearFeedbackIds
{
    _flags.read_feedbackIds = 1;
    _flags.wrote_feedbackIds = 1;
    [_feedbackIds removeAllObjects];
}
- (void)addFeedbackId:(NSString *)i
{
    [self _readFeedbackIds];
    [self _addNoFlagsFeedbackId:i];
    _flags.read_feedbackIds = 1;
    _flags.wrote_feedbackIds = 1;
}
- (void)_addNoFlagsFeedbackId:(NSString *)i
{
    if (!_feedbackIds)
    {
        _feedbackIds = [[NSMutableArray alloc] init];
    }
    [_feedbackIds addObject:i];
}
- (NSUInteger)feedbackIdsCount
{
    [self _readFeedbackIds];
    return [_feedbackIds count];
}
- (NSString *)feedbackIdAtIndex:(NSUInteger)idx
{
    [self _readFeedbackIds];
    return [_feedbackIds objectAtIndex:idx];
}
+ (Class)feedbackIdType
{
    return [NSString class];
}

- (void)_readFeedbackComponentTypes {
    if (_flags.read_feedbackComponentTypes) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_feedbackComponentTypes) {
            static const uint32_t tags[] = {2, 0};
            GEORPFeedbackIdLookupParametersReadSpecified(self, reader, tags);
        }
    }
}
- (NSUInteger)feedbackComponentTypesCount
{
    [self _readFeedbackComponentTypes];
    return _feedbackComponentTypes.count;
}
- (GEORPFeedbackComponentType *)feedbackComponentTypes
{
    [self _readFeedbackComponentTypes];
    return _feedbackComponentTypes.list;
}
- (void)clearFeedbackComponentTypes
{
    _flags.read_feedbackComponentTypes = 1;
    _flags.wrote_feedbackComponentTypes = 1;
    PBRepeatedInt32Clear(&_feedbackComponentTypes);
}
- (void)addFeedbackComponentType:(GEORPFeedbackComponentType)i
{
    [self _readFeedbackComponentTypes];
    [self _addNoFlagsFeedbackComponentType:i];
    _flags.read_feedbackComponentTypes = 1;
    _flags.wrote_feedbackComponentTypes = 1;
}
- (void)_addNoFlagsFeedbackComponentType:(GEORPFeedbackComponentType)i
{
    PBRepeatedInt32Add(&_feedbackComponentTypes, i);
}
- (GEORPFeedbackComponentType)feedbackComponentTypeAtIndex:(NSUInteger)idx
{
    [self _readFeedbackComponentTypes];
    if (_feedbackComponentTypes.count <= idx)
    {
        [[NSException exceptionWithName:NSRangeException reason:[NSString stringWithFormat:@"idx (%tu) is out of range (%tu)", idx, _feedbackComponentTypes.count] userInfo:nil] raise];
    }
    return _feedbackComponentTypes.list[idx];
}
- (void)setFeedbackComponentTypes:(GEORPFeedbackComponentType *)list count:(NSUInteger)count
{
    _flags.read_feedbackComponentTypes = 1;
    _flags.wrote_feedbackComponentTypes = 1;
    PBRepeatedInt32Set(&_feedbackComponentTypes, list, count);
}
- (NSString *)feedbackComponentTypesAsString:(GEORPFeedbackComponentType)value
{
    return GEORPFeedbackComponentTypeAsString(value);
}
- (GEORPFeedbackComponentType)StringAsFeedbackComponentTypes:(NSString *)str
{
    return StringAsGEORPFeedbackComponentType(str);
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_feedbackIds) {
        [dict setObject:self.feedbackIds forKey:@"feedback_id"];
    }

    if (self->_feedbackComponentTypes.count > 0)
    {
        NSMutableArray *feedbackComponentTypesValues = [NSMutableArray arrayWithCapacity:self->_feedbackComponentTypes.count];
        for (NSUInteger i = 0; i < self->_feedbackComponentTypes.count; i++)
        {
            [feedbackComponentTypesValues addObject:GEORPFeedbackComponentTypeAsString(self->_feedbackComponentTypes.list[i])];
        }
        [dict setObject:feedbackComponentTypesValues forKey:@"feedback_component_type"];
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPFeedbackIdLookupParametersReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPFeedbackIdLookupParametersReadAllFrom(__unsafe_unretained GEORPFeedbackIdLookupParameters *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPFeedbackIdLookupParametersReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPFeedbackIdLookupParametersReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPFeedbackIdLookupParametersReadFrom(__unsafe_unretained GEORPFeedbackIdLookupParameters *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPFeedbackIdLookupParametersReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPFeedbackIdLookupParametersReadSpecified(__unsafe_unretained GEORPFeedbackIdLookupParameters *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_feedbackIds
        + self->_flags.read_feedbackComponentTypes
        + self->_flags.read_unknownFields
        ;
    #define requiredLazyFieldCount 1 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL shouldParseUnknown = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            case TAG_UNKNOWN_FIELDS:
                shouldParseUnknown = YES;
                ++readLazyCount;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
        shouldParseUnknown = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !(readAll || shouldParseUnknown);
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* feedbackIds */:
            {
                if (!shouldParseTag || self->_flags.read_feedbackIds) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
            NSString *new_feedbackIds = PBReaderReadString(reader);
                if (new_feedbackIds)
                {
                    [self _addNoFlagsFeedbackId:new_feedbackIds];
                }

            }
            break;
            case 2 /* feedbackComponentTypes */:
            {
                if (!shouldParseTag || self->_flags.read_feedbackComponentTypes) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
            if (TYPE_LENGTH_DELIMITED == aType)
                {
                    PBDataReaderMark mark_feedbackComponentType;
                    BOOL markError = !PBReaderPlaceMark(reader, &mark_feedbackComponentType);
                    if (markError)
                    {
                        return NO;
                    }
                    while (PBReaderHasMoreData(reader))
                    {
                        GEORPFeedbackComponentType new_feedbackComponentType = PBReaderReadInt32(reader);
                        PBRepeatedInt32Add(&(self->_feedbackComponentTypes), new_feedbackComponentType);
                    }
                    PBReaderRecallMark(reader, &mark_feedbackComponentType);
                }
                else
                {
                    PBRepeatedInt32Add(&(self->_feedbackComponentTypes), PBReaderReadInt32(reader));
                }

            }
            break;
            default:
                if (!shouldParseUnknown || self->_flags.read_unknownFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }

    if (shouldParseUnknown) {
        self->_flags.read_unknownFields = YES;
    }

    if (readAll) {
        if (recursively) {
        }
        self->_flags.read_feedbackIds = YES;
        self->_flags.read_feedbackComponentTypes = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* feedbackIds */:
                    self->_flags.read_feedbackIds = YES;
                    break;
                case 2 /* feedbackComponentTypes */:
                    self->_flags.read_feedbackComponentTypes = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPFeedbackIdLookupParametersIsValid(reader);
}

BOOL GEORPFeedbackIdLookupParametersIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* feedbackIds */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 2 /* feedbackComponentTypes */:
                if (TYPE_LENGTH_DELIMITED == aType)
                {
                    PBDataReaderMark mark_feedbackComponentType;
                    if (!PBReaderPlaceMark(reader, &mark_feedbackComponentType))
                        returnValue(NO);
                    while (PBReaderHasMoreData(reader))
                        PBReaderReadInt32(reader);
                    PBReaderRecallMark(reader, &mark_feedbackComponentType);
                }
                else if (TYPE_VARINT != aType)
                    returnValue(NO);
                else
                    PBReaderReadInt32(reader);
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPFeedbackIdLookupParametersReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPFeedbackIdLookupParametersIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* feedbackIds */
    {
        for (NSString * s_feedbackIds in self->_feedbackIds)
        {
            PBDataWriterWriteStringField(writer, s_feedbackIds, 1);
        }

    }

    /* feedbackComponentTypes */
    {
        if (self->_feedbackComponentTypes.count)
        {
            NSUInteger i_feedbackComponentTypes;
            for (i_feedbackComponentTypes = 0; i_feedbackComponentTypes < self->_feedbackComponentTypes.count; i_feedbackComponentTypes++)
            {
                PBDataWriterWriteInt32Field(writer, self->_feedbackComponentTypes.list[i_feedbackComponentTypes], 2);
            }
        }

    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}

BOOL GEORPFeedbackIdLookupParametersIsDirty(__unsafe_unretained GEORPFeedbackIdLookupParameters *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_feedbackIds
        || self->_flags.read_feedbackIds
        || self->_flags.wrote_feedbackComponentTypes
        || self->_flags.read_feedbackComponentTypes
        || self->_flags.wrote_unknownFields
    ;


    return dirty;
}


- (void)copyTo:(GEORPFeedbackIdLookupParameters *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if ([self feedbackIdsCount])
    {
        [other clearFeedbackIds];
        NSUInteger feedbackIdsCnt = [self feedbackIdsCount];
        for (NSUInteger i = 0; i < feedbackIdsCnt; i++)
        {
            [other addFeedbackId:[self feedbackIdAtIndex:i]];
        }
    }
    if ([self feedbackComponentTypesCount])
    {
        [other clearFeedbackComponentTypes];
        NSUInteger feedbackComponentTypesCnt = [self feedbackComponentTypesCount];
        for (NSUInteger i = 0; i < feedbackComponentTypesCnt; i++)
        {
            [other addFeedbackComponentType:[self feedbackComponentTypeAtIndex:i]];
        }
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPFeedbackIdLookupParameters *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_feedbackIds
                || _flags.wrote_feedbackComponentTypes
                || _flags.wrote_unknownFields
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPFeedbackIdLookupParametersReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    for (NSString * v in _feedbackIds)
    {
        NSString * vCopy = [v copyWithZone:zone];
        [copy addFeedbackId:vCopy];
    }
    PBRepeatedInt32Copy(&(copy->_feedbackComponentTypes), &_feedbackComponentTypes);
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPFeedbackIdLookupParameters *other = (GEORPFeedbackIdLookupParameters *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_feedbackIds && !other->_feedbackIds) || [self->_feedbackIds isEqual:other->_feedbackIds])

    &&
    PBRepeatedInt32IsEqual(&(self->_feedbackComponentTypes), &(other->_feedbackComponentTypes))

    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_feedbackIds hash]
    ^
    PBRepeatedInt32Hash(&(self->_feedbackComponentTypes))
    ;
}

- (void)mergeFrom:(GEORPFeedbackIdLookupParameters *)other
{
    [other readAll:NO];
    for (NSString * iter_feedbackIds in other->_feedbackIds)
    {
        [self addFeedbackId:iter_feedbackIds];
    }
    NSUInteger feedbackComponentTypesCnt = [other feedbackComponentTypesCount];
    for (NSUInteger i = 0; i < feedbackComponentTypesCnt; i++)
    {
        [self addFeedbackComponentType:[other feedbackComponentTypeAtIndex:i]];
    }
}

- (PBUnknownFields *)unknownFields
{
    if (_flags.read_unknownFields) return _unknownFields;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return _unknownFields;
    @synchronized(reader) {
        if (!_flags.read_unknownFields) {
            static const uint32_t tags[] = {TAG_UNKNOWN_FIELDS, 0};
            GEORPFeedbackIdLookupParametersReadSpecified(self, reader, tags);
        }
    }
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _flags.read_unknownFields = 1;
    _flags.wrote_unknownFields = 1;
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
}

@end


