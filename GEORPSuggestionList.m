// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPSuggestionList.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEOPDPlaceRequest.h>
#import <GeoServices/GEOPDPlaceResponse.h>
#import <GeoServices/GEORPSuggestionEntry.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPSuggestionList

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readQuery {
    if (_flags.read_query) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_query) {
            static const uint32_t tags[] = {1, 0};
            GEORPSuggestionListReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasQuery
{
    [self _readQuery];
    return _query != nil;
}
- (NSString *)query
{
    [self _readQuery];
    return _query;
}
- (void)setQuery:(NSString *)v
{
    _flags.read_query = 1;
    _flags.wrote_query = 1;
    _query = v;
}

- (void)_readEntrys {
    if (_flags.read_entrys) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_entrys) {
            static const uint32_t tags[] = {2, 0};
            GEORPSuggestionListReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPSuggestionEntry *> *)entrys
{
    [self _readEntrys];
    return _entrys;
}
- (void)setEntrys:(NSMutableArray<GEORPSuggestionEntry *> *)v
{
    _flags.read_entrys = 1;
    _flags.wrote_entrys = 1;
    _entrys = v;
}
- (void)clearEntrys
{
    _flags.read_entrys = 1;
    _flags.wrote_entrys = 1;
    [_entrys removeAllObjects];
}
- (void)addEntry:(GEORPSuggestionEntry *)i
{
    [self _readEntrys];
    [self _addNoFlagsEntry:i];
    _flags.read_entrys = 1;
    _flags.wrote_entrys = 1;
}
- (void)_addNoFlagsEntry:(GEORPSuggestionEntry *)i
{
    if (!_entrys)
    {
        _entrys = [[NSMutableArray alloc] init];
    }
    [_entrys addObject:i];
}
- (NSUInteger)entrysCount
{
    [self _readEntrys];
    return [_entrys count];
}
- (GEORPSuggestionEntry *)entryAtIndex:(NSUInteger)idx
{
    [self _readEntrys];
    return [_entrys objectAtIndex:idx];
}
+ (Class)entryType
{
    return [GEORPSuggestionEntry class];
}

- (void)_readAutocompleteRequest {
    if (_flags.read_autocompleteRequest) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_autocompleteRequest) {
            static const uint32_t tags[] = {3, 0};
            GEORPSuggestionListReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasAutocompleteRequest
{
    [self _readAutocompleteRequest];
    return _autocompleteRequest != nil;
}
- (GEOPDPlaceRequest *)autocompleteRequest
{
    [self _readAutocompleteRequest];
    return _autocompleteRequest;
}
- (void)setAutocompleteRequest:(GEOPDPlaceRequest *)v
{
    _flags.read_autocompleteRequest = 1;
    _flags.wrote_autocompleteRequest = 1;
    _autocompleteRequest = v;
}

- (void)_readAutocompleteResponse {
    if (_flags.read_autocompleteResponse) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_autocompleteResponse) {
            static const uint32_t tags[] = {4, 0};
            GEORPSuggestionListReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasAutocompleteResponse
{
    [self _readAutocompleteResponse];
    return _autocompleteResponse != nil;
}
- (GEOPDPlaceResponse *)autocompleteResponse
{
    [self _readAutocompleteResponse];
    return _autocompleteResponse;
}
- (void)setAutocompleteResponse:(GEOPDPlaceResponse *)v
{
    _flags.read_autocompleteResponse = 1;
    _flags.wrote_autocompleteResponse = 1;
    _autocompleteResponse = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        NSString * value = self.query;
        if (value) {
            [dict setObject:value forKey:@"query"];
        }
    }

    if ([self->_entrys count])
    {
        NSMutableArray *entrysDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_entrys count]];
        for (GEORPSuggestionEntry * i_entry in self->_entrys)
        {
            [entrysDictReprs addObject:[i_entry dictionaryRepresentation]];
        }
        [dict setObject:entrysDictReprs forKey:@"entry"];
    }

    {
        GEOPDPlaceRequest * value = self.autocompleteRequest;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"autocomplete_request"];
        }
    }

    {
        GEOPDPlaceResponse * value = self.autocompleteResponse;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"autocomplete_response"];
        }
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPSuggestionListReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPSuggestionListReadAllFrom(__unsafe_unretained GEORPSuggestionList *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPSuggestionListReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPSuggestionListReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPSuggestionListReadFrom(__unsafe_unretained GEORPSuggestionList *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPSuggestionListReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPSuggestionListReadSpecified(__unsafe_unretained GEORPSuggestionList *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_query
        + self->_flags.read_entrys
        + self->_flags.read_autocompleteRequest
        + self->_flags.read_autocompleteResponse
        ;
    #define requiredLazyFieldCount 3 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* query */:
            {
                if (!shouldParseTag || self->_flags.read_query) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_query) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_query = PBReaderReadString(reader);
                self->_query = new_query;

                --tagsRemaining;
            }
            break;
            case 2 /* entrys */:
            {
                if (!shouldParseTag || self->_flags.read_entrys) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPSuggestionEntry *new_entry = [[GEORPSuggestionEntry alloc] init];
                [self _addNoFlagsEntry:new_entry];
                PBDataReaderMark mark_entry;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_entry);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPSuggestionEntryReadAllFrom(new_entry, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_entry);

            }
            break;
            case 3 /* autocompleteRequest */:
            {
                if (!shouldParseTag || self->_flags.read_autocompleteRequest) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_autocompleteRequest) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOPDPlaceRequest *new_autocompleteRequest = [[GEOPDPlaceRequest alloc] init];
                self->_autocompleteRequest = new_autocompleteRequest;
                PBDataReaderMark mark_autocompleteRequest;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_autocompleteRequest);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPDPlaceRequestReadAllFrom(new_autocompleteRequest, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_autocompleteRequest);

                --tagsRemaining;
            }
            break;
            case 4 /* autocompleteResponse */:
            {
                if (!shouldParseTag || self->_flags.read_autocompleteResponse) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_autocompleteResponse) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOPDPlaceResponse *new_autocompleteResponse = [[GEOPDPlaceResponse alloc] init];
                self->_autocompleteResponse = new_autocompleteResponse;
                PBDataReaderMark mark_autocompleteResponse;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_autocompleteResponse);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPDPlaceResponseReadAllFrom(new_autocompleteResponse, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_autocompleteResponse);

                --tagsRemaining;
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
            for (GEORPSuggestionEntry * i in self->_entrys)
                [i readAll:YES];
            [self->_autocompleteRequest readAll:YES];
            [self->_autocompleteResponse readAll:YES];
        }
        self->_flags.read_query = YES;
        self->_flags.read_entrys = YES;
        self->_flags.read_autocompleteRequest = YES;
        self->_flags.read_autocompleteResponse = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* query */:
                    self->_flags.read_query = YES;
                    break;
                case 2 /* entrys */:
                    self->_flags.read_entrys = YES;
                    break;
                case 3 /* autocompleteRequest */:
                    self->_flags.read_autocompleteRequest = YES;
                    break;
                case 4 /* autocompleteResponse */:
                    self->_flags.read_autocompleteResponse = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPSuggestionListIsValid(reader);
}

BOOL GEORPSuggestionListIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* query */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 2 /* entrys */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_entry;
                    if (!PBReaderPlaceMark(reader, &mark_entry))
                        returnValue(NO);
                    if (!GEORPSuggestionEntryIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_entry);
                }
                break;
            case 3 /* autocompleteRequest */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_autocompleteRequest;
                    if (!PBReaderPlaceMark(reader, &mark_autocompleteRequest))
                        returnValue(NO);
                    if (!GEOPDPlaceRequestIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_autocompleteRequest);
                }
                break;
            case 4 /* autocompleteResponse */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_autocompleteResponse;
                    if (!PBReaderPlaceMark(reader, &mark_autocompleteResponse))
                        returnValue(NO);
                    if (!GEOPDPlaceResponseIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_autocompleteResponse);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPSuggestionListReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPSuggestionListIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* query */
    {
        if (self->_query)
        {
            PBDataWriterWriteStringField(writer, self->_query, 1);
        }
    }

    /* entrys */
    {
        for (GEORPSuggestionEntry * i_entry in self->_entrys)
        {
            PBDataWriterWriteSubmessage(writer, i_entry, 2);
        }

    }

    /* autocompleteRequest */
    {
        if (self->_autocompleteRequest != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_autocompleteRequest, 3);
        }
    }

    /* autocompleteResponse */
    {
        if (self->_autocompleteResponse != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_autocompleteResponse, 4);
        }
    }
}

BOOL GEORPSuggestionListIsDirty(__unsafe_unretained GEORPSuggestionList *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_query
        || self->_flags.read_query
        || self->_flags.wrote_entrys
        || self->_flags.read_entrys
        || self->_flags.wrote_autocompleteRequest
        || (self->_flags.read_autocompleteRequest && GEOPDPlaceRequestIsDirty(self->_autocompleteRequest))
        || self->_flags.wrote_autocompleteResponse
        || (self->_flags.read_autocompleteResponse && GEOPDPlaceResponseIsDirty(self->_autocompleteResponse))
    ;


    return dirty;
}


- (void)copyTo:(GEORPSuggestionList *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_query)
    {
        other.query = _query;
    }
    if ([self entrysCount])
    {
        [other clearEntrys];
        NSUInteger entrysCnt = [self entrysCount];
        for (NSUInteger i = 0; i < entrysCnt; i++)
        {
            [other addEntry:[self entryAtIndex:i]];
        }
    }
    if (_autocompleteRequest)
    {
        other.autocompleteRequest = _autocompleteRequest;
    }
    if (_autocompleteResponse)
    {
        other.autocompleteResponse = _autocompleteResponse;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPSuggestionList *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_query
                || _flags.wrote_entrys
                || _flags.wrote_autocompleteRequest
                || _flags.wrote_autocompleteResponse
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPSuggestionListReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_query = [_query copyWithZone:zone];
    for (GEORPSuggestionEntry * v in _entrys)
    {
        GEORPSuggestionEntry * vCopy = [v copyWithZone:zone];
        [copy addEntry:vCopy];
    }
    copy->_autocompleteRequest = [_autocompleteRequest copyWithZone:zone];
    copy->_autocompleteResponse = [_autocompleteResponse copyWithZone:zone];
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPSuggestionList *other = (GEORPSuggestionList *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_query && !other->_query) || [self->_query isEqual:other->_query])
    &&
    ((!self->_entrys && !other->_entrys) || [self->_entrys isEqual:other->_entrys])

    &&
    ((!self->_autocompleteRequest && !other->_autocompleteRequest) || [self->_autocompleteRequest isEqual:other->_autocompleteRequest])
    &&
    ((!self->_autocompleteResponse && !other->_autocompleteResponse) || [self->_autocompleteResponse isEqual:other->_autocompleteResponse])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_query hash]
    ^
    [self->_entrys hash]
    ^
    [self->_autocompleteRequest hash]
    ^
    [self->_autocompleteResponse hash]
    ;
}

- (void)mergeFrom:(GEORPSuggestionList *)other
{
    [other readAll:NO];
    if (other->_query)
    {
        [self setQuery:other->_query];
    }
    for (GEORPSuggestionEntry * iter_entrys in other->_entrys)
    {
        [self addEntry:iter_entrys];
    }
    if (self->_autocompleteRequest && other->_autocompleteRequest)
    {
        [self->_autocompleteRequest mergeFrom:other->_autocompleteRequest];
    }
    else if (!self->_autocompleteRequest && other->_autocompleteRequest)
    {
        [self setAutocompleteRequest:other->_autocompleteRequest];
    }
    if (self->_autocompleteResponse && other->_autocompleteResponse)
    {
        [self->_autocompleteResponse mergeFrom:other->_autocompleteResponse];
    }
    else if (!self->_autocompleteResponse && other->_autocompleteResponse)
    {
        [self setAutocompleteResponse:other->_autocompleteResponse];
    }
}


@end


