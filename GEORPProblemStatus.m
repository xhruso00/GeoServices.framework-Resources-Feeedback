// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPProblemStatus.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEORPDetails.h>
#import <GeoServices/GEORPNotification.h>
#import <GeoServices/GEORPResolution.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPProblemStatus

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readProblemId {
    if (_flags.read_problemId) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_problemId) {
            static const uint32_t tags[] = {1, 0};
            GEORPProblemStatusReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasProblemId
{
    [self _readProblemId];
    return _problemId != nil;
}
- (NSString *)problemId
{
    [self _readProblemId];
    return _problemId;
}
- (void)setProblemId:(NSString *)v
{
    _flags.read_problemId = 1;
    _flags.wrote_problemId = 1;
    _problemId = v;
}

- (double)creationDate
{
    return _creationDate;
}
- (void)setCreationDate:(double)v
{
    _flags.wrote_creationDate = 1;
    _flags.has_creationDate = 1;
    _creationDate = v;
}
- (void)setHasCreationDate:(BOOL)f
{
    _flags.wrote_creationDate = 1;
    _flags.has_creationDate = f ? 1 : 0;
}
- (BOOL)hasCreationDate
{
    return (BOOL)_flags.has_creationDate;
}

- (GEORPProblemStatus_State)problemState
{
    return _flags.has_problemState ? _problemState : GEORPProblemStatus_State_Unresolved;
}
- (void)setProblemState:(GEORPProblemStatus_State)v
{
    _flags.wrote_problemState = 1;
    _flags.has_problemState = 1;
    _problemState = v;
}
- (void)setHasProblemState:(BOOL)f
{
    _flags.wrote_problemState = 1;
    _flags.has_problemState = f ? 1 : 0;
}
- (BOOL)hasProblemState
{
    return (BOOL)_flags.has_problemState;
}
- (NSString *)problemStateAsString:(GEORPProblemStatus_State)value
{
    return GEORPProblemStatus_StateAsString(value);
}
- (GEORPProblemStatus_State)StringAsProblemState:(NSString *)str
{
    return StringAsGEORPProblemStatus_State(str);
}

- (void)_readProblemResolution {
    if (_flags.read_problemResolution) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_problemResolution) {
            static const uint32_t tags[] = {4, 0};
            GEORPProblemStatusReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasProblemResolution
{
    [self _readProblemResolution];
    return _problemResolution != nil;
}
- (GEORPResolution *)problemResolution
{
    [self _readProblemResolution];
    return _problemResolution;
}
- (void)setProblemResolution:(GEORPResolution *)v
{
    _flags.read_problemResolution = 1;
    _flags.wrote_problemResolution = 1;
    _problemResolution = v;
}

- (void)_readNotification {
    if (_flags.read_notification) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_notification) {
            static const uint32_t tags[] = {5, 0};
            GEORPProblemStatusReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasNotification
{
    [self _readNotification];
    return _notification != nil;
}
- (GEORPNotification *)notification
{
    [self _readNotification];
    return _notification;
}
- (void)setNotification:(GEORPNotification *)v
{
    _flags.read_notification = 1;
    _flags.wrote_notification = 1;
    _notification = v;
}

- (void)_readDetails {
    if (_flags.read_details) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_details) {
            static const uint32_t tags[] = {6, 0};
            GEORPProblemStatusReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasDetails
{
    [self _readDetails];
    return _details != nil;
}
- (GEORPDetails *)details
{
    [self _readDetails];
    return _details;
}
- (void)setDetails:(GEORPDetails *)v
{
    _flags.read_details = 1;
    _flags.wrote_details = 1;
    _details = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        NSString * value = self.problemId;
        if (value) {
            [dict setObject:value forKey:@"problem_id"];
        }
    }

    if (self->_flags.has_creationDate)
    {
        [dict setObject:@(self->_creationDate) forKey:@"creation_date"];
    }

    if (self->_flags.has_problemState)
    {
        [dict setObject:GEORPProblemStatus_StateAsString(self->_problemState) forKey:@"problem_state"];
    }

    {
        GEORPResolution * value = self.problemResolution;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"problem_resolution"];
        }
    }

    {
        GEORPNotification * value = self.notification;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"notification"];
        }
    }

    {
        GEORPDetails * value = self.details;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"details"];
        }
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPProblemStatusReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPProblemStatusReadAllFrom(__unsafe_unretained GEORPProblemStatus *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPProblemStatusReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPProblemStatusReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPProblemStatusReadFrom(__unsafe_unretained GEORPProblemStatus *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPProblemStatusReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPProblemStatusReadSpecified(__unsafe_unretained GEORPProblemStatus *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_problemId
        + self->_flags.read_problemResolution
        + self->_flags.read_notification
        + self->_flags.read_details
        ;
    #define requiredLazyFieldCount 3 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* problemId */:
            {
                if (!shouldParseTag || self->_flags.read_problemId) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_problemId) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_problemId = PBReaderReadString(reader);
                self->_problemId = new_problemId;

                --tagsRemaining;
            }
            break;
            case 2 /* creationDate */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_creationDate = YES;
                self->_creationDate = PBReaderReadDouble(reader);

            }
            break;
            case 3 /* problemState */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_problemState = YES;
                self->_problemState = PBReaderReadInt32(reader);

            }
            break;
            case 4 /* problemResolution */:
            {
                if (!shouldParseTag || self->_flags.read_problemResolution) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_problemResolution) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPResolution *new_problemResolution = [[GEORPResolution alloc] init];
                self->_problemResolution = new_problemResolution;
                PBDataReaderMark mark_problemResolution;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_problemResolution);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPResolutionReadAllFrom(new_problemResolution, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_problemResolution);

                --tagsRemaining;
            }
            break;
            case 5 /* notification */:
            {
                if (!shouldParseTag || self->_flags.read_notification) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_notification) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPNotification *new_notification = [[GEORPNotification alloc] init];
                self->_notification = new_notification;
                PBDataReaderMark mark_notification;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_notification);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPNotificationReadAllFrom(new_notification, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_notification);

                --tagsRemaining;
            }
            break;
            case 6 /* details */:
            {
                if (!shouldParseTag || self->_flags.read_details) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_details) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPDetails *new_details = [[GEORPDetails alloc] init];
                self->_details = new_details;
                PBDataReaderMark mark_details;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_details);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPDetailsReadAllFrom(new_details, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_details);

                --tagsRemaining;
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
            [self->_problemResolution readAll:YES];
            [self->_notification readAll:YES];
            [self->_details readAll:YES];
        }
        self->_flags.read_problemId = YES;
        self->_flags.read_problemResolution = YES;
        self->_flags.read_notification = YES;
        self->_flags.read_details = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* problemId */:
                    self->_flags.read_problemId = YES;
                    break;
                case 4 /* problemResolution */:
                    self->_flags.read_problemResolution = YES;
                    break;
                case 5 /* notification */:
                    self->_flags.read_notification = YES;
                    break;
                case 6 /* details */:
                    self->_flags.read_details = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPProblemStatusIsValid(reader);
}

BOOL GEORPProblemStatusIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* problemId */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 2 /* creationDate */:
                if (TYPE_FIXED64 != aType)
                    returnValue(NO);
                PBReaderReadDouble(reader);
                break;
            case 3 /* problemState */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 4 /* problemResolution */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_problemResolution;
                    if (!PBReaderPlaceMark(reader, &mark_problemResolution))
                        returnValue(NO);
                    if (!GEORPResolutionIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_problemResolution);
                }
                break;
            case 5 /* notification */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_notification;
                    if (!PBReaderPlaceMark(reader, &mark_notification))
                        returnValue(NO);
                    if (!GEORPNotificationIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_notification);
                }
                break;
            case 6 /* details */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_details;
                    if (!PBReaderPlaceMark(reader, &mark_details))
                        returnValue(NO);
                    if (!GEORPDetailsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_details);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPProblemStatusReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPProblemStatusIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* problemId */
    {
        if (self->_problemId)
        {
            PBDataWriterWriteStringField(writer, self->_problemId, 1);
        }
    }

    /* creationDate */
    {
        if (self->_flags.has_creationDate)
        {
            PBDataWriterWriteDoubleField(writer, self->_creationDate, 2);
        }
    }

    /* problemState */
    {
        if (self->_flags.has_problemState)
        {
            PBDataWriterWriteInt32Field(writer, self->_problemState, 3);
        }
    }

    /* problemResolution */
    {
        if (self->_problemResolution != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_problemResolution, 4);
        }
    }

    /* notification */
    {
        if (self->_notification != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_notification, 5);
        }
    }

    /* details */
    {
        if (self->_details != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_details, 6);
        }
    }
}

BOOL GEORPProblemStatusIsDirty(__unsafe_unretained GEORPProblemStatus *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_problemId
        || self->_flags.read_problemId
        || self->_flags.wrote_creationDate
        || self->_flags.wrote_problemState
        || self->_flags.wrote_problemResolution
        || (self->_flags.read_problemResolution && GEORPResolutionIsDirty(self->_problemResolution))
        || self->_flags.wrote_notification
        || (self->_flags.read_notification && GEORPNotificationIsDirty(self->_notification))
        || self->_flags.wrote_details
        || (self->_flags.read_details && GEORPDetailsIsDirty(self->_details))
    ;


    return dirty;
}


- (void)copyTo:(GEORPProblemStatus *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_problemId)
    {
        other.problemId = _problemId;
    }
    if (self->_flags.has_creationDate)
    {
        other->_creationDate = _creationDate;
        other->_flags.has_creationDate = YES;
    }
    if (self->_flags.has_problemState)
    {
        other->_problemState = _problemState;
        other->_flags.has_problemState = YES;
    }
    if (_problemResolution)
    {
        other.problemResolution = _problemResolution;
    }
    if (_notification)
    {
        other.notification = _notification;
    }
    if (_details)
    {
        other.details = _details;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPProblemStatus *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_problemId
                || _flags.wrote_creationDate
                || _flags.wrote_problemState
                || _flags.wrote_problemResolution
                || _flags.wrote_notification
                || _flags.wrote_details
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPProblemStatusReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_problemId = [_problemId copyWithZone:zone];
    if (self->_flags.has_creationDate)
    {
        copy->_creationDate = _creationDate;
        copy->_flags.has_creationDate = YES;
    }
    if (self->_flags.has_problemState)
    {
        copy->_problemState = _problemState;
        copy->_flags.has_problemState = YES;
    }
    copy->_problemResolution = [_problemResolution copyWithZone:zone];
    copy->_notification = [_notification copyWithZone:zone];
    copy->_details = [_details copyWithZone:zone];
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPProblemStatus *other = (GEORPProblemStatus *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_problemId && !other->_problemId) || [self->_problemId isEqual:other->_problemId])
    &&
    ((self->_flags.has_creationDate && other->_flags.has_creationDate && self->_creationDate == other->_creationDate) || (!self->_flags.has_creationDate && !other->_flags.has_creationDate))
    &&
    ((self->_flags.has_problemState && other->_flags.has_problemState && self->_problemState == other->_problemState) || (!self->_flags.has_problemState && !other->_flags.has_problemState))
    &&
    ((!self->_problemResolution && !other->_problemResolution) || [self->_problemResolution isEqual:other->_problemResolution])
    &&
    ((!self->_notification && !other->_notification) || [self->_notification isEqual:other->_notification])
    &&
    ((!self->_details && !other->_details) || [self->_details isEqual:other->_details])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_problemId hash]
    ^
    (self->_flags.has_creationDate ? PBHashDouble(self->_creationDate) : 0)
    ^
    (self->_flags.has_problemState ? PBHashInt((NSUInteger)self->_problemState) : 0)
    ^
    [self->_problemResolution hash]
    ^
    [self->_notification hash]
    ^
    [self->_details hash]
    ;
}

- (void)mergeFrom:(GEORPProblemStatus *)other
{
    [other readAll:NO];
    if (other->_problemId)
    {
        [self setProblemId:other->_problemId];
    }
    if (other->_flags.has_creationDate)
    {
        self->_creationDate = other->_creationDate;
        self->_flags.has_creationDate = 1;
    }
    if (other->_flags.has_problemState)
    {
        self->_problemState = other->_problemState;
        self->_flags.has_problemState = 1;
    }
    if (self->_problemResolution && other->_problemResolution)
    {
        [self->_problemResolution mergeFrom:other->_problemResolution];
    }
    else if (!self->_problemResolution && other->_problemResolution)
    {
        [self setProblemResolution:other->_problemResolution];
    }
    if (self->_notification && other->_notification)
    {
        [self->_notification mergeFrom:other->_notification];
    }
    else if (!self->_notification && other->_notification)
    {
        [self setNotification:other->_notification];
    }
    if (self->_details && other->_details)
    {
        [self->_details mergeFrom:other->_details];
    }
    else if (!self->_details && other->_details)
    {
        [self setDetails:other->_details];
    }
}


@end


