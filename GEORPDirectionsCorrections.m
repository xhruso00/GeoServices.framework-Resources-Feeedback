// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPDirectionsCorrections.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEORPCorrectedCoordinate.h>
#import <GeoServices/GEORPInstructionCorrection.h>
#import <GeoServices/GEORPSuggestedRouteIndex.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPDirectionsCorrections

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readDirectionsResponseId {
    if (_flags.read_directionsResponseId) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_directionsResponseId) {
            static const uint32_t tags[] = {1, 0};
            GEORPDirectionsCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasDirectionsResponseId
{
    [self _readDirectionsResponseId];
    return _directionsResponseId != nil;
}
- (NSData *)directionsResponseId
{
    [self _readDirectionsResponseId];
    return _directionsResponseId;
}
- (void)setDirectionsResponseId:(NSData *)v
{
    _flags.read_directionsResponseId = 1;
    _flags.wrote_directionsResponseId = 1;
    _directionsResponseId = v;
}

- (void)_readProblematicRouteIndexs {
    if (_flags.read_problematicRouteIndexs) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_problematicRouteIndexs) {
            static const uint32_t tags[] = {2, 0};
            GEORPDirectionsCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPSuggestedRouteIndex *> *)problematicRouteIndexs
{
    [self _readProblematicRouteIndexs];
    return _problematicRouteIndexs;
}
- (void)setProblematicRouteIndexs:(NSMutableArray<GEORPSuggestedRouteIndex *> *)v
{
    _flags.read_problematicRouteIndexs = 1;
    _flags.wrote_problematicRouteIndexs = 1;
    _problematicRouteIndexs = v;
}
- (void)clearProblematicRouteIndexs
{
    _flags.read_problematicRouteIndexs = 1;
    _flags.wrote_problematicRouteIndexs = 1;
    [_problematicRouteIndexs removeAllObjects];
}
- (void)addProblematicRouteIndex:(GEORPSuggestedRouteIndex *)i
{
    [self _readProblematicRouteIndexs];
    [self _addNoFlagsProblematicRouteIndex:i];
    _flags.read_problematicRouteIndexs = 1;
    _flags.wrote_problematicRouteIndexs = 1;
}
- (void)_addNoFlagsProblematicRouteIndex:(GEORPSuggestedRouteIndex *)i
{
    if (!_problematicRouteIndexs)
    {
        _problematicRouteIndexs = [[NSMutableArray alloc] init];
    }
    [_problematicRouteIndexs addObject:i];
}
- (NSUInteger)problematicRouteIndexsCount
{
    [self _readProblematicRouteIndexs];
    return [_problematicRouteIndexs count];
}
- (GEORPSuggestedRouteIndex *)problematicRouteIndexAtIndex:(NSUInteger)idx
{
    [self _readProblematicRouteIndexs];
    return [_problematicRouteIndexs objectAtIndex:idx];
}
+ (Class)problematicRouteIndexType
{
    return [GEORPSuggestedRouteIndex class];
}

- (void)_readInstructionCorrections {
    if (_flags.read_instructionCorrections) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_instructionCorrections) {
            static const uint32_t tags[] = {3, 0};
            GEORPDirectionsCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPInstructionCorrection *> *)instructionCorrections
{
    [self _readInstructionCorrections];
    return _instructionCorrections;
}
- (void)setInstructionCorrections:(NSMutableArray<GEORPInstructionCorrection *> *)v
{
    _flags.read_instructionCorrections = 1;
    _flags.wrote_instructionCorrections = 1;
    _instructionCorrections = v;
}
- (void)clearInstructionCorrections
{
    _flags.read_instructionCorrections = 1;
    _flags.wrote_instructionCorrections = 1;
    [_instructionCorrections removeAllObjects];
}
- (void)addInstructionCorrection:(GEORPInstructionCorrection *)i
{
    [self _readInstructionCorrections];
    [self _addNoFlagsInstructionCorrection:i];
    _flags.read_instructionCorrections = 1;
    _flags.wrote_instructionCorrections = 1;
}
- (void)_addNoFlagsInstructionCorrection:(GEORPInstructionCorrection *)i
{
    if (!_instructionCorrections)
    {
        _instructionCorrections = [[NSMutableArray alloc] init];
    }
    [_instructionCorrections addObject:i];
}
- (NSUInteger)instructionCorrectionsCount
{
    [self _readInstructionCorrections];
    return [_instructionCorrections count];
}
- (GEORPInstructionCorrection *)instructionCorrectionAtIndex:(NSUInteger)idx
{
    [self _readInstructionCorrections];
    return [_instructionCorrections objectAtIndex:idx];
}
+ (Class)instructionCorrectionType
{
    return [GEORPInstructionCorrection class];
}

- (void)_readOverviewScreenshotImageId {
    if (_flags.read_overviewScreenshotImageId) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_overviewScreenshotImageId) {
            static const uint32_t tags[] = {4, 0};
            GEORPDirectionsCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasOverviewScreenshotImageId
{
    [self _readOverviewScreenshotImageId];
    return _overviewScreenshotImageId != nil;
}
- (NSString *)overviewScreenshotImageId
{
    [self _readOverviewScreenshotImageId];
    return _overviewScreenshotImageId;
}
- (void)setOverviewScreenshotImageId:(NSString *)v
{
    _flags.read_overviewScreenshotImageId = 1;
    _flags.wrote_overviewScreenshotImageId = 1;
    _overviewScreenshotImageId = v;
}

- (void)_readArrivalCoordinate {
    if (_flags.read_arrivalCoordinate) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_arrivalCoordinate) {
            static const uint32_t tags[] = {5, 0};
            GEORPDirectionsCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasArrivalCoordinate
{
    [self _readArrivalCoordinate];
    return _arrivalCoordinate != nil;
}
- (GEORPCorrectedCoordinate *)arrivalCoordinate
{
    [self _readArrivalCoordinate];
    return _arrivalCoordinate;
}
- (void)setArrivalCoordinate:(GEORPCorrectedCoordinate *)v
{
    _flags.read_arrivalCoordinate = 1;
    _flags.wrote_arrivalCoordinate = 1;
    _arrivalCoordinate = v;
}

- (BOOL)noGoodRoutesShown
{
    return _noGoodRoutesShown;
}
- (void)setNoGoodRoutesShown:(BOOL)v
{
    _flags.wrote_noGoodRoutesShown = 1;
    _flags.has_noGoodRoutesShown = 1;
    _noGoodRoutesShown = v;
}
- (void)setHasNoGoodRoutesShown:(BOOL)f
{
    _flags.wrote_noGoodRoutesShown = 1;
    _flags.has_noGoodRoutesShown = f ? 1 : 0;
}
- (BOOL)hasNoGoodRoutesShown
{
    return (BOOL)_flags.has_noGoodRoutesShown;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        NSData * value = self.directionsResponseId;
        if (value) {
            [dict setObject:value forKey:@"directions_response_id"];
        }
    }

    if ([self->_problematicRouteIndexs count])
    {
        NSMutableArray *problematicRouteIndexsDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_problematicRouteIndexs count]];
        for (GEORPSuggestedRouteIndex * i_problematicRouteIndex in self->_problematicRouteIndexs)
        {
            [problematicRouteIndexsDictReprs addObject:[i_problematicRouteIndex dictionaryRepresentation]];
        }
        [dict setObject:problematicRouteIndexsDictReprs forKey:@"problematic_route_index"];
    }

    if ([self->_instructionCorrections count])
    {
        NSMutableArray *instructionCorrectionsDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_instructionCorrections count]];
        for (GEORPInstructionCorrection * i_instructionCorrection in self->_instructionCorrections)
        {
            [instructionCorrectionsDictReprs addObject:[i_instructionCorrection dictionaryRepresentation]];
        }
        [dict setObject:instructionCorrectionsDictReprs forKey:@"instruction_correction"];
    }

    {
        NSString * value = self.overviewScreenshotImageId;
        if (value) {
            [dict setObject:value forKey:@"overview_screenshot_image_id"];
        }
    }

    {
        GEORPCorrectedCoordinate * value = self.arrivalCoordinate;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"arrival_coordinate"];
        }
    }

    if (self->_flags.has_noGoodRoutesShown)
    {
        [dict setObject:@(self->_noGoodRoutesShown) forKey:@"no_good_routes_shown"];
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPDirectionsCorrectionsReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPDirectionsCorrectionsReadAllFrom(__unsafe_unretained GEORPDirectionsCorrections *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPDirectionsCorrectionsReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPDirectionsCorrectionsReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPDirectionsCorrectionsReadFrom(__unsafe_unretained GEORPDirectionsCorrections *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPDirectionsCorrectionsReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPDirectionsCorrectionsReadSpecified(__unsafe_unretained GEORPDirectionsCorrections *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_directionsResponseId
        + self->_flags.read_problematicRouteIndexs
        + self->_flags.read_instructionCorrections
        + self->_flags.read_overviewScreenshotImageId
        + self->_flags.read_arrivalCoordinate
        + self->_flags.read_unknownFields
        ;
    #define requiredLazyFieldCount 4 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL shouldParseUnknown = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            case TAG_UNKNOWN_FIELDS:
                shouldParseUnknown = YES;
                ++readLazyCount;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
        shouldParseUnknown = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !(readAll || shouldParseUnknown);
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* directionsResponseId */:
            {
                if (!shouldParseTag || self->_flags.read_directionsResponseId) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_directionsResponseId) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSData * new_directionsResponseId = PBReaderReadData(reader);
                self->_directionsResponseId = new_directionsResponseId;

                --tagsRemaining;
            }
            break;
            case 2 /* problematicRouteIndexs */:
            {
                if (!shouldParseTag || self->_flags.read_problematicRouteIndexs) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPSuggestedRouteIndex *new_problematicRouteIndex = [[GEORPSuggestedRouteIndex alloc] init];
                [self _addNoFlagsProblematicRouteIndex:new_problematicRouteIndex];
                PBDataReaderMark mark_problematicRouteIndex;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_problematicRouteIndex);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPSuggestedRouteIndexReadAllFrom(new_problematicRouteIndex, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_problematicRouteIndex);

            }
            break;
            case 3 /* instructionCorrections */:
            {
                if (!shouldParseTag || self->_flags.read_instructionCorrections) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPInstructionCorrection *new_instructionCorrection = [[GEORPInstructionCorrection alloc] init];
                [self _addNoFlagsInstructionCorrection:new_instructionCorrection];
                PBDataReaderMark mark_instructionCorrection;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_instructionCorrection);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPInstructionCorrectionReadAllFrom(new_instructionCorrection, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_instructionCorrection);

            }
            break;
            case 4 /* overviewScreenshotImageId */:
            {
                if (!shouldParseTag || self->_flags.read_overviewScreenshotImageId) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_overviewScreenshotImageId) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_overviewScreenshotImageId = PBReaderReadString(reader);
                self->_overviewScreenshotImageId = new_overviewScreenshotImageId;

                --tagsRemaining;
            }
            break;
            case 5 /* arrivalCoordinate */:
            {
                if (!shouldParseTag || self->_flags.read_arrivalCoordinate) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_arrivalCoordinate) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPCorrectedCoordinate *new_arrivalCoordinate = [[GEORPCorrectedCoordinate alloc] init];
                self->_arrivalCoordinate = new_arrivalCoordinate;
                PBDataReaderMark mark_arrivalCoordinate;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_arrivalCoordinate);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPCorrectedCoordinateReadAllFrom(new_arrivalCoordinate, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_arrivalCoordinate);

                --tagsRemaining;
            }
            break;
            case 6 /* noGoodRoutesShown */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_noGoodRoutesShown = YES;
                self->_noGoodRoutesShown = PBReaderReadBOOL(reader);

            }
            break;
            default:
                if (!shouldParseUnknown || self->_flags.read_unknownFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }

    if (shouldParseUnknown) {
        self->_flags.read_unknownFields = YES;
    }

    if (readAll) {
        if (recursively) {
            for (GEORPSuggestedRouteIndex * i in self->_problematicRouteIndexs)
                [i readAll:YES];
            for (GEORPInstructionCorrection * i in self->_instructionCorrections)
                [i readAll:YES];
            [self->_arrivalCoordinate readAll:YES];
        }
        self->_flags.read_directionsResponseId = YES;
        self->_flags.read_problematicRouteIndexs = YES;
        self->_flags.read_instructionCorrections = YES;
        self->_flags.read_overviewScreenshotImageId = YES;
        self->_flags.read_arrivalCoordinate = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* directionsResponseId */:
                    self->_flags.read_directionsResponseId = YES;
                    break;
                case 2 /* problematicRouteIndexs */:
                    self->_flags.read_problematicRouteIndexs = YES;
                    break;
                case 3 /* instructionCorrections */:
                    self->_flags.read_instructionCorrections = YES;
                    break;
                case 4 /* overviewScreenshotImageId */:
                    self->_flags.read_overviewScreenshotImageId = YES;
                    break;
                case 5 /* arrivalCoordinate */:
                    self->_flags.read_arrivalCoordinate = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPDirectionsCorrectionsIsValid(reader);
}

BOOL GEORPDirectionsCorrectionsIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* directionsResponseId */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 2 /* problematicRouteIndexs */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_problematicRouteIndex;
                    if (!PBReaderPlaceMark(reader, &mark_problematicRouteIndex))
                        returnValue(NO);
                    if (!GEORPSuggestedRouteIndexIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_problematicRouteIndex);
                }
                break;
            case 3 /* instructionCorrections */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_instructionCorrection;
                    if (!PBReaderPlaceMark(reader, &mark_instructionCorrection))
                        returnValue(NO);
                    if (!GEORPInstructionCorrectionIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_instructionCorrection);
                }
                break;
            case 4 /* overviewScreenshotImageId */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 5 /* arrivalCoordinate */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_arrivalCoordinate;
                    if (!PBReaderPlaceMark(reader, &mark_arrivalCoordinate))
                        returnValue(NO);
                    if (!GEORPCorrectedCoordinateIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_arrivalCoordinate);
                }
                break;
            case 6 /* noGoodRoutesShown */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPDirectionsCorrectionsReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPDirectionsCorrectionsIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* directionsResponseId */
    {
        if (self->_directionsResponseId)
        {
            PBDataWriterWriteDataField(writer, self->_directionsResponseId, 1);
        }
    }

    /* problematicRouteIndexs */
    {
        for (GEORPSuggestedRouteIndex * i_problematicRouteIndex in self->_problematicRouteIndexs)
        {
            PBDataWriterWriteSubmessage(writer, i_problematicRouteIndex, 2);
        }

    }

    /* instructionCorrections */
    {
        for (GEORPInstructionCorrection * i_instructionCorrection in self->_instructionCorrections)
        {
            PBDataWriterWriteSubmessage(writer, i_instructionCorrection, 3);
        }

    }

    /* overviewScreenshotImageId */
    {
        if (self->_overviewScreenshotImageId)
        {
            PBDataWriterWriteStringField(writer, self->_overviewScreenshotImageId, 4);
        }
    }

    /* arrivalCoordinate */
    {
        if (self->_arrivalCoordinate != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_arrivalCoordinate, 5);
        }
    }

    /* noGoodRoutesShown */
    {
        if (self->_flags.has_noGoodRoutesShown)
        {
            PBDataWriterWriteBOOLField(writer, self->_noGoodRoutesShown, 6);
        }
    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}

BOOL GEORPDirectionsCorrectionsIsDirty(__unsafe_unretained GEORPDirectionsCorrections *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_directionsResponseId
        || self->_flags.read_directionsResponseId
        || self->_flags.wrote_problematicRouteIndexs
        || self->_flags.read_problematicRouteIndexs
        || self->_flags.wrote_instructionCorrections
        || self->_flags.wrote_overviewScreenshotImageId
        || self->_flags.read_overviewScreenshotImageId
        || self->_flags.wrote_arrivalCoordinate
        || (self->_flags.read_arrivalCoordinate && GEORPCorrectedCoordinateIsDirty(self->_arrivalCoordinate))
        || self->_flags.wrote_noGoodRoutesShown
        || self->_flags.wrote_unknownFields
    ;

    if (!dirty) {

            if (self->_flags.read_instructionCorrections) {
                for (GEORPInstructionCorrection *i in self->_instructionCorrections) {
                    if (GEORPInstructionCorrectionIsDirty(i)) {
                        return YES;
                    }
                }
            }
    }

    return dirty;
}


- (void)copyTo:(GEORPDirectionsCorrections *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_directionsResponseId)
    {
        other.directionsResponseId = _directionsResponseId;
    }
    if ([self problematicRouteIndexsCount])
    {
        [other clearProblematicRouteIndexs];
        NSUInteger problematicRouteIndexsCnt = [self problematicRouteIndexsCount];
        for (NSUInteger i = 0; i < problematicRouteIndexsCnt; i++)
        {
            [other addProblematicRouteIndex:[self problematicRouteIndexAtIndex:i]];
        }
    }
    if ([self instructionCorrectionsCount])
    {
        [other clearInstructionCorrections];
        NSUInteger instructionCorrectionsCnt = [self instructionCorrectionsCount];
        for (NSUInteger i = 0; i < instructionCorrectionsCnt; i++)
        {
            [other addInstructionCorrection:[self instructionCorrectionAtIndex:i]];
        }
    }
    if (_overviewScreenshotImageId)
    {
        other.overviewScreenshotImageId = _overviewScreenshotImageId;
    }
    if (_arrivalCoordinate)
    {
        other.arrivalCoordinate = _arrivalCoordinate;
    }
    if (self->_flags.has_noGoodRoutesShown)
    {
        other->_noGoodRoutesShown = _noGoodRoutesShown;
        other->_flags.has_noGoodRoutesShown = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPDirectionsCorrections *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_directionsResponseId
                || _flags.wrote_problematicRouteIndexs
                || _flags.wrote_instructionCorrections
                || _flags.wrote_overviewScreenshotImageId
                || _flags.wrote_arrivalCoordinate
                || _flags.wrote_noGoodRoutesShown
                || _flags.wrote_unknownFields
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPDirectionsCorrectionsReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_directionsResponseId = [_directionsResponseId copyWithZone:zone];
    for (GEORPSuggestedRouteIndex * v in _problematicRouteIndexs)
    {
        GEORPSuggestedRouteIndex * vCopy = [v copyWithZone:zone];
        [copy addProblematicRouteIndex:vCopy];
    }
    for (GEORPInstructionCorrection * v in _instructionCorrections)
    {
        GEORPInstructionCorrection * vCopy = [v copyWithZone:zone];
        [copy addInstructionCorrection:vCopy];
    }
    copy->_overviewScreenshotImageId = [_overviewScreenshotImageId copyWithZone:zone];
    copy->_arrivalCoordinate = [_arrivalCoordinate copyWithZone:zone];
    if (self->_flags.has_noGoodRoutesShown)
    {
        copy->_noGoodRoutesShown = _noGoodRoutesShown;
        copy->_flags.has_noGoodRoutesShown = YES;
    }
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPDirectionsCorrections *other = (GEORPDirectionsCorrections *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_directionsResponseId && !other->_directionsResponseId) || [self->_directionsResponseId isEqual:other->_directionsResponseId])
    &&
    ((!self->_problematicRouteIndexs && !other->_problematicRouteIndexs) || [self->_problematicRouteIndexs isEqual:other->_problematicRouteIndexs])

    &&
    ((!self->_instructionCorrections && !other->_instructionCorrections) || [self->_instructionCorrections isEqual:other->_instructionCorrections])

    &&
    ((!self->_overviewScreenshotImageId && !other->_overviewScreenshotImageId) || [self->_overviewScreenshotImageId isEqual:other->_overviewScreenshotImageId])
    &&
    ((!self->_arrivalCoordinate && !other->_arrivalCoordinate) || [self->_arrivalCoordinate isEqual:other->_arrivalCoordinate])
    &&
    ((self->_flags.has_noGoodRoutesShown && other->_flags.has_noGoodRoutesShown && ((self->_noGoodRoutesShown && other->_noGoodRoutesShown) || (!self->_noGoodRoutesShown && !other->_noGoodRoutesShown))) || (!self->_flags.has_noGoodRoutesShown && !other->_flags.has_noGoodRoutesShown))
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_directionsResponseId hash]
    ^
    [self->_problematicRouteIndexs hash]
    ^
    [self->_instructionCorrections hash]
    ^
    [self->_overviewScreenshotImageId hash]
    ^
    [self->_arrivalCoordinate hash]
    ^
    (self->_flags.has_noGoodRoutesShown ? PBHashInt((NSUInteger)self->_noGoodRoutesShown) : 0)
    ;
}

- (void)mergeFrom:(GEORPDirectionsCorrections *)other
{
    [other readAll:NO];
    if (other->_directionsResponseId)
    {
        [self setDirectionsResponseId:other->_directionsResponseId];
    }
    for (GEORPSuggestedRouteIndex * iter_problematicRouteIndexs in other->_problematicRouteIndexs)
    {
        [self addProblematicRouteIndex:iter_problematicRouteIndexs];
    }
    for (GEORPInstructionCorrection * iter_instructionCorrections in other->_instructionCorrections)
    {
        [self addInstructionCorrection:iter_instructionCorrections];
    }
    if (other->_overviewScreenshotImageId)
    {
        [self setOverviewScreenshotImageId:other->_overviewScreenshotImageId];
    }
    if (self->_arrivalCoordinate && other->_arrivalCoordinate)
    {
        [self->_arrivalCoordinate mergeFrom:other->_arrivalCoordinate];
    }
    else if (!self->_arrivalCoordinate && other->_arrivalCoordinate)
    {
        [self setArrivalCoordinate:other->_arrivalCoordinate];
    }
    if (other->_flags.has_noGoodRoutesShown)
    {
        self->_noGoodRoutesShown = other->_noGoodRoutesShown;
        self->_flags.has_noGoodRoutesShown = 1;
    }
}

- (PBUnknownFields *)unknownFields
{
    if (_flags.read_unknownFields) return _unknownFields;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return _unknownFields;
    @synchronized(reader) {
        if (!_flags.read_unknownFields) {
            static const uint32_t tags[] = {TAG_UNKNOWN_FIELDS, 0};
            GEORPDirectionsCorrectionsReadSpecified(self, reader, tags);
        }
    }
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _flags.read_unknownFields = 1;
    _flags.wrote_unknownFields = 1;
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
}

@end


