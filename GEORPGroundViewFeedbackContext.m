// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPGroundViewFeedbackContext.h"

#if defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED

#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEOPDMuninViewState.h>
#import <GeoServices/GEORPFeatureHandle.h>
#import <GeoServices/GEORPGroundViewImageResource.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPGroundViewFeedbackContext

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)dealloc
{
    PBRepeatedUInt64Clear(&(self->_visiblePlaceMuids));
}

- (void)_readViewState {
    if (_flags.read_viewState) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_viewState) {
            static const uint32_t tags[] = {2, 0};
            GEORPGroundViewFeedbackContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasViewState
{
    [self _readViewState];
    return _viewState != nil;
}
- (GEOPDMuninViewState *)viewState
{
    [self _readViewState];
    return _viewState;
}
- (void)setViewState:(GEOPDMuninViewState *)v
{
    _flags.read_viewState = 1;
    _flags.wrote_viewState = 1;
    _viewState = v;
}

- (uint32_t)metadataTileBuildId
{
    return _metadataTileBuildId;
}
- (void)setMetadataTileBuildId:(uint32_t)v
{
    _flags.wrote_metadataTileBuildId = 1;
    _flags.has_metadataTileBuildId = 1;
    _metadataTileBuildId = v;
}
- (void)setHasMetadataTileBuildId:(BOOL)f
{
    _flags.wrote_metadataTileBuildId = 1;
    _flags.has_metadataTileBuildId = f ? 1 : 0;
}
- (BOOL)hasMetadataTileBuildId
{
    return (BOOL)_flags.has_metadataTileBuildId;
}

- (void)_readOnscreenImageResources {
    if (_flags.read_onscreenImageResources) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_onscreenImageResources) {
            static const uint32_t tags[] = {5, 0};
            GEORPGroundViewFeedbackContextReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPGroundViewImageResource *> *)onscreenImageResources
{
    [self _readOnscreenImageResources];
    return _onscreenImageResources;
}
- (void)setOnscreenImageResources:(NSMutableArray<GEORPGroundViewImageResource *> *)v
{
    _flags.read_onscreenImageResources = 1;
    _flags.wrote_onscreenImageResources = 1;
    _onscreenImageResources = v;
}
- (void)clearOnscreenImageResources
{
    _flags.read_onscreenImageResources = 1;
    _flags.wrote_onscreenImageResources = 1;
    [_onscreenImageResources removeAllObjects];
}
- (void)addOnscreenImageResource:(GEORPGroundViewImageResource *)i
{
    [self _readOnscreenImageResources];
    [self _addNoFlagsOnscreenImageResource:i];
    _flags.read_onscreenImageResources = 1;
    _flags.wrote_onscreenImageResources = 1;
}
- (void)_addNoFlagsOnscreenImageResource:(GEORPGroundViewImageResource *)i
{
    if (!_onscreenImageResources)
    {
        _onscreenImageResources = [[NSMutableArray alloc] init];
    }
    [_onscreenImageResources addObject:i];
}
- (NSUInteger)onscreenImageResourcesCount
{
    [self _readOnscreenImageResources];
    return [_onscreenImageResources count];
}
- (GEORPGroundViewImageResource *)onscreenImageResourceAtIndex:(NSUInteger)idx
{
    [self _readOnscreenImageResources];
    return [_onscreenImageResources objectAtIndex:idx];
}
+ (Class)onscreenImageResourceType
{
    return [GEORPGroundViewImageResource class];
}

- (void)_readVisiblePlaceMuids {
    if (_flags.read_visiblePlaceMuids) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_visiblePlaceMuids) {
            static const uint32_t tags[] = {6, 0};
            GEORPGroundViewFeedbackContextReadSpecified(self, reader, tags);
        }
    }
}
- (NSUInteger)visiblePlaceMuidsCount
{
    [self _readVisiblePlaceMuids];
    return _visiblePlaceMuids.count;
}
- (uint64_t *)visiblePlaceMuids
{
    [self _readVisiblePlaceMuids];
    return _visiblePlaceMuids.list;
}
- (void)clearVisiblePlaceMuids
{
    _flags.read_visiblePlaceMuids = 1;
    _flags.wrote_visiblePlaceMuids = 1;
    PBRepeatedUInt64Clear(&_visiblePlaceMuids);
}
- (void)addVisiblePlaceMuid:(uint64_t)i
{
    [self _readVisiblePlaceMuids];
    [self _addNoFlagsVisiblePlaceMuid:i];
    _flags.read_visiblePlaceMuids = 1;
    _flags.wrote_visiblePlaceMuids = 1;
}
- (void)_addNoFlagsVisiblePlaceMuid:(uint64_t)i
{
    PBRepeatedUInt64Add(&_visiblePlaceMuids, i);
}
- (uint64_t)visiblePlaceMuidAtIndex:(NSUInteger)idx
{
    [self _readVisiblePlaceMuids];
    if (_visiblePlaceMuids.count <= idx)
    {
        [[NSException exceptionWithName:NSRangeException reason:[NSString stringWithFormat:@"idx (%tu) is out of range (%tu)", idx, _visiblePlaceMuids.count] userInfo:nil] raise];
    }
    return _visiblePlaceMuids.list[idx];
}
- (void)setVisiblePlaceMuids:(uint64_t *)list count:(NSUInteger)count
{
    _flags.read_visiblePlaceMuids = 1;
    _flags.wrote_visiblePlaceMuids = 1;
    PBRepeatedUInt64Set(&_visiblePlaceMuids, list, count);
}

- (uint64_t)imdataId
{
    return _imdataId;
}
- (void)setImdataId:(uint64_t)v
{
    _flags.wrote_imdataId = 1;
    _flags.has_imdataId = 1;
    _imdataId = v;
}
- (void)setHasImdataId:(BOOL)f
{
    _flags.wrote_imdataId = 1;
    _flags.has_imdataId = f ? 1 : 0;
}
- (BOOL)hasImdataId
{
    return (BOOL)_flags.has_imdataId;
}

- (void)_readImageId {
    if (_flags.read_imageId) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_imageId) {
            static const uint32_t tags[] = {8, 0};
            GEORPGroundViewFeedbackContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasImageId
{
    [self _readImageId];
    return _imageId != nil;
}
- (NSString *)imageId
{
    [self _readImageId];
    return _imageId;
}
- (void)setImageId:(NSString *)v
{
    _flags.read_imageId = 1;
    _flags.wrote_imageId = 1;
    _imageId = v;
}

- (void)_readVisibleFeatureHandles {
    if (_flags.read_visibleFeatureHandles) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_visibleFeatureHandles) {
            static const uint32_t tags[] = {10, 0};
            GEORPGroundViewFeedbackContextReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPFeatureHandle *> *)visibleFeatureHandles
{
    [self _readVisibleFeatureHandles];
    return _visibleFeatureHandles;
}
- (void)setVisibleFeatureHandles:(NSMutableArray<GEORPFeatureHandle *> *)v
{
    _flags.read_visibleFeatureHandles = 1;
    _flags.wrote_visibleFeatureHandles = 1;
    _visibleFeatureHandles = v;
}
- (void)clearVisibleFeatureHandles
{
    _flags.read_visibleFeatureHandles = 1;
    _flags.wrote_visibleFeatureHandles = 1;
    [_visibleFeatureHandles removeAllObjects];
}
- (void)addVisibleFeatureHandle:(GEORPFeatureHandle *)i
{
    [self _readVisibleFeatureHandles];
    [self _addNoFlagsVisibleFeatureHandle:i];
    _flags.read_visibleFeatureHandles = 1;
    _flags.wrote_visibleFeatureHandles = 1;
}
- (void)_addNoFlagsVisibleFeatureHandle:(GEORPFeatureHandle *)i
{
    if (!_visibleFeatureHandles)
    {
        _visibleFeatureHandles = [[NSMutableArray alloc] init];
    }
    [_visibleFeatureHandles addObject:i];
}
- (NSUInteger)visibleFeatureHandlesCount
{
    [self _readVisibleFeatureHandles];
    return [_visibleFeatureHandles count];
}
- (GEORPFeatureHandle *)visibleFeatureHandleAtIndex:(NSUInteger)idx
{
    [self _readVisibleFeatureHandles];
    return [_visibleFeatureHandles objectAtIndex:idx];
}
+ (Class)visibleFeatureHandleType
{
    return [GEORPFeatureHandle class];
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        GEOPDMuninViewState * value = self.viewState;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"view_state"];
        }
    }

    if (self->_flags.has_metadataTileBuildId)
    {
        [dict setObject:@(self->_metadataTileBuildId) forKey:@"metadata_tile_build_id"];
    }

    if ([self->_onscreenImageResources count])
    {
        NSMutableArray *onscreenImageResourcesDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_onscreenImageResources count]];
        for (GEORPGroundViewImageResource * i_onscreenImageResource in self->_onscreenImageResources)
        {
            [onscreenImageResourcesDictReprs addObject:[i_onscreenImageResource dictionaryRepresentation]];
        }
        [dict setObject:onscreenImageResourcesDictReprs forKey:@"onscreen_image_resource"];
    }

    [dict setObject:PBRepeatedUInt64NSArray(&(self->_visiblePlaceMuids)) forKey:@"visible_place_muid"];

    if (self->_flags.has_imdataId)
    {
        [dict setObject:@(self->_imdataId) forKey:@"imdata_id"];
    }

    {
        NSString * value = self.imageId;
        if (value) {
            [dict setObject:value forKey:@"image_id"];
        }
    }

    if ([self->_visibleFeatureHandles count])
    {
        NSMutableArray *visibleFeatureHandlesDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_visibleFeatureHandles count]];
        for (GEORPFeatureHandle * i_visibleFeatureHandle in self->_visibleFeatureHandles)
        {
            [visibleFeatureHandlesDictReprs addObject:[i_visibleFeatureHandle dictionaryRepresentation]];
        }
        [dict setObject:visibleFeatureHandlesDictReprs forKey:@"visible_feature_handle"];
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPGroundViewFeedbackContextReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPGroundViewFeedbackContextReadAllFrom(__unsafe_unretained GEORPGroundViewFeedbackContext *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPGroundViewFeedbackContextReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPGroundViewFeedbackContextReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPGroundViewFeedbackContextReadFrom(__unsafe_unretained GEORPGroundViewFeedbackContext *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPGroundViewFeedbackContextReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPGroundViewFeedbackContextReadSpecified(__unsafe_unretained GEORPGroundViewFeedbackContext *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_viewState
        + self->_flags.read_onscreenImageResources
        + self->_flags.read_visiblePlaceMuids
        + self->_flags.read_imageId
        + self->_flags.read_visibleFeatureHandles
        + self->_flags.read_unknownFields
        ;
    #define requiredLazyFieldCount 4 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL shouldParseUnknown = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            case TAG_UNKNOWN_FIELDS:
                shouldParseUnknown = YES;
                ++readLazyCount;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
        shouldParseUnknown = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !(readAll || shouldParseUnknown);
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 2 /* viewState */:
            {
                if (!shouldParseTag || self->_flags.read_viewState) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_viewState) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOPDMuninViewState *new_viewState = [[GEOPDMuninViewState alloc] init];
                self->_viewState = new_viewState;
                PBDataReaderMark mark_viewState;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_viewState);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPDMuninViewStateReadAllFrom(new_viewState, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_viewState);

                --tagsRemaining;
            }
            break;
            case 4 /* metadataTileBuildId */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_metadataTileBuildId = YES;
                self->_metadataTileBuildId = PBReaderReadUint32(reader);

            }
            break;
            case 5 /* onscreenImageResources */:
            {
                if (!shouldParseTag || self->_flags.read_onscreenImageResources) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPGroundViewImageResource *new_onscreenImageResource = [[GEORPGroundViewImageResource alloc] init];
                [self _addNoFlagsOnscreenImageResource:new_onscreenImageResource];
                PBDataReaderMark mark_onscreenImageResource;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_onscreenImageResource);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPGroundViewImageResourceReadAllFrom(new_onscreenImageResource, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_onscreenImageResource);

            }
            break;
            case 6 /* visiblePlaceMuids */:
            {
                if (!shouldParseTag || self->_flags.read_visiblePlaceMuids) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
            if (TYPE_LENGTH_DELIMITED == aType)
                {
                    PBDataReaderMark mark_visiblePlaceMuid;
                    BOOL markError = !PBReaderPlaceMark(reader, &mark_visiblePlaceMuid);
                    if (markError)
                    {
                        return NO;
                    }
                    while (PBReaderHasMoreData(reader))
                    {
                        uint64_t new_visiblePlaceMuid = PBReaderReadUint64(reader);
                        PBRepeatedUInt64Add(&(self->_visiblePlaceMuids), new_visiblePlaceMuid);
                    }
                    PBReaderRecallMark(reader, &mark_visiblePlaceMuid);
                }
                else
                {
                    PBRepeatedUInt64Add(&(self->_visiblePlaceMuids), PBReaderReadUint64(reader));
                }

            }
            break;
            case 7 /* imdataId */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_imdataId = YES;
                self->_imdataId = PBReaderReadUint64(reader);

            }
            break;
            case 8 /* imageId */:
            {
                if (!shouldParseTag || self->_flags.read_imageId) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_imageId) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_imageId = PBReaderReadString(reader);
                self->_imageId = new_imageId;

                --tagsRemaining;
            }
            break;
            case 10 /* visibleFeatureHandles */:
            {
                if (!shouldParseTag || self->_flags.read_visibleFeatureHandles) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPFeatureHandle *new_visibleFeatureHandle = [[GEORPFeatureHandle alloc] init];
                [self _addNoFlagsVisibleFeatureHandle:new_visibleFeatureHandle];
                PBDataReaderMark mark_visibleFeatureHandle;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_visibleFeatureHandle);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeatureHandleReadAllFrom(new_visibleFeatureHandle, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_visibleFeatureHandle);

            }
            break;
            default:
                if (!shouldParseUnknown || self->_flags.read_unknownFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }

    if (shouldParseUnknown) {
        self->_flags.read_unknownFields = YES;
    }

    if (readAll) {
        if (recursively) {
            [self->_viewState readAll:YES];
            for (GEORPGroundViewImageResource * i in self->_onscreenImageResources)
                [i readAll:YES];
            for (GEORPFeatureHandle * i in self->_visibleFeatureHandles)
                [i readAll:YES];
        }
        self->_flags.read_viewState = YES;
        self->_flags.read_onscreenImageResources = YES;
        self->_flags.read_visiblePlaceMuids = YES;
        self->_flags.read_imageId = YES;
        self->_flags.read_visibleFeatureHandles = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 2 /* viewState */:
                    self->_flags.read_viewState = YES;
                    break;
                case 5 /* onscreenImageResources */:
                    self->_flags.read_onscreenImageResources = YES;
                    break;
                case 6 /* visiblePlaceMuids */:
                    self->_flags.read_visiblePlaceMuids = YES;
                    break;
                case 8 /* imageId */:
                    self->_flags.read_imageId = YES;
                    break;
                case 10 /* visibleFeatureHandles */:
                    self->_flags.read_visibleFeatureHandles = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPGroundViewFeedbackContextIsValid(reader);
}

BOOL GEORPGroundViewFeedbackContextIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 2 /* viewState */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_viewState;
                    if (!PBReaderPlaceMark(reader, &mark_viewState))
                        returnValue(NO);
                    if (!GEOPDMuninViewStateIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_viewState);
                }
                break;
            case 4 /* metadataTileBuildId */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint32(reader);
                break;
            case 5 /* onscreenImageResources */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_onscreenImageResource;
                    if (!PBReaderPlaceMark(reader, &mark_onscreenImageResource))
                        returnValue(NO);
                    if (!GEORPGroundViewImageResourceIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_onscreenImageResource);
                }
                break;
            case 6 /* visiblePlaceMuids */:
                if (TYPE_LENGTH_DELIMITED == aType)
                {
                    PBDataReaderMark mark_visiblePlaceMuid;
                    if (!PBReaderPlaceMark(reader, &mark_visiblePlaceMuid))
                        returnValue(NO);
                    while (PBReaderHasMoreData(reader))
                        PBReaderReadUint64(reader);
                    PBReaderRecallMark(reader, &mark_visiblePlaceMuid);
                }
                else if (TYPE_VARINT != aType)
                    returnValue(NO);
                else
                    PBReaderReadUint64(reader);
                break;
            case 7 /* imdataId */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint64(reader);
                break;
            case 8 /* imageId */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 10 /* visibleFeatureHandles */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_visibleFeatureHandle;
                    if (!PBReaderPlaceMark(reader, &mark_visibleFeatureHandle))
                        returnValue(NO);
                    if (!GEORPFeatureHandleIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_visibleFeatureHandle);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPGroundViewFeedbackContextReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPGroundViewFeedbackContextIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* viewState */
    {
        if (self->_viewState != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_viewState, 2);
        }
    }

    /* metadataTileBuildId */
    {
        if (self->_flags.has_metadataTileBuildId)
        {
            PBDataWriterWriteUint32Field(writer, self->_metadataTileBuildId, 4);
        }
    }

    /* onscreenImageResources */
    {
        for (GEORPGroundViewImageResource * i_onscreenImageResource in self->_onscreenImageResources)
        {
            PBDataWriterWriteSubmessage(writer, i_onscreenImageResource, 5);
        }

    }

    /* visiblePlaceMuids */
    {
        if (self->_visiblePlaceMuids.count)
        {
            NSUInteger i_visiblePlaceMuids;
            for (i_visiblePlaceMuids = 0; i_visiblePlaceMuids < self->_visiblePlaceMuids.count; i_visiblePlaceMuids++)
            {
                PBDataWriterWriteUint64Field(writer, self->_visiblePlaceMuids.list[i_visiblePlaceMuids], 6);
            }
        }

    }

    /* imdataId */
    {
        if (self->_flags.has_imdataId)
        {
            PBDataWriterWriteUint64Field(writer, self->_imdataId, 7);
        }
    }

    /* imageId */
    {
        if (self->_imageId)
        {
            PBDataWriterWriteStringField(writer, self->_imageId, 8);
        }
    }

    /* visibleFeatureHandles */
    {
        for (GEORPFeatureHandle * i_visibleFeatureHandle in self->_visibleFeatureHandles)
        {
            PBDataWriterWriteSubmessage(writer, i_visibleFeatureHandle, 10);
        }

    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}

BOOL GEORPGroundViewFeedbackContextIsDirty(__unsafe_unretained GEORPGroundViewFeedbackContext *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_viewState
        || (self->_flags.read_viewState && GEOPDMuninViewStateIsDirty(self->_viewState))
        || self->_flags.wrote_metadataTileBuildId
        || self->_flags.wrote_onscreenImageResources
        || self->_flags.read_onscreenImageResources
        || self->_flags.wrote_visiblePlaceMuids
        || self->_flags.read_visiblePlaceMuids
        || self->_flags.wrote_imdataId
        || self->_flags.wrote_imageId
        || self->_flags.read_imageId
        || self->_flags.wrote_visibleFeatureHandles
        || self->_flags.read_visibleFeatureHandles
        || self->_flags.wrote_unknownFields
    ;


    return dirty;
}


- (void)copyTo:(GEORPGroundViewFeedbackContext *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_viewState)
    {
        other.viewState = _viewState;
    }
    if (self->_flags.has_metadataTileBuildId)
    {
        other->_metadataTileBuildId = _metadataTileBuildId;
        other->_flags.has_metadataTileBuildId = YES;
    }
    if ([self onscreenImageResourcesCount])
    {
        [other clearOnscreenImageResources];
        NSUInteger onscreenImageResourcesCnt = [self onscreenImageResourcesCount];
        for (NSUInteger i = 0; i < onscreenImageResourcesCnt; i++)
        {
            [other addOnscreenImageResource:[self onscreenImageResourceAtIndex:i]];
        }
    }
    if ([self visiblePlaceMuidsCount])
    {
        [other clearVisiblePlaceMuids];
        NSUInteger visiblePlaceMuidsCnt = [self visiblePlaceMuidsCount];
        for (NSUInteger i = 0; i < visiblePlaceMuidsCnt; i++)
        {
            [other addVisiblePlaceMuid:[self visiblePlaceMuidAtIndex:i]];
        }
    }
    if (self->_flags.has_imdataId)
    {
        other->_imdataId = _imdataId;
        other->_flags.has_imdataId = YES;
    }
    if (_imageId)
    {
        other.imageId = _imageId;
    }
    if ([self visibleFeatureHandlesCount])
    {
        [other clearVisibleFeatureHandles];
        NSUInteger visibleFeatureHandlesCnt = [self visibleFeatureHandlesCount];
        for (NSUInteger i = 0; i < visibleFeatureHandlesCnt; i++)
        {
            [other addVisibleFeatureHandle:[self visibleFeatureHandleAtIndex:i]];
        }
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPGroundViewFeedbackContext *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_viewState
                || _flags.wrote_metadataTileBuildId
                || _flags.wrote_onscreenImageResources
                || _flags.wrote_visiblePlaceMuids
                || _flags.wrote_imdataId
                || _flags.wrote_imageId
                || _flags.wrote_visibleFeatureHandles
                || _flags.wrote_unknownFields
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPGroundViewFeedbackContextReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_viewState = [_viewState copyWithZone:zone];
    if (self->_flags.has_metadataTileBuildId)
    {
        copy->_metadataTileBuildId = _metadataTileBuildId;
        copy->_flags.has_metadataTileBuildId = YES;
    }
    for (GEORPGroundViewImageResource * v in _onscreenImageResources)
    {
        GEORPGroundViewImageResource * vCopy = [v copyWithZone:zone];
        [copy addOnscreenImageResource:vCopy];
    }
    PBRepeatedUInt64Copy(&(copy->_visiblePlaceMuids), &_visiblePlaceMuids);
    if (self->_flags.has_imdataId)
    {
        copy->_imdataId = _imdataId;
        copy->_flags.has_imdataId = YES;
    }
    copy->_imageId = [_imageId copyWithZone:zone];
    for (GEORPFeatureHandle * v in _visibleFeatureHandles)
    {
        GEORPFeatureHandle * vCopy = [v copyWithZone:zone];
        [copy addVisibleFeatureHandle:vCopy];
    }
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPGroundViewFeedbackContext *other = (GEORPGroundViewFeedbackContext *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_viewState && !other->_viewState) || [self->_viewState isEqual:other->_viewState])
    &&
    ((self->_flags.has_metadataTileBuildId && other->_flags.has_metadataTileBuildId && self->_metadataTileBuildId == other->_metadataTileBuildId) || (!self->_flags.has_metadataTileBuildId && !other->_flags.has_metadataTileBuildId))
    &&
    ((!self->_onscreenImageResources && !other->_onscreenImageResources) || [self->_onscreenImageResources isEqual:other->_onscreenImageResources])

    &&
    PBRepeatedUInt64IsEqual(&(self->_visiblePlaceMuids), &(other->_visiblePlaceMuids))

    &&
    ((self->_flags.has_imdataId && other->_flags.has_imdataId && self->_imdataId == other->_imdataId) || (!self->_flags.has_imdataId && !other->_flags.has_imdataId))
    &&
    ((!self->_imageId && !other->_imageId) || [self->_imageId isEqual:other->_imageId])
    &&
    ((!self->_visibleFeatureHandles && !other->_visibleFeatureHandles) || [self->_visibleFeatureHandles isEqual:other->_visibleFeatureHandles])

    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_viewState hash]
    ^
    (self->_flags.has_metadataTileBuildId ? PBHashInt((NSUInteger)self->_metadataTileBuildId) : 0)
    ^
    [self->_onscreenImageResources hash]
    ^
    PBRepeatedUInt64Hash(&(self->_visiblePlaceMuids))
    ^
    (self->_flags.has_imdataId ? PBHashInt((NSUInteger)self->_imdataId) : 0)
    ^
    [self->_imageId hash]
    ^
    [self->_visibleFeatureHandles hash]
    ;
}

- (void)mergeFrom:(GEORPGroundViewFeedbackContext *)other
{
    [other readAll:NO];
    if (self->_viewState && other->_viewState)
    {
        [self->_viewState mergeFrom:other->_viewState];
    }
    else if (!self->_viewState && other->_viewState)
    {
        [self setViewState:other->_viewState];
    }
    if (other->_flags.has_metadataTileBuildId)
    {
        self->_metadataTileBuildId = other->_metadataTileBuildId;
        self->_flags.has_metadataTileBuildId = 1;
    }
    for (GEORPGroundViewImageResource * iter_onscreenImageResources in other->_onscreenImageResources)
    {
        [self addOnscreenImageResource:iter_onscreenImageResources];
    }
    NSUInteger visiblePlaceMuidsCnt = [other visiblePlaceMuidsCount];
    for (NSUInteger i = 0; i < visiblePlaceMuidsCnt; i++)
    {
        [self addVisiblePlaceMuid:[other visiblePlaceMuidAtIndex:i]];
    }
    if (other->_flags.has_imdataId)
    {
        self->_imdataId = other->_imdataId;
        self->_flags.has_imdataId = 1;
    }
    if (other->_imageId)
    {
        [self setImageId:other->_imageId];
    }
    for (GEORPFeatureHandle * iter_visibleFeatureHandles in other->_visibleFeatureHandles)
    {
        [self addVisibleFeatureHandle:iter_visibleFeatureHandles];
    }
}

- (PBUnknownFields *)unknownFields
{
    if (_flags.read_unknownFields) return _unknownFields;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return _unknownFields;
    @synchronized(reader) {
        if (!_flags.read_unknownFields) {
            static const uint32_t tags[] = {TAG_UNKNOWN_FIELDS, 0};
            GEORPGroundViewFeedbackContextReadSpecified(self, reader, tags);
        }
    }
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _flags.read_unknownFields = 1;
    _flags.wrote_unknownFields = 1;
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
    for (GEORPGroundViewImageResource * v in self.onscreenImageResources) {
        [v clearUnknownFields:YES];
    }
}

@end


#endif // defined(GEO_MUNIN_ENABLED) && GEO_MUNIN_ENABLED
