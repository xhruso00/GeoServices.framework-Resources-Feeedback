// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPFeatureHandle.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPFeatureHandle


- (void)dealloc
{
    [self clearStyleAttributes];
}

- (uint32_t)featureIndex
{
    return _featureIndex;
}
- (void)setFeatureIndex:(uint32_t)v
{
    _flags.has_featureIndex = 1;
    _featureIndex = v;
}
- (void)setHasFeatureIndex:(BOOL)f
{
    _flags.has_featureIndex = f ? 1 : 0;
}
- (BOOL)hasFeatureIndex
{
    return (BOOL)_flags.has_featureIndex;
}

- (uint32_t)featureTileX
{
    return _featureTileX;
}
- (void)setFeatureTileX:(uint32_t)v
{
    _flags.has_featureTileX = 1;
    _featureTileX = v;
}
- (void)setHasFeatureTileX:(BOOL)f
{
    _flags.has_featureTileX = f ? 1 : 0;
}
- (BOOL)hasFeatureTileX
{
    return (BOOL)_flags.has_featureTileX;
}

- (uint32_t)featureTileY
{
    return _featureTileY;
}
- (void)setFeatureTileY:(uint32_t)v
{
    _flags.has_featureTileY = 1;
    _featureTileY = v;
}
- (void)setHasFeatureTileY:(BOOL)f
{
    _flags.has_featureTileY = f ? 1 : 0;
}
- (BOOL)hasFeatureTileY
{
    return (BOOL)_flags.has_featureTileY;
}

- (uint32_t)featureTileZ
{
    return _featureTileZ;
}
- (void)setFeatureTileZ:(uint32_t)v
{
    _flags.has_featureTileZ = 1;
    _featureTileZ = v;
}
- (void)setHasFeatureTileZ:(BOOL)f
{
    _flags.has_featureTileZ = f ? 1 : 0;
}
- (BOOL)hasFeatureTileZ
{
    return (BOOL)_flags.has_featureTileZ;
}

- (GEOTileSetStyle)style
{
    return _flags.has_style ? _style : GEOTileSetStyle_RASTER_STANDARD;
}
- (void)setStyle:(GEOTileSetStyle)v
{
    _flags.has_style = 1;
    _style = v;
}
- (void)setHasStyle:(BOOL)f
{
    _flags.has_style = f ? 1 : 0;
}
- (BOOL)hasStyle
{
    return (BOOL)_flags.has_style;
}
- (NSString *)styleAsString:(GEOTileSetStyle)value
{
    return GEOTileSetStyleAsString(value);
}
- (GEOTileSetStyle)StringAsStyle:(NSString *)str
{
    return StringAsGEOTileSetStyle(str);
}

- (uint32_t)identifier
{
    return _identifier;
}
- (void)setIdentifier:(uint32_t)v
{
    _flags.has_identifier = 1;
    _identifier = v;
}
- (void)setHasIdentifier:(BOOL)f
{
    _flags.has_identifier = f ? 1 : 0;
}
- (BOOL)hasIdentifier
{
    return (BOOL)_flags.has_identifier;
}

- (GEORPFeatureHandle_Type)type
{
    return _flags.has_type ? _type : GEORPFeatureHandle_Type_NONE;
}
- (void)setType:(GEORPFeatureHandle_Type)v
{
    _flags.has_type = 1;
    _type = v;
}
- (void)setHasType:(BOOL)f
{
    _flags.has_type = f ? 1 : 0;
}
- (BOOL)hasType
{
    return (BOOL)_flags.has_type;
}
- (NSString *)typeAsString:(GEORPFeatureHandle_Type)value
{
    return GEORPFeatureHandle_TypeAsString(value);
}
- (GEORPFeatureHandle_Type)StringAsType:(NSString *)str
{
    return StringAsGEORPFeatureHandle_Type(str);
}

- (NSUInteger)styleAttributesCount
{
    return _styleAttributesCount;
}
- (GEORPFeatureHandleStyleAttribute *)styleAttributes
{
    return _styleAttributes;
}
static BOOL _reserveStyleAttributes(GEORPFeatureHandle *self, NSUInteger count)
{
    if (count == 0) return NO;
    if (self->_styleAttributesCount + count <= self->_styleAttributesCount) return NO;
    if (self->_styleAttributesSpace >= self->_styleAttributesCount + count) return YES;
    NSUInteger newSpace = PBNextPowerOf2NSUInteger(self->_styleAttributesSpace + count);
    if (newSpace < count) return NO;
    NSUInteger newSize = newSpace * sizeof(GEORPFeatureHandleStyleAttribute);
    if (newSize < newSpace) return NO;
    void *newList = realloc(self->_styleAttributes, newSize);
    if (!newList) return NO;
    self->_styleAttributesSpace = newSpace;
    self->_styleAttributes = newList;
    bzero(self->_styleAttributes + self->_styleAttributesCount, sizeof(GEORPFeatureHandleStyleAttribute) * (self->_styleAttributesSpace - self->_styleAttributesCount));
    return YES;
}
- (void)clearStyleAttributes
{
    self->_styleAttributesSpace = 0;
    self->_styleAttributesCount = 0;
    free(self->_styleAttributes);
    self->_styleAttributes = NULL;
}
- (void)addStyleAttribute:(GEORPFeatureHandleStyleAttribute)i
{
    if (_reserveStyleAttributes(self, 1))
    {
        self->_styleAttributes[self->_styleAttributesCount] = i;
        self->_styleAttributesCount++;
    }
}
- (GEORPFeatureHandleStyleAttribute)styleAttributeAtIndex:(NSUInteger)idx
{
    if (_styleAttributesCount <= idx)
    {
        [[NSException exceptionWithName:NSRangeException reason:[NSString stringWithFormat:@"idx (%tu) is out of range (%tu)", idx, _styleAttributesCount] userInfo:nil] raise];
    }
    return _styleAttributes[idx];
}
- (void)setStyleAttributes:(GEORPFeatureHandleStyleAttribute *)list count:(NSUInteger)count
{
    [self clearStyleAttributes];
    if (_reserveStyleAttributes(self, count))
    {
        memcpy(_styleAttributes, list, sizeof(GEORPFeatureHandleStyleAttribute) * count);
        _styleAttributesCount = count;
    }
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_featureIndex)
    {
        [dict setObject:@(self->_featureIndex) forKey:@"feature_index"];
    }

    if (self->_flags.has_featureTileX)
    {
        [dict setObject:@(self->_featureTileX) forKey:@"feature_tile_x"];
    }

    if (self->_flags.has_featureTileY)
    {
        [dict setObject:@(self->_featureTileY) forKey:@"feature_tile_y"];
    }

    if (self->_flags.has_featureTileZ)
    {
        [dict setObject:@(self->_featureTileZ) forKey:@"feature_tile_z"];
    }

    if (self->_flags.has_style)
    {
        [dict setObject:GEOTileSetStyleAsString(self->_style) forKey:@"style"];
    }

    if (self->_flags.has_identifier)
    {
        [dict setObject:@(self->_identifier) forKey:@"identifier"];
    }

    if (self->_flags.has_type)
    {
        [dict setObject:GEORPFeatureHandle_TypeAsString(self->_type) forKey:@"type"];
    }

    if (self->_styleAttributesCount)
    {
        NSMutableArray *styleAttributesDictReprs = [[NSMutableArray alloc] initWithCapacity:self->_styleAttributesCount];
        for (NSUInteger i_styleAttribute = 0; i_styleAttribute < self->_styleAttributesCount; i_styleAttribute++)
        {
            [styleAttributesDictReprs addObject:GEORPFeatureHandleStyleAttributeDictionaryRepresentation(self->_styleAttributes + i_styleAttribute)];
        }
        [dict setObject:styleAttributesDictReprs forKey:@"style_attribute"];
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively { /* noop */ }
BOOL GEORPFeatureHandleReadAllFrom(__unsafe_unretained GEORPFeatureHandle *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};

    @synchronized(reader) {
        BOOL result = GEORPFeatureHandleReadSpecified(self, reader, recursively ? recursiveTag : nil);
        return result;
    }
}
BOOL GEORPFeatureHandleReadFrom(__unsafe_unretained GEORPFeatureHandle *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPFeatureHandleReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPFeatureHandleReadSpecified(__unsafe_unretained GEORPFeatureHandle *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    #define shouldParseUnknown YES
    __attribute__((unused)) BOOL const recursively = (tags != nil && tags[0] == TAG_PARSE_ALL_RECURSIVE);
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
    #define shouldParseTag YES

        switch (tag) {

            case 1 /* featureIndex */:
            {
                self->_flags.has_featureIndex = YES;
                self->_featureIndex = PBReaderReadUint32(reader);

            }
            break;
            case 2 /* featureTileX */:
            {
                self->_flags.has_featureTileX = YES;
                self->_featureTileX = PBReaderReadUint32(reader);

            }
            break;
            case 3 /* featureTileY */:
            {
                self->_flags.has_featureTileY = YES;
                self->_featureTileY = PBReaderReadUint32(reader);

            }
            break;
            case 4 /* featureTileZ */:
            {
                self->_flags.has_featureTileZ = YES;
                self->_featureTileZ = PBReaderReadUint32(reader);

            }
            break;
            case 5 /* style */:
            {
                self->_flags.has_style = YES;
                self->_style = PBReaderReadInt32(reader);

            }
            break;
            case 6 /* identifier */:
            {
                self->_flags.has_identifier = YES;
                self->_identifier = PBReaderReadUint32(reader);

            }
            break;
            case 7 /* type */:
            {
                self->_flags.has_type = YES;
                self->_type = PBReaderReadInt32(reader);

            }
            break;
            case 8 /* styleAttributes */:
            {
                _reserveStyleAttributes(self, 1);
                GEORPFeatureHandleStyleAttribute *new_styleAttribute = self->_styleAttributes + self->_styleAttributesCount;
                self->_styleAttributesCount++;
                PBDataReaderMark mark_styleAttribute;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_styleAttribute);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeatureHandleStyleAttributeReadAllFrom(new_styleAttribute, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_styleAttribute);

            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }



    #undef shouldParseTag
    #undef shouldParseUnknown
    #undef recursively
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPFeatureHandleIsValid(reader);
}

BOOL GEORPFeatureHandleIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* featureIndex */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint32(reader);
                break;
            case 2 /* featureTileX */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint32(reader);
                break;
            case 3 /* featureTileY */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint32(reader);
                break;
            case 4 /* featureTileZ */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint32(reader);
                break;
            case 5 /* style */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 6 /* identifier */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint32(reader);
                break;
            case 7 /* type */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 8 /* styleAttributes */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_styleAttribute;
                    if (!PBReaderPlaceMark(reader, &mark_styleAttribute))
                        returnValue(NO);
                    if (!GEORPFeatureHandleStyleAttributeIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_styleAttribute);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPFeatureHandleReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{

    /* featureIndex */
    {
        if (self->_flags.has_featureIndex)
        {
            PBDataWriterWriteUint32Field(writer, self->_featureIndex, 1);
        }
    }

    /* featureTileX */
    {
        if (self->_flags.has_featureTileX)
        {
            PBDataWriterWriteUint32Field(writer, self->_featureTileX, 2);
        }
    }

    /* featureTileY */
    {
        if (self->_flags.has_featureTileY)
        {
            PBDataWriterWriteUint32Field(writer, self->_featureTileY, 3);
        }
    }

    /* featureTileZ */
    {
        if (self->_flags.has_featureTileZ)
        {
            PBDataWriterWriteUint32Field(writer, self->_featureTileZ, 4);
        }
    }

    /* style */
    {
        if (self->_flags.has_style)
        {
            PBDataWriterWriteInt32Field(writer, self->_style, 5);
        }
    }

    /* identifier */
    {
        if (self->_flags.has_identifier)
        {
            PBDataWriterWriteUint32Field(writer, self->_identifier, 6);
        }
    }

    /* type */
    {
        if (self->_flags.has_type)
        {
            PBDataWriterWriteInt32Field(writer, self->_type, 7);
        }
    }

    /* styleAttributes */
    {
        for (NSUInteger i_styleAttribute = 0; i_styleAttribute < self->_styleAttributesCount; i_styleAttribute++)
        {
            PBDataWriterMark mark;
            PBDataWriterPlaceMark(writer, &mark, 8);
            GEORPFeatureHandleStyleAttributeWriteTo(self->_styleAttributes + i_styleAttribute, writer);
            PBDataWriterRecallMark(writer, &mark);

        }

    }
}



- (void)copyTo:(GEORPFeatureHandle *)other
{
    [self readAll:NO];
    if (self->_flags.has_featureIndex)
    {
        other->_featureIndex = _featureIndex;
        other->_flags.has_featureIndex = YES;
    }
    if (self->_flags.has_featureTileX)
    {
        other->_featureTileX = _featureTileX;
        other->_flags.has_featureTileX = YES;
    }
    if (self->_flags.has_featureTileY)
    {
        other->_featureTileY = _featureTileY;
        other->_flags.has_featureTileY = YES;
    }
    if (self->_flags.has_featureTileZ)
    {
        other->_featureTileZ = _featureTileZ;
        other->_flags.has_featureTileZ = YES;
    }
    if (self->_flags.has_style)
    {
        other->_style = _style;
        other->_flags.has_style = YES;
    }
    if (self->_flags.has_identifier)
    {
        other->_identifier = _identifier;
        other->_flags.has_identifier = YES;
    }
    if (self->_flags.has_type)
    {
        other->_type = _type;
        other->_flags.has_type = YES;
    }
    if ([self styleAttributesCount])
    {
        [other clearStyleAttributes];
        NSUInteger styleAttributesCnt = [self styleAttributesCount];
        for (NSUInteger i = 0; i < styleAttributesCnt; i++)
        {
            [other addStyleAttribute:[self styleAttributeAtIndex:i]];
        }
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPFeatureHandle *copy = [[[self class] allocWithZone:zone] init];
    if (self->_flags.has_featureIndex)
    {
        copy->_featureIndex = _featureIndex;
        copy->_flags.has_featureIndex = YES;
    }
    if (self->_flags.has_featureTileX)
    {
        copy->_featureTileX = _featureTileX;
        copy->_flags.has_featureTileX = YES;
    }
    if (self->_flags.has_featureTileY)
    {
        copy->_featureTileY = _featureTileY;
        copy->_flags.has_featureTileY = YES;
    }
    if (self->_flags.has_featureTileZ)
    {
        copy->_featureTileZ = _featureTileZ;
        copy->_flags.has_featureTileZ = YES;
    }
    if (self->_flags.has_style)
    {
        copy->_style = _style;
        copy->_flags.has_style = YES;
    }
    if (self->_flags.has_identifier)
    {
        copy->_identifier = _identifier;
        copy->_flags.has_identifier = YES;
    }
    if (self->_flags.has_type)
    {
        copy->_type = _type;
        copy->_flags.has_type = YES;
    }
    if (self->_styleAttributesCount)
    {
        _reserveStyleAttributes(copy, self->_styleAttributesCount);
        memcpy(copy->_styleAttributes, self->_styleAttributes, sizeof(GEORPFeatureHandleStyleAttribute) * self->_styleAttributesCount);
        copy->_styleAttributesCount = self->_styleAttributesCount;
    }
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPFeatureHandle *other = (GEORPFeatureHandle *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_featureIndex && other->_flags.has_featureIndex && self->_featureIndex == other->_featureIndex) || (!self->_flags.has_featureIndex && !other->_flags.has_featureIndex))
    &&
    ((self->_flags.has_featureTileX && other->_flags.has_featureTileX && self->_featureTileX == other->_featureTileX) || (!self->_flags.has_featureTileX && !other->_flags.has_featureTileX))
    &&
    ((self->_flags.has_featureTileY && other->_flags.has_featureTileY && self->_featureTileY == other->_featureTileY) || (!self->_flags.has_featureTileY && !other->_flags.has_featureTileY))
    &&
    ((self->_flags.has_featureTileZ && other->_flags.has_featureTileZ && self->_featureTileZ == other->_featureTileZ) || (!self->_flags.has_featureTileZ && !other->_flags.has_featureTileZ))
    &&
    ((self->_flags.has_style && other->_flags.has_style && self->_style == other->_style) || (!self->_flags.has_style && !other->_flags.has_style))
    &&
    ((self->_flags.has_identifier && other->_flags.has_identifier && self->_identifier == other->_identifier) || (!self->_flags.has_identifier && !other->_flags.has_identifier))
    &&
    ((self->_flags.has_type && other->_flags.has_type && self->_type == other->_type) || (!self->_flags.has_type && !other->_flags.has_type))
    &&
    (self->_styleAttributesCount == other->_styleAttributesCount && 0 == (memcmp(self->_styleAttributes, other->_styleAttributes, sizeof(GEORPFeatureHandleStyleAttribute) * self->_styleAttributesCount)))

    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_featureIndex ? PBHashInt((NSUInteger)self->_featureIndex) : 0)
    ^
    (self->_flags.has_featureTileX ? PBHashInt((NSUInteger)self->_featureTileX) : 0)
    ^
    (self->_flags.has_featureTileY ? PBHashInt((NSUInteger)self->_featureTileY) : 0)
    ^
    (self->_flags.has_featureTileZ ? PBHashInt((NSUInteger)self->_featureTileZ) : 0)
    ^
    (self->_flags.has_style ? PBHashInt((NSUInteger)self->_style) : 0)
    ^
    (self->_flags.has_identifier ? PBHashInt((NSUInteger)self->_identifier) : 0)
    ^
    (self->_flags.has_type ? PBHashInt((NSUInteger)self->_type) : 0)
    ^
    PBHashBytes(self->_styleAttributes, sizeof(GEORPFeatureHandleStyleAttribute) * self->_styleAttributesCount)
    ;
}

- (void)mergeFrom:(GEORPFeatureHandle *)other
{
    [other readAll:NO];
    if (other->_flags.has_featureIndex)
    {
        self->_featureIndex = other->_featureIndex;
        self->_flags.has_featureIndex = 1;
    }
    if (other->_flags.has_featureTileX)
    {
        self->_featureTileX = other->_featureTileX;
        self->_flags.has_featureTileX = 1;
    }
    if (other->_flags.has_featureTileY)
    {
        self->_featureTileY = other->_featureTileY;
        self->_flags.has_featureTileY = 1;
    }
    if (other->_flags.has_featureTileZ)
    {
        self->_featureTileZ = other->_featureTileZ;
        self->_flags.has_featureTileZ = 1;
    }
    if (other->_flags.has_style)
    {
        self->_style = other->_style;
        self->_flags.has_style = 1;
    }
    if (other->_flags.has_identifier)
    {
        self->_identifier = other->_identifier;
        self->_flags.has_identifier = 1;
    }
    if (other->_flags.has_type)
    {
        self->_type = other->_type;
        self->_flags.has_type = 1;
    }
    NSUInteger styleAttributesCnt = [other styleAttributesCount];
    for (NSUInteger i = 0; i < styleAttributesCnt; i++)
    {
        [self addStyleAttribute:[other styleAttributeAtIndex:i]];
    }
}


@end


