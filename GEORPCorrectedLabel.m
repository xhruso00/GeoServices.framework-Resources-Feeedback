// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPCorrectedLabel.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEOLatLng.h>
#import <GeoServices/GEOMapRegion.h>
#import <GeoServices/GEORPFeatureHandle.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPCorrectedLabel

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readOriginalValue {
    if (_flags.read_originalValue) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_originalValue) {
            static const uint32_t tags[] = {1, 0};
            GEORPCorrectedLabelReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasOriginalValue
{
    [self _readOriginalValue];
    return _originalValue != nil;
}
- (NSString *)originalValue
{
    [self _readOriginalValue];
    return _originalValue;
}
- (void)setOriginalValue:(NSString *)v
{
    _flags.read_originalValue = 1;
    _flags.wrote_originalValue = 1;
    _originalValue = v;
}

- (void)_readCorrectedValue {
    if (_flags.read_correctedValue) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_correctedValue) {
            static const uint32_t tags[] = {2, 0};
            GEORPCorrectedLabelReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCorrectedValue
{
    [self _readCorrectedValue];
    return _correctedValue != nil;
}
- (NSString *)correctedValue
{
    [self _readCorrectedValue];
    return _correctedValue;
}
- (void)setCorrectedValue:(NSString *)v
{
    _flags.read_correctedValue = 1;
    _flags.wrote_correctedValue = 1;
    _correctedValue = v;
}

- (void)_readFeatureRegion {
    if (_flags.read_featureRegion) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_featureRegion) {
            static const uint32_t tags[] = {3, 0};
            GEORPCorrectedLabelReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasFeatureRegion
{
    [self _readFeatureRegion];
    return _featureRegion != nil;
}
- (GEOMapRegion *)featureRegion
{
    [self _readFeatureRegion];
    return _featureRegion;
}
- (void)setFeatureRegion:(GEOMapRegion *)v
{
    _flags.read_featureRegion = 1;
    _flags.wrote_featureRegion = 1;
    _featureRegion = v;
}

- (void)_readFeatureHandles {
    if (_flags.read_featureHandles) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_featureHandles) {
            static const uint32_t tags[] = {4, 0};
            GEORPCorrectedLabelReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPFeatureHandle *> *)featureHandles
{
    [self _readFeatureHandles];
    return _featureHandles;
}
- (void)setFeatureHandles:(NSMutableArray<GEORPFeatureHandle *> *)v
{
    _flags.read_featureHandles = 1;
    _flags.wrote_featureHandles = 1;
    _featureHandles = v;
}
- (void)clearFeatureHandles
{
    _flags.read_featureHandles = 1;
    _flags.wrote_featureHandles = 1;
    [_featureHandles removeAllObjects];
}
- (void)addFeatureHandle:(GEORPFeatureHandle *)i
{
    [self _readFeatureHandles];
    [self _addNoFlagsFeatureHandle:i];
    _flags.read_featureHandles = 1;
    _flags.wrote_featureHandles = 1;
}
- (void)_addNoFlagsFeatureHandle:(GEORPFeatureHandle *)i
{
    if (!_featureHandles)
    {
        _featureHandles = [[NSMutableArray alloc] init];
    }
    [_featureHandles addObject:i];
}
- (NSUInteger)featureHandlesCount
{
    [self _readFeatureHandles];
    return [_featureHandles count];
}
- (GEORPFeatureHandle *)featureHandleAtIndex:(NSUInteger)idx
{
    [self _readFeatureHandles];
    return [_featureHandles objectAtIndex:idx];
}
+ (Class)featureHandleType
{
    return [GEORPFeatureHandle class];
}

- (void)_readCoordinate {
    if (_flags.read_coordinate) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_coordinate) {
            static const uint32_t tags[] = {5, 0};
            GEORPCorrectedLabelReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCoordinate
{
    [self _readCoordinate];
    return _coordinate != nil;
}
- (GEOLatLng *)coordinate
{
    [self _readCoordinate];
    return _coordinate;
}
- (void)setCoordinate:(GEOLatLng *)v
{
    _flags.read_coordinate = 1;
    _flags.wrote_coordinate = 1;
    _coordinate = v;
}

- (uint64_t)uid
{
    return _uid;
}
- (void)setUid:(uint64_t)v
{
    _flags.wrote_uid = 1;
    _flags.has_uid = 1;
    _uid = v;
}
- (void)setHasUid:(BOOL)f
{
    _flags.wrote_uid = 1;
    _flags.has_uid = f ? 1 : 0;
}
- (BOOL)hasUid
{
    return (BOOL)_flags.has_uid;
}

- (BOOL)localizedLabels
{
    return _localizedLabels;
}
- (void)setLocalizedLabels:(BOOL)v
{
    _flags.wrote_localizedLabels = 1;
    _flags.has_localizedLabels = 1;
    _localizedLabels = v;
}
- (void)setHasLocalizedLabels:(BOOL)f
{
    _flags.wrote_localizedLabels = 1;
    _flags.has_localizedLabels = f ? 1 : 0;
}
- (BOOL)hasLocalizedLabels
{
    return (BOOL)_flags.has_localizedLabels;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        NSString * value = self.originalValue;
        if (value) {
            [dict setObject:value forKey:@"original_value"];
        }
    }

    {
        NSString * value = self.correctedValue;
        if (value) {
            [dict setObject:value forKey:@"corrected_value"];
        }
    }

    {
        GEOMapRegion * value = self.featureRegion;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"feature_region"];
        }
    }

    if ([self->_featureHandles count])
    {
        NSMutableArray *featureHandlesDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_featureHandles count]];
        for (GEORPFeatureHandle * i_featureHandle in self->_featureHandles)
        {
            [featureHandlesDictReprs addObject:[i_featureHandle dictionaryRepresentation]];
        }
        [dict setObject:featureHandlesDictReprs forKey:@"feature_handle"];
    }

    {
        GEOLatLng * value = self.coordinate;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"coordinate"];
        }
    }

    if (self->_flags.has_uid)
    {
        [dict setObject:@(self->_uid) forKey:@"uid"];
    }

    if (self->_flags.has_localizedLabels)
    {
        [dict setObject:@(self->_localizedLabels) forKey:@"localized_labels"];
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPCorrectedLabelReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPCorrectedLabelReadAllFrom(__unsafe_unretained GEORPCorrectedLabel *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPCorrectedLabelReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPCorrectedLabelReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPCorrectedLabelReadFrom(__unsafe_unretained GEORPCorrectedLabel *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPCorrectedLabelReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPCorrectedLabelReadSpecified(__unsafe_unretained GEORPCorrectedLabel *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_originalValue
        + self->_flags.read_correctedValue
        + self->_flags.read_featureRegion
        + self->_flags.read_featureHandles
        + self->_flags.read_coordinate
        ;
    #define requiredLazyFieldCount 4 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* originalValue */:
            {
                if (!shouldParseTag || self->_flags.read_originalValue) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_originalValue) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_originalValue = PBReaderReadString(reader);
                self->_originalValue = new_originalValue;

                --tagsRemaining;
            }
            break;
            case 2 /* correctedValue */:
            {
                if (!shouldParseTag || self->_flags.read_correctedValue) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_correctedValue) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_correctedValue = PBReaderReadString(reader);
                self->_correctedValue = new_correctedValue;

                --tagsRemaining;
            }
            break;
            case 3 /* featureRegion */:
            {
                if (!shouldParseTag || self->_flags.read_featureRegion) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_featureRegion) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOMapRegion *new_featureRegion = [[GEOMapRegion alloc] init];
                self->_featureRegion = new_featureRegion;
                PBDataReaderMark mark_featureRegion;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_featureRegion);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOMapRegionReadAllFrom(new_featureRegion, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_featureRegion);

                --tagsRemaining;
            }
            break;
            case 4 /* featureHandles */:
            {
                if (!shouldParseTag || self->_flags.read_featureHandles) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPFeatureHandle *new_featureHandle = [[GEORPFeatureHandle alloc] init];
                [self _addNoFlagsFeatureHandle:new_featureHandle];
                PBDataReaderMark mark_featureHandle;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_featureHandle);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeatureHandleReadAllFrom(new_featureHandle, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_featureHandle);

            }
            break;
            case 5 /* coordinate */:
            {
                if (!shouldParseTag || self->_flags.read_coordinate) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_coordinate) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOLatLng *new_coordinate = [[GEOLatLng alloc] init];
                self->_coordinate = new_coordinate;
                PBDataReaderMark mark_coordinate;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_coordinate);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOLatLngReadAllFrom(new_coordinate, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_coordinate);

                --tagsRemaining;
            }
            break;
            case 6 /* uid */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_uid = YES;
                self->_uid = PBReaderReadUint64(reader);

            }
            break;
            case 7 /* localizedLabels */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_localizedLabels = YES;
                self->_localizedLabels = PBReaderReadBOOL(reader);

            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
            [self->_featureRegion readAll:YES];
            for (GEORPFeatureHandle * i in self->_featureHandles)
                [i readAll:YES];
            [self->_coordinate readAll:YES];
        }
        self->_flags.read_originalValue = YES;
        self->_flags.read_correctedValue = YES;
        self->_flags.read_featureRegion = YES;
        self->_flags.read_featureHandles = YES;
        self->_flags.read_coordinate = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* originalValue */:
                    self->_flags.read_originalValue = YES;
                    break;
                case 2 /* correctedValue */:
                    self->_flags.read_correctedValue = YES;
                    break;
                case 3 /* featureRegion */:
                    self->_flags.read_featureRegion = YES;
                    break;
                case 4 /* featureHandles */:
                    self->_flags.read_featureHandles = YES;
                    break;
                case 5 /* coordinate */:
                    self->_flags.read_coordinate = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPCorrectedLabelIsValid(reader);
}

BOOL GEORPCorrectedLabelIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* originalValue */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 2 /* correctedValue */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 3 /* featureRegion */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_featureRegion;
                    if (!PBReaderPlaceMark(reader, &mark_featureRegion))
                        returnValue(NO);
                    if (!GEOMapRegionIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_featureRegion);
                }
                break;
            case 4 /* featureHandles */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_featureHandle;
                    if (!PBReaderPlaceMark(reader, &mark_featureHandle))
                        returnValue(NO);
                    if (!GEORPFeatureHandleIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_featureHandle);
                }
                break;
            case 5 /* coordinate */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_coordinate;
                    if (!PBReaderPlaceMark(reader, &mark_coordinate))
                        returnValue(NO);
                    if (!GEOLatLngIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_coordinate);
                }
                break;
            case 6 /* uid */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint64(reader);
                break;
            case 7 /* localizedLabels */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPCorrectedLabelReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPCorrectedLabelIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* originalValue */
    {
        if (self->_originalValue)
        {
            PBDataWriterWriteStringField(writer, self->_originalValue, 1);
        }
    }

    /* correctedValue */
    {
        if (self->_correctedValue)
        {
            PBDataWriterWriteStringField(writer, self->_correctedValue, 2);
        }
    }

    /* featureRegion */
    {
        if (self->_featureRegion != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_featureRegion, 3);
        }
    }

    /* featureHandles */
    {
        for (GEORPFeatureHandle * i_featureHandle in self->_featureHandles)
        {
            PBDataWriterWriteSubmessage(writer, i_featureHandle, 4);
        }

    }

    /* coordinate */
    {
        if (self->_coordinate != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_coordinate, 5);
        }
    }

    /* uid */
    {
        if (self->_flags.has_uid)
        {
            PBDataWriterWriteUint64Field(writer, self->_uid, 6);
        }
    }

    /* localizedLabels */
    {
        if (self->_flags.has_localizedLabels)
        {
            PBDataWriterWriteBOOLField(writer, self->_localizedLabels, 7);
        }
    }
}

BOOL GEORPCorrectedLabelIsDirty(__unsafe_unretained GEORPCorrectedLabel *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_originalValue
        || self->_flags.read_originalValue
        || self->_flags.wrote_correctedValue
        || self->_flags.read_correctedValue
        || self->_flags.wrote_featureRegion
        || self->_flags.read_featureRegion
        || self->_flags.wrote_featureHandles
        || self->_flags.read_featureHandles
        || self->_flags.wrote_coordinate
        || self->_flags.read_coordinate
        || self->_flags.wrote_uid
        || self->_flags.wrote_localizedLabels
    ;


    return dirty;
}


- (void)copyTo:(GEORPCorrectedLabel *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_originalValue)
    {
        other.originalValue = _originalValue;
    }
    if (_correctedValue)
    {
        other.correctedValue = _correctedValue;
    }
    if (_featureRegion)
    {
        other.featureRegion = _featureRegion;
    }
    if ([self featureHandlesCount])
    {
        [other clearFeatureHandles];
        NSUInteger featureHandlesCnt = [self featureHandlesCount];
        for (NSUInteger i = 0; i < featureHandlesCnt; i++)
        {
            [other addFeatureHandle:[self featureHandleAtIndex:i]];
        }
    }
    if (_coordinate)
    {
        other.coordinate = _coordinate;
    }
    if (self->_flags.has_uid)
    {
        other->_uid = _uid;
        other->_flags.has_uid = YES;
    }
    if (self->_flags.has_localizedLabels)
    {
        other->_localizedLabels = _localizedLabels;
        other->_flags.has_localizedLabels = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPCorrectedLabel *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_originalValue
                || _flags.wrote_correctedValue
                || _flags.wrote_featureRegion
                || _flags.wrote_featureHandles
                || _flags.wrote_coordinate
                || _flags.wrote_uid
                || _flags.wrote_localizedLabels
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPCorrectedLabelReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_originalValue = [_originalValue copyWithZone:zone];
    copy->_correctedValue = [_correctedValue copyWithZone:zone];
    copy->_featureRegion = [_featureRegion copyWithZone:zone];
    for (GEORPFeatureHandle * v in _featureHandles)
    {
        GEORPFeatureHandle * vCopy = [v copyWithZone:zone];
        [copy addFeatureHandle:vCopy];
    }
    copy->_coordinate = [_coordinate copyWithZone:zone];
    if (self->_flags.has_uid)
    {
        copy->_uid = _uid;
        copy->_flags.has_uid = YES;
    }
    if (self->_flags.has_localizedLabels)
    {
        copy->_localizedLabels = _localizedLabels;
        copy->_flags.has_localizedLabels = YES;
    }
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPCorrectedLabel *other = (GEORPCorrectedLabel *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_originalValue && !other->_originalValue) || [self->_originalValue isEqual:other->_originalValue])
    &&
    ((!self->_correctedValue && !other->_correctedValue) || [self->_correctedValue isEqual:other->_correctedValue])
    &&
    ((!self->_featureRegion && !other->_featureRegion) || [self->_featureRegion isEqual:other->_featureRegion])
    &&
    ((!self->_featureHandles && !other->_featureHandles) || [self->_featureHandles isEqual:other->_featureHandles])

    &&
    ((!self->_coordinate && !other->_coordinate) || [self->_coordinate isEqual:other->_coordinate])
    &&
    ((self->_flags.has_uid && other->_flags.has_uid && self->_uid == other->_uid) || (!self->_flags.has_uid && !other->_flags.has_uid))
    &&
    ((self->_flags.has_localizedLabels && other->_flags.has_localizedLabels && ((self->_localizedLabels && other->_localizedLabels) || (!self->_localizedLabels && !other->_localizedLabels))) || (!self->_flags.has_localizedLabels && !other->_flags.has_localizedLabels))
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_originalValue hash]
    ^
    [self->_correctedValue hash]
    ^
    [self->_featureRegion hash]
    ^
    [self->_featureHandles hash]
    ^
    [self->_coordinate hash]
    ^
    (self->_flags.has_uid ? PBHashInt((NSUInteger)self->_uid) : 0)
    ^
    (self->_flags.has_localizedLabels ? PBHashInt((NSUInteger)self->_localizedLabels) : 0)
    ;
}

- (void)mergeFrom:(GEORPCorrectedLabel *)other
{
    [other readAll:NO];
    if (other->_originalValue)
    {
        [self setOriginalValue:other->_originalValue];
    }
    if (other->_correctedValue)
    {
        [self setCorrectedValue:other->_correctedValue];
    }
    if (self->_featureRegion && other->_featureRegion)
    {
        [self->_featureRegion mergeFrom:other->_featureRegion];
    }
    else if (!self->_featureRegion && other->_featureRegion)
    {
        [self setFeatureRegion:other->_featureRegion];
    }
    for (GEORPFeatureHandle * iter_featureHandles in other->_featureHandles)
    {
        [self addFeatureHandle:iter_featureHandles];
    }
    if (self->_coordinate && other->_coordinate)
    {
        [self->_coordinate mergeFrom:other->_coordinate];
    }
    else if (!self->_coordinate && other->_coordinate)
    {
        [self setCoordinate:other->_coordinate];
    }
    if (other->_flags.has_uid)
    {
        self->_uid = other->_uid;
        self->_flags.has_uid = 1;
    }
    if (other->_flags.has_localizedLabels)
    {
        self->_localizedLabels = other->_localizedLabels;
        self->_flags.has_localizedLabels = 1;
    }
}


@end


