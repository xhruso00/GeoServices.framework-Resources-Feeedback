// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPCorrectedGroundModePlacecardLocation.h"

#if defined(ENABLE_GARDAR) && ENABLE_GARDAR

#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPCorrectedGroundModePlacecardLocation


- (GEOPDCameraPathFrame)cameraFrame
{
    return _cameraFrame;
}
- (void)setCameraFrame:(GEOPDCameraPathFrame)v
{
    _flags.has_cameraFrame = 1;
    _cameraFrame = v;
}
- (void)setHasCameraFrame:(BOOL)f
{
    _flags.has_cameraFrame = f ? 1 : 0;
}
- (BOOL)hasCameraFrame
{
    return (BOOL)_flags.has_cameraFrame;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_cameraFrame)
    {
        [dict setObject:GEOPDCameraPathFrameDictionaryRepresentation(&(self->_cameraFrame)) forKey:@"camera_frame"];
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively { /* noop */ }
BOOL GEORPCorrectedGroundModePlacecardLocationReadAllFrom(__unsafe_unretained GEORPCorrectedGroundModePlacecardLocation *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};

    @synchronized(reader) {
        BOOL result = GEORPCorrectedGroundModePlacecardLocationReadSpecified(self, reader, recursively ? recursiveTag : nil);
        return result;
    }
}
BOOL GEORPCorrectedGroundModePlacecardLocationReadFrom(__unsafe_unretained GEORPCorrectedGroundModePlacecardLocation *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPCorrectedGroundModePlacecardLocationReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPCorrectedGroundModePlacecardLocationReadSpecified(__unsafe_unretained GEORPCorrectedGroundModePlacecardLocation *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    #define shouldParseUnknown YES
    __attribute__((unused)) BOOL const recursively = (tags != nil && tags[0] == TAG_PARSE_ALL_RECURSIVE);
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
    #define shouldParseTag YES

        switch (tag) {

            case 1 /* cameraFrame */:
            {
                GEOPDCameraPathFrame *new_cameraFrame = &(self->_cameraFrame);
                PBDataReaderMark mark_cameraFrame;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_cameraFrame);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPDCameraPathFrameReadAllFrom(new_cameraFrame, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_cameraFrame);
            self->_flags.has_cameraFrame = YES;

            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }



    #undef shouldParseTag
    #undef shouldParseUnknown
    #undef recursively
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPCorrectedGroundModePlacecardLocationIsValid(reader);
}

BOOL GEORPCorrectedGroundModePlacecardLocationIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* cameraFrame */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_cameraFrame;
                    if (!PBReaderPlaceMark(reader, &mark_cameraFrame))
                        returnValue(NO);
                    if (!GEOPDCameraPathFrameIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_cameraFrame);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPCorrectedGroundModePlacecardLocationReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{

    /* cameraFrame */
    {
        if (self->_flags.has_cameraFrame)
        {
            PBDataWriterMark mark;
            PBDataWriterPlaceMark(writer, &mark, 1);
            GEOPDCameraPathFrameWriteTo(&(self->_cameraFrame), writer);
            PBDataWriterRecallMark(writer, &mark);
        }
    }
}



- (void)copyTo:(GEORPCorrectedGroundModePlacecardLocation *)other
{
    [self readAll:NO];
    if (self->_flags.has_cameraFrame)
    {
        other->_cameraFrame = _cameraFrame;
        other->_flags.has_cameraFrame = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPCorrectedGroundModePlacecardLocation *copy = [[[self class] allocWithZone:zone] init];
    if (self->_flags.has_cameraFrame)
    {
        copy->_cameraFrame = _cameraFrame;
        copy->_flags.has_cameraFrame = YES;
    }
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPCorrectedGroundModePlacecardLocation *other = (GEORPCorrectedGroundModePlacecardLocation *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_cameraFrame && other->_flags.has_cameraFrame && GEOPDCameraPathFrameEquals(&(self->_cameraFrame), &(other->_cameraFrame))) || (!self->_flags.has_cameraFrame && !other->_flags.has_cameraFrame))
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_cameraFrame ? PBHashBytes(&(self->_cameraFrame), sizeof(GEOPDCameraPathFrame)) : 0)
    ;
}

- (void)mergeFrom:(GEORPCorrectedGroundModePlacecardLocation *)other
{
    [other readAll:NO];
    if (other->_flags.has_cameraFrame)
    {
        self->_cameraFrame = other->_cameraFrame;
        self->_flags.has_cameraFrame = 1;
    }
}


@end


#endif // defined(ENABLE_GARDAR) && ENABLE_GARDAR
