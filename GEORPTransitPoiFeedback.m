// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPTransitPoiFeedback.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEODirectionsRequest.h>
#import <GeoServices/GEODirectionsResponse.h>
#import <GeoServices/GEOPDPlace.h>
#import <GeoServices/GEOPDPlaceRequest.h>
#import <GeoServices/GEORPTransitLineTileInfo.h>
#import <GeoServices/GEORPTransitPoiCorrections.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPTransitPoiFeedback

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (GEORPTransitPoiFeedback_TransitPoiCorrectionType)correctionType
{
    return _flags.has_correctionType ? _correctionType : GEORPTransitPoiFeedback_TransitPoiCorrectionType_TRANSIT_POI_CORRECTION_TYPE_UNKNOWN;
}
- (void)setCorrectionType:(GEORPTransitPoiFeedback_TransitPoiCorrectionType)v
{
    _flags.wrote_correctionType = 1;
    _flags.has_correctionType = 1;
    _correctionType = v;
}
- (void)setHasCorrectionType:(BOOL)f
{
    _flags.wrote_correctionType = 1;
    _flags.has_correctionType = f ? 1 : 0;
}
- (BOOL)hasCorrectionType
{
    return (BOOL)_flags.has_correctionType;
}
- (NSString *)correctionTypeAsString:(GEORPTransitPoiFeedback_TransitPoiCorrectionType)value
{
    return GEORPTransitPoiFeedback_TransitPoiCorrectionTypeAsString(value);
}
- (GEORPTransitPoiFeedback_TransitPoiCorrectionType)StringAsCorrectionType:(NSString *)str
{
    return StringAsGEORPTransitPoiFeedback_TransitPoiCorrectionType(str);
}

- (void)_readCorrections {
    if (_flags.read_corrections) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_corrections) {
            static const uint32_t tags[] = {2, 0};
            GEORPTransitPoiFeedbackReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCorrections
{
    [self _readCorrections];
    return _corrections != nil;
}
- (GEORPTransitPoiCorrections *)corrections
{
    [self _readCorrections];
    return _corrections;
}
- (void)setCorrections:(GEORPTransitPoiCorrections *)v
{
    _flags.read_corrections = 1;
    _flags.wrote_corrections = 1;
    _corrections = v;
}

- (void)_readPlace {
    if (_flags.read_place) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_place) {
            static const uint32_t tags[] = {3, 0};
            GEORPTransitPoiFeedbackReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasPlace
{
    [self _readPlace];
    return _place != nil;
}
- (GEOPDPlace *)place
{
    [self _readPlace];
    return _place;
}
- (void)setPlace:(GEOPDPlace *)v
{
    _flags.read_place = 1;
    _flags.wrote_place = 1;
    _place = v;
}

- (void)_readTransitLineTileInfo {
    if (_flags.read_transitLineTileInfo) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_transitLineTileInfo) {
            static const uint32_t tags[] = {4, 0};
            GEORPTransitPoiFeedbackReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasTransitLineTileInfo
{
    [self _readTransitLineTileInfo];
    return _transitLineTileInfo != nil;
}
- (GEORPTransitLineTileInfo *)transitLineTileInfo
{
    [self _readTransitLineTileInfo];
    return _transitLineTileInfo;
}
- (void)setTransitLineTileInfo:(GEORPTransitLineTileInfo *)v
{
    _flags.read_transitLineTileInfo = 1;
    _flags.wrote_transitLineTileInfo = 1;
    _transitLineTileInfo = v;
}

- (void)_readPlaceRequest {
    if (_flags.read_placeRequest) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_placeRequest) {
            static const uint32_t tags[] = {5, 0};
            GEORPTransitPoiFeedbackReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasPlaceRequest
{
    [self _readPlaceRequest];
    return _placeRequest != nil;
}
- (GEOPDPlaceRequest *)placeRequest
{
    [self _readPlaceRequest];
    return _placeRequest;
}
- (void)setPlaceRequest:(GEOPDPlaceRequest *)v
{
    _flags.read_placeRequest = 1;
    _flags.wrote_placeRequest = 1;
    _placeRequest = v;
}

- (void)_readDirectionsRequests {
    if (_flags.read_directionsRequests) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_directionsRequests) {
            static const uint32_t tags[] = {6, 0};
            GEORPTransitPoiFeedbackReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEODirectionsRequest *> *)directionsRequests
{
    [self _readDirectionsRequests];
    return _directionsRequests;
}
- (void)setDirectionsRequests:(NSMutableArray<GEODirectionsRequest *> *)v
{
    _flags.read_directionsRequests = 1;
    _flags.wrote_directionsRequests = 1;
    _directionsRequests = v;
}
- (void)clearDirectionsRequests
{
    _flags.read_directionsRequests = 1;
    _flags.wrote_directionsRequests = 1;
    [_directionsRequests removeAllObjects];
}
- (void)addDirectionsRequest:(GEODirectionsRequest *)i
{
    [self _readDirectionsRequests];
    [self _addNoFlagsDirectionsRequest:i];
    _flags.read_directionsRequests = 1;
    _flags.wrote_directionsRequests = 1;
}
- (void)_addNoFlagsDirectionsRequest:(GEODirectionsRequest *)i
{
    if (!_directionsRequests)
    {
        _directionsRequests = [[NSMutableArray alloc] init];
    }
    [_directionsRequests addObject:i];
}
- (NSUInteger)directionsRequestsCount
{
    [self _readDirectionsRequests];
    return [_directionsRequests count];
}
- (GEODirectionsRequest *)directionsRequestAtIndex:(NSUInteger)idx
{
    [self _readDirectionsRequests];
    return [_directionsRequests objectAtIndex:idx];
}
+ (Class)directionsRequestType
{
    return [GEODirectionsRequest class];
}

- (void)_readDirectionsResponses {
    if (_flags.read_directionsResponses) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_directionsResponses) {
            static const uint32_t tags[] = {7, 0};
            GEORPTransitPoiFeedbackReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEODirectionsResponse *> *)directionsResponses
{
    [self _readDirectionsResponses];
    return _directionsResponses;
}
- (void)setDirectionsResponses:(NSMutableArray<GEODirectionsResponse *> *)v
{
    _flags.read_directionsResponses = 1;
    _flags.wrote_directionsResponses = 1;
    _directionsResponses = v;
}
- (void)clearDirectionsResponses
{
    _flags.read_directionsResponses = 1;
    _flags.wrote_directionsResponses = 1;
    [_directionsResponses removeAllObjects];
}
- (void)addDirectionsResponse:(GEODirectionsResponse *)i
{
    [self _readDirectionsResponses];
    [self _addNoFlagsDirectionsResponse:i];
    _flags.read_directionsResponses = 1;
    _flags.wrote_directionsResponses = 1;
}
- (void)_addNoFlagsDirectionsResponse:(GEODirectionsResponse *)i
{
    if (!_directionsResponses)
    {
        _directionsResponses = [[NSMutableArray alloc] init];
    }
    [_directionsResponses addObject:i];
}
- (NSUInteger)directionsResponsesCount
{
    [self _readDirectionsResponses];
    return [_directionsResponses count];
}
- (GEODirectionsResponse *)directionsResponseAtIndex:(NSUInteger)idx
{
    [self _readDirectionsResponses];
    return [_directionsResponses objectAtIndex:idx];
}
+ (Class)directionsResponseType
{
    return [GEODirectionsResponse class];
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_correctionType)
    {
        [dict setObject:GEORPTransitPoiFeedback_TransitPoiCorrectionTypeAsString(self->_correctionType) forKey:@"correction_type"];
    }

    {
        GEORPTransitPoiCorrections * value = self.corrections;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"corrections"];
        }
    }

    {
        GEOPDPlace * value = self.place;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"place"];
        }
    }

    {
        GEORPTransitLineTileInfo * value = self.transitLineTileInfo;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"transit_line_tile_info"];
        }
    }

    {
        GEOPDPlaceRequest * value = self.placeRequest;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"place_request"];
        }
    }

    if ([self->_directionsRequests count])
    {
        NSMutableArray *directionsRequestsDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_directionsRequests count]];
        for (GEODirectionsRequest * i_directionsRequest in self->_directionsRequests)
        {
            [directionsRequestsDictReprs addObject:[i_directionsRequest dictionaryRepresentation]];
        }
        [dict setObject:directionsRequestsDictReprs forKey:@"directions_request"];
    }

    if ([self->_directionsResponses count])
    {
        NSMutableArray *directionsResponsesDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_directionsResponses count]];
        for (GEODirectionsResponse * i_directionsResponse in self->_directionsResponses)
        {
            [directionsResponsesDictReprs addObject:[i_directionsResponse dictionaryRepresentation]];
        }
        [dict setObject:directionsResponsesDictReprs forKey:@"directions_response"];
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPTransitPoiFeedbackReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPTransitPoiFeedbackReadAllFrom(__unsafe_unretained GEORPTransitPoiFeedback *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPTransitPoiFeedbackReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPTransitPoiFeedbackReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPTransitPoiFeedbackReadFrom(__unsafe_unretained GEORPTransitPoiFeedback *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPTransitPoiFeedbackReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPTransitPoiFeedbackReadSpecified(__unsafe_unretained GEORPTransitPoiFeedback *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_corrections
        + self->_flags.read_place
        + self->_flags.read_transitLineTileInfo
        + self->_flags.read_placeRequest
        + self->_flags.read_directionsRequests
        + self->_flags.read_directionsResponses
        + self->_flags.read_unknownFields
        ;
    #define requiredLazyFieldCount 4 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL shouldParseUnknown = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            case TAG_UNKNOWN_FIELDS:
                shouldParseUnknown = YES;
                ++readLazyCount;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
        shouldParseUnknown = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !(readAll || shouldParseUnknown);
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* correctionType */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_correctionType = YES;
                self->_correctionType = PBReaderReadInt32(reader);

            }
            break;
            case 2 /* corrections */:
            {
                if (!shouldParseTag || self->_flags.read_corrections) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_corrections) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPTransitPoiCorrections *new_corrections = [[GEORPTransitPoiCorrections alloc] init];
                self->_corrections = new_corrections;
                PBDataReaderMark mark_corrections;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_corrections);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPTransitPoiCorrectionsReadAllFrom(new_corrections, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_corrections);

                --tagsRemaining;
            }
            break;
            case 3 /* place */:
            {
                if (!shouldParseTag || self->_flags.read_place) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_place) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOPDPlace *new_place = [[GEOPDPlace alloc] init];
                self->_place = new_place;
                PBDataReaderMark mark_place;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_place);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPDPlaceReadAllFrom(new_place, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_place);

                --tagsRemaining;
            }
            break;
            case 4 /* transitLineTileInfo */:
            {
                if (!shouldParseTag || self->_flags.read_transitLineTileInfo) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_transitLineTileInfo) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPTransitLineTileInfo *new_transitLineTileInfo = [[GEORPTransitLineTileInfo alloc] init];
                self->_transitLineTileInfo = new_transitLineTileInfo;
                PBDataReaderMark mark_transitLineTileInfo;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_transitLineTileInfo);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPTransitLineTileInfoReadAllFrom(new_transitLineTileInfo, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_transitLineTileInfo);

                --tagsRemaining;
            }
            break;
            case 5 /* placeRequest */:
            {
                if (!shouldParseTag || self->_flags.read_placeRequest) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_placeRequest) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOPDPlaceRequest *new_placeRequest = [[GEOPDPlaceRequest alloc] init];
                self->_placeRequest = new_placeRequest;
                PBDataReaderMark mark_placeRequest;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_placeRequest);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPDPlaceRequestReadAllFrom(new_placeRequest, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_placeRequest);

                --tagsRemaining;
            }
            break;
            case 6 /* directionsRequests */:
            {
                if (!shouldParseTag || self->_flags.read_directionsRequests) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEODirectionsRequest *new_directionsRequest = [[GEODirectionsRequest alloc] init];
                [self _addNoFlagsDirectionsRequest:new_directionsRequest];
                PBDataReaderMark mark_directionsRequest;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_directionsRequest);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEODirectionsRequestReadAllFrom(new_directionsRequest, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_directionsRequest);

            }
            break;
            case 7 /* directionsResponses */:
            {
                if (!shouldParseTag || self->_flags.read_directionsResponses) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEODirectionsResponse *new_directionsResponse = [[GEODirectionsResponse alloc] init];
                [self _addNoFlagsDirectionsResponse:new_directionsResponse];
                PBDataReaderMark mark_directionsResponse;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_directionsResponse);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEODirectionsResponseReadAllFrom(new_directionsResponse, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_directionsResponse);

            }
            break;
            default:
                if (!shouldParseUnknown || self->_flags.read_unknownFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }

    if (shouldParseUnknown) {
        self->_flags.read_unknownFields = YES;
    }

    if (readAll) {
        if (recursively) {
            [self->_corrections readAll:YES];
            [self->_place readAll:YES];
            [self->_transitLineTileInfo readAll:YES];
            [self->_placeRequest readAll:YES];
            for (GEODirectionsRequest * i in self->_directionsRequests)
                [i readAll:YES];
            for (GEODirectionsResponse * i in self->_directionsResponses)
                [i readAll:YES];
        }
        self->_flags.read_corrections = YES;
        self->_flags.read_place = YES;
        self->_flags.read_transitLineTileInfo = YES;
        self->_flags.read_placeRequest = YES;
        self->_flags.read_directionsRequests = YES;
        self->_flags.read_directionsResponses = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 2 /* corrections */:
                    self->_flags.read_corrections = YES;
                    break;
                case 3 /* place */:
                    self->_flags.read_place = YES;
                    break;
                case 4 /* transitLineTileInfo */:
                    self->_flags.read_transitLineTileInfo = YES;
                    break;
                case 5 /* placeRequest */:
                    self->_flags.read_placeRequest = YES;
                    break;
                case 6 /* directionsRequests */:
                    self->_flags.read_directionsRequests = YES;
                    break;
                case 7 /* directionsResponses */:
                    self->_flags.read_directionsResponses = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPTransitPoiFeedbackIsValid(reader);
}

BOOL GEORPTransitPoiFeedbackIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* correctionType */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 2 /* corrections */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_corrections;
                    if (!PBReaderPlaceMark(reader, &mark_corrections))
                        returnValue(NO);
                    if (!GEORPTransitPoiCorrectionsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_corrections);
                }
                break;
            case 3 /* place */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_place;
                    if (!PBReaderPlaceMark(reader, &mark_place))
                        returnValue(NO);
                    if (!GEOPDPlaceIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_place);
                }
                break;
            case 4 /* transitLineTileInfo */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_transitLineTileInfo;
                    if (!PBReaderPlaceMark(reader, &mark_transitLineTileInfo))
                        returnValue(NO);
                    if (!GEORPTransitLineTileInfoIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_transitLineTileInfo);
                }
                break;
            case 5 /* placeRequest */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_placeRequest;
                    if (!PBReaderPlaceMark(reader, &mark_placeRequest))
                        returnValue(NO);
                    if (!GEOPDPlaceRequestIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_placeRequest);
                }
                break;
            case 6 /* directionsRequests */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_directionsRequest;
                    if (!PBReaderPlaceMark(reader, &mark_directionsRequest))
                        returnValue(NO);
                    if (!GEODirectionsRequestIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_directionsRequest);
                }
                break;
            case 7 /* directionsResponses */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_directionsResponse;
                    if (!PBReaderPlaceMark(reader, &mark_directionsResponse))
                        returnValue(NO);
                    if (!GEODirectionsResponseIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_directionsResponse);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPTransitPoiFeedbackReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPTransitPoiFeedbackIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* correctionType */
    {
        if (self->_flags.has_correctionType)
        {
            PBDataWriterWriteInt32Field(writer, self->_correctionType, 1);
        }
    }

    /* corrections */
    {
        if (self->_corrections != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_corrections, 2);
        }
    }

    /* place */
    {
        if (self->_place != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_place, 3);
        }
    }

    /* transitLineTileInfo */
    {
        if (self->_transitLineTileInfo != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_transitLineTileInfo, 4);
        }
    }

    /* placeRequest */
    {
        if (self->_placeRequest != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_placeRequest, 5);
        }
    }

    /* directionsRequests */
    {
        for (GEODirectionsRequest * i_directionsRequest in self->_directionsRequests)
        {
            PBDataWriterWriteSubmessage(writer, i_directionsRequest, 6);
        }

    }

    /* directionsResponses */
    {
        for (GEODirectionsResponse * i_directionsResponse in self->_directionsResponses)
        {
            PBDataWriterWriteSubmessage(writer, i_directionsResponse, 7);
        }

    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}

BOOL GEORPTransitPoiFeedbackIsDirty(__unsafe_unretained GEORPTransitPoiFeedback *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_correctionType
        || self->_flags.wrote_corrections
        || (self->_flags.read_corrections && GEORPTransitPoiCorrectionsIsDirty(self->_corrections))
        || self->_flags.wrote_place
        || (self->_flags.read_place && GEOPDPlaceIsDirty(self->_place))
        || self->_flags.wrote_transitLineTileInfo
        || (self->_flags.read_transitLineTileInfo && GEORPTransitLineTileInfoIsDirty(self->_transitLineTileInfo))
        || self->_flags.wrote_placeRequest
        || (self->_flags.read_placeRequest && GEOPDPlaceRequestIsDirty(self->_placeRequest))
        || self->_flags.wrote_directionsRequests
        || self->_flags.wrote_directionsResponses
        || self->_flags.wrote_unknownFields
    ;

    if (!dirty) {

            if (self->_flags.read_directionsRequests) {
                for (GEODirectionsRequest *i in self->_directionsRequests) {
                    if (GEODirectionsRequestIsDirty(i)) {
                        return YES;
                    }
                }
            }

            if (self->_flags.read_directionsResponses) {
                for (GEODirectionsResponse *i in self->_directionsResponses) {
                    if (GEODirectionsResponseIsDirty(i)) {
                        return YES;
                    }
                }
            }
    }

    return dirty;
}


- (void)copyTo:(GEORPTransitPoiFeedback *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (self->_flags.has_correctionType)
    {
        other->_correctionType = _correctionType;
        other->_flags.has_correctionType = YES;
    }
    if (_corrections)
    {
        other.corrections = _corrections;
    }
    if (_place)
    {
        other.place = _place;
    }
    if (_transitLineTileInfo)
    {
        other.transitLineTileInfo = _transitLineTileInfo;
    }
    if (_placeRequest)
    {
        other.placeRequest = _placeRequest;
    }
    if ([self directionsRequestsCount])
    {
        [other clearDirectionsRequests];
        NSUInteger directionsRequestsCnt = [self directionsRequestsCount];
        for (NSUInteger i = 0; i < directionsRequestsCnt; i++)
        {
            [other addDirectionsRequest:[self directionsRequestAtIndex:i]];
        }
    }
    if ([self directionsResponsesCount])
    {
        [other clearDirectionsResponses];
        NSUInteger directionsResponsesCnt = [self directionsResponsesCount];
        for (NSUInteger i = 0; i < directionsResponsesCnt; i++)
        {
            [other addDirectionsResponse:[self directionsResponseAtIndex:i]];
        }
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPTransitPoiFeedback *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_correctionType
                || _flags.wrote_corrections
                || _flags.wrote_place
                || _flags.wrote_transitLineTileInfo
                || _flags.wrote_placeRequest
                || _flags.wrote_directionsRequests
                || _flags.wrote_directionsResponses
                || _flags.wrote_unknownFields
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPTransitPoiFeedbackReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    if (self->_flags.has_correctionType)
    {
        copy->_correctionType = _correctionType;
        copy->_flags.has_correctionType = YES;
    }
    copy->_corrections = [_corrections copyWithZone:zone];
    copy->_place = [_place copyWithZone:zone];
    copy->_transitLineTileInfo = [_transitLineTileInfo copyWithZone:zone];
    copy->_placeRequest = [_placeRequest copyWithZone:zone];
    for (GEODirectionsRequest * v in _directionsRequests)
    {
        GEODirectionsRequest * vCopy = [v copyWithZone:zone];
        [copy addDirectionsRequest:vCopy];
    }
    for (GEODirectionsResponse * v in _directionsResponses)
    {
        GEODirectionsResponse * vCopy = [v copyWithZone:zone];
        [copy addDirectionsResponse:vCopy];
    }
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPTransitPoiFeedback *other = (GEORPTransitPoiFeedback *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_correctionType && other->_flags.has_correctionType && self->_correctionType == other->_correctionType) || (!self->_flags.has_correctionType && !other->_flags.has_correctionType))
    &&
    ((!self->_corrections && !other->_corrections) || [self->_corrections isEqual:other->_corrections])
    &&
    ((!self->_place && !other->_place) || [self->_place isEqual:other->_place])
    &&
    ((!self->_transitLineTileInfo && !other->_transitLineTileInfo) || [self->_transitLineTileInfo isEqual:other->_transitLineTileInfo])
    &&
    ((!self->_placeRequest && !other->_placeRequest) || [self->_placeRequest isEqual:other->_placeRequest])
    &&
    ((!self->_directionsRequests && !other->_directionsRequests) || [self->_directionsRequests isEqual:other->_directionsRequests])

    &&
    ((!self->_directionsResponses && !other->_directionsResponses) || [self->_directionsResponses isEqual:other->_directionsResponses])

    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_correctionType ? PBHashInt((NSUInteger)self->_correctionType) : 0)
    ^
    [self->_corrections hash]
    ^
    [self->_place hash]
    ^
    [self->_transitLineTileInfo hash]
    ^
    [self->_placeRequest hash]
    ^
    [self->_directionsRequests hash]
    ^
    [self->_directionsResponses hash]
    ;
}

- (void)mergeFrom:(GEORPTransitPoiFeedback *)other
{
    [other readAll:NO];
    if (other->_flags.has_correctionType)
    {
        self->_correctionType = other->_correctionType;
        self->_flags.has_correctionType = 1;
    }
    if (self->_corrections && other->_corrections)
    {
        [self->_corrections mergeFrom:other->_corrections];
    }
    else if (!self->_corrections && other->_corrections)
    {
        [self setCorrections:other->_corrections];
    }
    if (self->_place && other->_place)
    {
        [self->_place mergeFrom:other->_place];
    }
    else if (!self->_place && other->_place)
    {
        [self setPlace:other->_place];
    }
    if (self->_transitLineTileInfo && other->_transitLineTileInfo)
    {
        [self->_transitLineTileInfo mergeFrom:other->_transitLineTileInfo];
    }
    else if (!self->_transitLineTileInfo && other->_transitLineTileInfo)
    {
        [self setTransitLineTileInfo:other->_transitLineTileInfo];
    }
    if (self->_placeRequest && other->_placeRequest)
    {
        [self->_placeRequest mergeFrom:other->_placeRequest];
    }
    else if (!self->_placeRequest && other->_placeRequest)
    {
        [self setPlaceRequest:other->_placeRequest];
    }
    for (GEODirectionsRequest * iter_directionsRequests in other->_directionsRequests)
    {
        [self addDirectionsRequest:iter_directionsRequests];
    }
    for (GEODirectionsResponse * iter_directionsResponses in other->_directionsResponses)
    {
        [self addDirectionsResponse:iter_directionsResponses];
    }
}

- (PBUnknownFields *)unknownFields
{
    if (_flags.read_unknownFields) return _unknownFields;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return _unknownFields;
    @synchronized(reader) {
        if (!_flags.read_unknownFields) {
            static const uint32_t tags[] = {TAG_UNKNOWN_FIELDS, 0};
            GEORPTransitPoiFeedbackReadSpecified(self, reader, tags);
        }
    }
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _flags.read_unknownFields = 1;
    _flags.wrote_unknownFields = 1;
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
    [_corrections clearUnknownFields:YES];
    [_place clearUnknownFields:YES];
    [_placeRequest clearUnknownFields:YES];
    for (GEODirectionsRequest * v in self.directionsRequests) {
        [v clearUnknownFields:YES];
    }
    for (GEODirectionsResponse * v in self.directionsResponses) {
        [v clearUnknownFields:YES];
    }
}

@end


