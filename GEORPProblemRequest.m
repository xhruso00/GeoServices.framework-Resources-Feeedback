// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPProblemRequest.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEOPDAnalyticMetadata.h>
#import <GeoServices/GEOPDClientMetadata.h>
#import <GeoServices/GEORPClientCapabilities.h>
#import <GeoServices/GEORPProblem.h>
#import <GeoServices/GEORPUserCredentials.h>
#import <GeoServices/GEORPProblemResponse.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPProblemRequest

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readProblem {
    if (_flags.read_problem) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_problem) {
            static const uint32_t tags[] = {1, 0};
            GEORPProblemRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasProblem
{
    [self _readProblem];
    return _problem != nil;
}
- (GEORPProblem *)problem
{
    [self _readProblem];
    return _problem;
}
- (void)setProblem:(GEORPProblem *)v
{
    _flags.read_problem = 1;
    _flags.wrote_problem = 1;
    _problem = v;
}

- (void)_readUserCredentials {
    if (_flags.read_userCredentials) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_userCredentials) {
            static const uint32_t tags[] = {6, 0};
            GEORPProblemRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasUserCredentials
{
    [self _readUserCredentials];
    return _userCredentials != nil;
}
- (GEORPUserCredentials *)userCredentials
{
    [self _readUserCredentials];
    return _userCredentials;
}
- (void)setUserCredentials:(GEORPUserCredentials *)v
{
    _flags.read_userCredentials = 1;
    _flags.wrote_userCredentials = 1;
    _userCredentials = v;
}

- (void)_readAnalyticMetadata {
    if (_flags.read_analyticMetadata) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_analyticMetadata) {
            static const uint32_t tags[] = {9, 0};
            GEORPProblemRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasAnalyticMetadata
{
    [self _readAnalyticMetadata];
    return _analyticMetadata != nil;
}
- (GEOPDAnalyticMetadata *)analyticMetadata
{
    [self _readAnalyticMetadata];
    return _analyticMetadata;
}
- (void)setAnalyticMetadata:(GEOPDAnalyticMetadata *)v
{
    _flags.read_analyticMetadata = 1;
    _flags.wrote_analyticMetadata = 1;
    _analyticMetadata = v;
}

- (void)_readClientMetadata {
    if (_flags.read_clientMetadata) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_clientMetadata) {
            static const uint32_t tags[] = {10, 0};
            GEORPProblemRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasClientMetadata
{
    [self _readClientMetadata];
    return _clientMetadata != nil;
}
- (GEOPDClientMetadata *)clientMetadata
{
    [self _readClientMetadata];
    return _clientMetadata;
}
- (void)setClientMetadata:(GEOPDClientMetadata *)v
{
    _flags.read_clientMetadata = 1;
    _flags.wrote_clientMetadata = 1;
    _clientMetadata = v;
}

- (void)_readDevicePushToken {
    if (_flags.read_devicePushToken) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_devicePushToken) {
            static const uint32_t tags[] = {11, 0};
            GEORPProblemRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasDevicePushToken
{
    [self _readDevicePushToken];
    return _devicePushToken != nil;
}
- (NSData *)devicePushToken
{
    [self _readDevicePushToken];
    return _devicePushToken;
}
- (void)setDevicePushToken:(NSData *)v
{
    _flags.read_devicePushToken = 1;
    _flags.wrote_devicePushToken = 1;
    _devicePushToken = v;
}

- (void)_readUserEmail {
    if (_flags.read_userEmail) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_userEmail) {
            static const uint32_t tags[] = {12, 0};
            GEORPProblemRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasUserEmail
{
    [self _readUserEmail];
    return _userEmail != nil;
}
- (NSString *)userEmail
{
    [self _readUserEmail];
    return _userEmail;
}
- (void)setUserEmail:(NSString *)v
{
    _flags.read_userEmail = 1;
    _flags.wrote_userEmail = 1;
    _userEmail = v;
}

- (void)_readInputLanguage {
    if (_flags.read_inputLanguage) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_inputLanguage) {
            static const uint32_t tags[] = {13, 0};
            GEORPProblemRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasInputLanguage
{
    [self _readInputLanguage];
    return _inputLanguage != nil;
}
- (NSString *)inputLanguage
{
    [self _readInputLanguage];
    return _inputLanguage;
}
- (void)setInputLanguage:(NSString *)v
{
    _flags.read_inputLanguage = 1;
    _flags.wrote_inputLanguage = 1;
    _inputLanguage = v;
}

- (void)_readClientCapabilities {
    if (_flags.read_clientCapabilities) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_clientCapabilities) {
            static const uint32_t tags[] = {14, 0};
            GEORPProblemRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasClientCapabilities
{
    [self _readClientCapabilities];
    return _clientCapabilities != nil;
}
- (GEORPClientCapabilities *)clientCapabilities
{
    [self _readClientCapabilities];
    return _clientCapabilities;
}
- (void)setClientCapabilities:(GEORPClientCapabilities *)v
{
    _flags.read_clientCapabilities = 1;
    _flags.wrote_clientCapabilities = 1;
    _clientCapabilities = v;
}

- (void)_readProblemUuid {
    if (_flags.read_problemUuid) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_problemUuid) {
            static const uint32_t tags[] = {15, 0};
            GEORPProblemRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasProblemUuid
{
    [self _readProblemUuid];
    return _problemUuid != nil;
}
- (NSString *)problemUuid
{
    [self _readProblemUuid];
    return _problemUuid;
}
- (void)setProblemUuid:(NSString *)v
{
    _flags.read_problemUuid = 1;
    _flags.wrote_problemUuid = 1;
    _problemUuid = v;
}

- (GEORPProblemRequest_DebugUserType)debugUserType
{
    return _flags.has_debugUserType ? _debugUserType : GEORPProblemRequest_DebugUserType_UNKNOWN;
}
- (void)setDebugUserType:(GEORPProblemRequest_DebugUserType)v
{
    _flags.wrote_debugUserType = 1;
    _flags.has_debugUserType = 1;
    _debugUserType = v;
}
- (void)setHasDebugUserType:(BOOL)f
{
    _flags.wrote_debugUserType = 1;
    _flags.has_debugUserType = f ? 1 : 0;
}
- (BOOL)hasDebugUserType
{
    return (BOOL)_flags.has_debugUserType;
}
- (NSString *)debugUserTypeAsString:(GEORPProblemRequest_DebugUserType)value
{
    return GEORPProblemRequest_DebugUserTypeAsString(value);
}
- (GEORPProblemRequest_DebugUserType)StringAsDebugUserType:(NSString *)str
{
    return StringAsGEORPProblemRequest_DebugUserType(str);
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        GEORPProblem * value = self.problem;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"problem"];
        }
    }

    {
        GEORPUserCredentials * value = self.userCredentials;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"user_credentials"];
        }
    }

    {
        GEOPDAnalyticMetadata * value = self.analyticMetadata;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"analytic_metadata"];
        }
    }

    {
        GEOPDClientMetadata * value = self.clientMetadata;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"client_metadata"];
        }
    }

    {
        NSData * value = self.devicePushToken;
        if (value) {
            [dict setObject:value forKey:@"device_push_token"];
        }
    }

    {
        NSString * value = self.userEmail;
        if (value) {
            [dict setObject:value forKey:@"user_email"];
        }
    }

    {
        NSString * value = self.inputLanguage;
        if (value) {
            [dict setObject:value forKey:@"input_language"];
        }
    }

    {
        GEORPClientCapabilities * value = self.clientCapabilities;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"client_capabilities"];
        }
    }

    {
        NSString * value = self.problemUuid;
        if (value) {
            [dict setObject:value forKey:@"problem_uuid"];
        }
    }

    if (self->_flags.has_debugUserType)
    {
        [dict setObject:GEORPProblemRequest_DebugUserTypeAsString(self->_debugUserType) forKey:@"debug_user_type"];
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPProblemRequestReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPProblemRequestReadAllFrom(__unsafe_unretained GEORPProblemRequest *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPProblemRequestReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPProblemRequestReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPProblemRequestReadFrom(__unsafe_unretained GEORPProblemRequest *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPProblemRequestReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPProblemRequestReadSpecified(__unsafe_unretained GEORPProblemRequest *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_problem
        + self->_flags.read_userCredentials
        + self->_flags.read_analyticMetadata
        + self->_flags.read_clientMetadata
        + self->_flags.read_devicePushToken
        + self->_flags.read_userEmail
        + self->_flags.read_inputLanguage
        + self->_flags.read_clientCapabilities
        + self->_flags.read_problemUuid
        ;
    #define requiredLazyFieldCount 7 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* problem */:
            {
                if (!shouldParseTag || self->_flags.read_problem) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_problem) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPProblem *new_problem = [[GEORPProblem alloc] init];
                self->_problem = new_problem;
                PBDataReaderMark mark_problem;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_problem);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPProblemReadAllFrom(new_problem, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_problem);

                --tagsRemaining;
            }
            break;
            case 6 /* userCredentials */:
            {
                if (!shouldParseTag || self->_flags.read_userCredentials) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_userCredentials) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPUserCredentials *new_userCredentials = [[GEORPUserCredentials alloc] init];
                self->_userCredentials = new_userCredentials;
                PBDataReaderMark mark_userCredentials;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_userCredentials);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPUserCredentialsReadAllFrom(new_userCredentials, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_userCredentials);

                --tagsRemaining;
            }
            break;
            case 9 /* analyticMetadata */:
            {
                if (!shouldParseTag || self->_flags.read_analyticMetadata) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_analyticMetadata) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOPDAnalyticMetadata *new_analyticMetadata = [[GEOPDAnalyticMetadata alloc] init];
                self->_analyticMetadata = new_analyticMetadata;
                PBDataReaderMark mark_analyticMetadata;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_analyticMetadata);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPDAnalyticMetadataReadAllFrom(new_analyticMetadata, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_analyticMetadata);

                --tagsRemaining;
            }
            break;
            case 10 /* clientMetadata */:
            {
                if (!shouldParseTag || self->_flags.read_clientMetadata) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_clientMetadata) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOPDClientMetadata *new_clientMetadata = [[GEOPDClientMetadata alloc] init];
                self->_clientMetadata = new_clientMetadata;
                PBDataReaderMark mark_clientMetadata;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_clientMetadata);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPDClientMetadataReadAllFrom(new_clientMetadata, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_clientMetadata);

                --tagsRemaining;
            }
            break;
            case 11 /* devicePushToken */:
            {
                if (!shouldParseTag || self->_flags.read_devicePushToken) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_devicePushToken) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSData * new_devicePushToken = PBReaderReadData(reader);
                self->_devicePushToken = new_devicePushToken;

                --tagsRemaining;
            }
            break;
            case 12 /* userEmail */:
            {
                if (!shouldParseTag || self->_flags.read_userEmail) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_userEmail) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_userEmail = PBReaderReadString(reader);
                self->_userEmail = new_userEmail;

                --tagsRemaining;
            }
            break;
            case 13 /* inputLanguage */:
            {
                if (!shouldParseTag || self->_flags.read_inputLanguage) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_inputLanguage) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_inputLanguage = PBReaderReadString(reader);
                self->_inputLanguage = new_inputLanguage;

                --tagsRemaining;
            }
            break;
            case 14 /* clientCapabilities */:
            {
                if (!shouldParseTag || self->_flags.read_clientCapabilities) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_clientCapabilities) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPClientCapabilities *new_clientCapabilities = [[GEORPClientCapabilities alloc] init];
                self->_clientCapabilities = new_clientCapabilities;
                PBDataReaderMark mark_clientCapabilities;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_clientCapabilities);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPClientCapabilitiesReadAllFrom(new_clientCapabilities, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_clientCapabilities);

                --tagsRemaining;
            }
            break;
            case 15 /* problemUuid */:
            {
                if (!shouldParseTag || self->_flags.read_problemUuid) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_problemUuid) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_problemUuid = PBReaderReadString(reader);
                self->_problemUuid = new_problemUuid;

                --tagsRemaining;
            }
            break;
            case 201 /* debugUserType */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_debugUserType = YES;
                self->_debugUserType = PBReaderReadInt32(reader);

            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
            [self->_problem readAll:YES];
            [self->_userCredentials readAll:YES];
            [self->_analyticMetadata readAll:YES];
            [self->_clientMetadata readAll:YES];
            [self->_clientCapabilities readAll:YES];
        }
        self->_flags.read_problem = YES;
        self->_flags.read_userCredentials = YES;
        self->_flags.read_analyticMetadata = YES;
        self->_flags.read_clientMetadata = YES;
        self->_flags.read_devicePushToken = YES;
        self->_flags.read_userEmail = YES;
        self->_flags.read_inputLanguage = YES;
        self->_flags.read_clientCapabilities = YES;
        self->_flags.read_problemUuid = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* problem */:
                    self->_flags.read_problem = YES;
                    break;
                case 6 /* userCredentials */:
                    self->_flags.read_userCredentials = YES;
                    break;
                case 9 /* analyticMetadata */:
                    self->_flags.read_analyticMetadata = YES;
                    break;
                case 10 /* clientMetadata */:
                    self->_flags.read_clientMetadata = YES;
                    break;
                case 11 /* devicePushToken */:
                    self->_flags.read_devicePushToken = YES;
                    break;
                case 12 /* userEmail */:
                    self->_flags.read_userEmail = YES;
                    break;
                case 13 /* inputLanguage */:
                    self->_flags.read_inputLanguage = YES;
                    break;
                case 14 /* clientCapabilities */:
                    self->_flags.read_clientCapabilities = YES;
                    break;
                case 15 /* problemUuid */:
                    self->_flags.read_problemUuid = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPProblemRequestIsValid(reader);
}

BOOL GEORPProblemRequestIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* problem */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_problem;
                    if (!PBReaderPlaceMark(reader, &mark_problem))
                        returnValue(NO);
                    if (!GEORPProblemIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_problem);
                }
                break;
            case 6 /* userCredentials */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_userCredentials;
                    if (!PBReaderPlaceMark(reader, &mark_userCredentials))
                        returnValue(NO);
                    if (!GEORPUserCredentialsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_userCredentials);
                }
                break;
            case 9 /* analyticMetadata */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_analyticMetadata;
                    if (!PBReaderPlaceMark(reader, &mark_analyticMetadata))
                        returnValue(NO);
                    if (!GEOPDAnalyticMetadataIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_analyticMetadata);
                }
                break;
            case 10 /* clientMetadata */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_clientMetadata;
                    if (!PBReaderPlaceMark(reader, &mark_clientMetadata))
                        returnValue(NO);
                    if (!GEOPDClientMetadataIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_clientMetadata);
                }
                break;
            case 11 /* devicePushToken */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 12 /* userEmail */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 13 /* inputLanguage */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 14 /* clientCapabilities */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_clientCapabilities;
                    if (!PBReaderPlaceMark(reader, &mark_clientCapabilities))
                        returnValue(NO);
                    if (!GEORPClientCapabilitiesIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_clientCapabilities);
                }
                break;
            case 15 /* problemUuid */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 201 /* debugUserType */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPProblemRequestReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPProblemRequestIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* problem */
    {
        if (self->_problem != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_problem, 1);
        }
    }

    /* userCredentials */
    {
        if (self->_userCredentials != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_userCredentials, 6);
        }
    }

    /* analyticMetadata */
    {
        if (self->_analyticMetadata != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_analyticMetadata, 9);
        }
    }

    /* clientMetadata */
    {
        if (self->_clientMetadata != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_clientMetadata, 10);
        }
    }

    /* devicePushToken */
    {
        if (self->_devicePushToken)
        {
            PBDataWriterWriteDataField(writer, self->_devicePushToken, 11);
        }
    }

    /* userEmail */
    {
        if (self->_userEmail)
        {
            PBDataWriterWriteStringField(writer, self->_userEmail, 12);
        }
    }

    /* inputLanguage */
    {
        if (self->_inputLanguage)
        {
            PBDataWriterWriteStringField(writer, self->_inputLanguage, 13);
        }
    }

    /* clientCapabilities */
    {
        if (self->_clientCapabilities != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_clientCapabilities, 14);
        }
    }

    /* problemUuid */
    {
        if (self->_problemUuid)
        {
            PBDataWriterWriteStringField(writer, self->_problemUuid, 15);
        }
    }

    /* debugUserType */
    {
        if (self->_flags.has_debugUserType)
        {
            PBDataWriterWriteInt32Field(writer, self->_debugUserType, 201);
        }
    }
}

BOOL GEORPProblemRequestIsDirty(__unsafe_unretained GEORPProblemRequest *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_problem
        || (self->_flags.read_problem && GEORPProblemIsDirty(self->_problem))
        || self->_flags.wrote_userCredentials
        || (self->_flags.read_userCredentials && GEORPUserCredentialsIsDirty(self->_userCredentials))
        || self->_flags.wrote_analyticMetadata
        || (self->_flags.read_analyticMetadata && GEOPDAnalyticMetadataIsDirty(self->_analyticMetadata))
        || self->_flags.wrote_clientMetadata
        || (self->_flags.read_clientMetadata && GEOPDClientMetadataIsDirty(self->_clientMetadata))
        || self->_flags.wrote_devicePushToken
        || self->_flags.read_devicePushToken
        || self->_flags.wrote_userEmail
        || self->_flags.read_userEmail
        || self->_flags.wrote_inputLanguage
        || self->_flags.read_inputLanguage
        || self->_flags.wrote_clientCapabilities
        || self->_flags.read_clientCapabilities
        || self->_flags.wrote_problemUuid
        || self->_flags.read_problemUuid
        || self->_flags.wrote_debugUserType
    ;


    return dirty;
}


- (uint32_t)requestTypeCode
{
    return 1014;
}

- (Class)responseClass
{
    return [GEORPProblemResponse class];
}

- (void)copyTo:(GEORPProblemRequest *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_problem)
    {
        other.problem = _problem;
    }
    if (_userCredentials)
    {
        other.userCredentials = _userCredentials;
    }
    if (_analyticMetadata)
    {
        other.analyticMetadata = _analyticMetadata;
    }
    if (_clientMetadata)
    {
        other.clientMetadata = _clientMetadata;
    }
    if (_devicePushToken)
    {
        other.devicePushToken = _devicePushToken;
    }
    if (_userEmail)
    {
        other.userEmail = _userEmail;
    }
    if (_inputLanguage)
    {
        other.inputLanguage = _inputLanguage;
    }
    if (_clientCapabilities)
    {
        other.clientCapabilities = _clientCapabilities;
    }
    if (_problemUuid)
    {
        other.problemUuid = _problemUuid;
    }
    if (self->_flags.has_debugUserType)
    {
        other->_debugUserType = _debugUserType;
        other->_flags.has_debugUserType = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPProblemRequest *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_problem
                || _flags.wrote_userCredentials
                || _flags.wrote_analyticMetadata
                || _flags.wrote_clientMetadata
                || _flags.wrote_devicePushToken
                || _flags.wrote_userEmail
                || _flags.wrote_inputLanguage
                || _flags.wrote_clientCapabilities
                || _flags.wrote_problemUuid
                || _flags.wrote_debugUserType
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPProblemRequestReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_problem = [_problem copyWithZone:zone];
    copy->_userCredentials = [_userCredentials copyWithZone:zone];
    copy->_analyticMetadata = [_analyticMetadata copyWithZone:zone];
    copy->_clientMetadata = [_clientMetadata copyWithZone:zone];
    copy->_devicePushToken = [_devicePushToken copyWithZone:zone];
    copy->_userEmail = [_userEmail copyWithZone:zone];
    copy->_inputLanguage = [_inputLanguage copyWithZone:zone];
    copy->_clientCapabilities = [_clientCapabilities copyWithZone:zone];
    copy->_problemUuid = [_problemUuid copyWithZone:zone];
    if (self->_flags.has_debugUserType)
    {
        copy->_debugUserType = _debugUserType;
        copy->_flags.has_debugUserType = YES;
    }
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPProblemRequest *other = (GEORPProblemRequest *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_problem && !other->_problem) || [self->_problem isEqual:other->_problem])
    &&
    ((!self->_userCredentials && !other->_userCredentials) || [self->_userCredentials isEqual:other->_userCredentials])
    &&
    ((!self->_analyticMetadata && !other->_analyticMetadata) || [self->_analyticMetadata isEqual:other->_analyticMetadata])
    &&
    ((!self->_clientMetadata && !other->_clientMetadata) || [self->_clientMetadata isEqual:other->_clientMetadata])
    &&
    ((!self->_devicePushToken && !other->_devicePushToken) || [self->_devicePushToken isEqual:other->_devicePushToken])
    &&
    ((!self->_userEmail && !other->_userEmail) || [self->_userEmail isEqual:other->_userEmail])
    &&
    ((!self->_inputLanguage && !other->_inputLanguage) || [self->_inputLanguage isEqual:other->_inputLanguage])
    &&
    ((!self->_clientCapabilities && !other->_clientCapabilities) || [self->_clientCapabilities isEqual:other->_clientCapabilities])
    &&
    ((!self->_problemUuid && !other->_problemUuid) || [self->_problemUuid isEqual:other->_problemUuid])
    &&
    ((self->_flags.has_debugUserType && other->_flags.has_debugUserType && self->_debugUserType == other->_debugUserType) || (!self->_flags.has_debugUserType && !other->_flags.has_debugUserType))
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_problem hash]
    ^
    [self->_userCredentials hash]
    ^
    [self->_analyticMetadata hash]
    ^
    [self->_clientMetadata hash]
    ^
    [self->_devicePushToken hash]
    ^
    [self->_userEmail hash]
    ^
    [self->_inputLanguage hash]
    ^
    [self->_clientCapabilities hash]
    ^
    [self->_problemUuid hash]
    ^
    (self->_flags.has_debugUserType ? PBHashInt((NSUInteger)self->_debugUserType) : 0)
    ;
}

- (void)mergeFrom:(GEORPProblemRequest *)other
{
    [other readAll:NO];
    if (self->_problem && other->_problem)
    {
        [self->_problem mergeFrom:other->_problem];
    }
    else if (!self->_problem && other->_problem)
    {
        [self setProblem:other->_problem];
    }
    if (self->_userCredentials && other->_userCredentials)
    {
        [self->_userCredentials mergeFrom:other->_userCredentials];
    }
    else if (!self->_userCredentials && other->_userCredentials)
    {
        [self setUserCredentials:other->_userCredentials];
    }
    if (self->_analyticMetadata && other->_analyticMetadata)
    {
        [self->_analyticMetadata mergeFrom:other->_analyticMetadata];
    }
    else if (!self->_analyticMetadata && other->_analyticMetadata)
    {
        [self setAnalyticMetadata:other->_analyticMetadata];
    }
    if (self->_clientMetadata && other->_clientMetadata)
    {
        [self->_clientMetadata mergeFrom:other->_clientMetadata];
    }
    else if (!self->_clientMetadata && other->_clientMetadata)
    {
        [self setClientMetadata:other->_clientMetadata];
    }
    if (other->_devicePushToken)
    {
        [self setDevicePushToken:other->_devicePushToken];
    }
    if (other->_userEmail)
    {
        [self setUserEmail:other->_userEmail];
    }
    if (other->_inputLanguage)
    {
        [self setInputLanguage:other->_inputLanguage];
    }
    if (self->_clientCapabilities && other->_clientCapabilities)
    {
        [self->_clientCapabilities mergeFrom:other->_clientCapabilities];
    }
    else if (!self->_clientCapabilities && other->_clientCapabilities)
    {
        [self setClientCapabilities:other->_clientCapabilities];
    }
    if (other->_problemUuid)
    {
        [self setProblemUuid:other->_problemUuid];
    }
    if (other->_flags.has_debugUserType)
    {
        self->_debugUserType = other->_debugUserType;
        self->_flags.has_debugUserType = 1;
    }
}


@end


