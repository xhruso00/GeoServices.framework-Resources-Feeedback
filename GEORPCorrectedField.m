// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPCorrectedField.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPCorrectedField

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (GEORPAddressField)field
{
    return _flags.has_field ? _field : GEORPAddressField_ADDRESS_TYPE_NAME;
}
- (void)setField:(GEORPAddressField)v
{
    _flags.wrote_field = 1;
    _flags.has_field = 1;
    _field = v;
}
- (void)setHasField:(BOOL)f
{
    _flags.wrote_field = 1;
    _flags.has_field = f ? 1 : 0;
}
- (BOOL)hasField
{
    return (BOOL)_flags.has_field;
}
- (NSString *)fieldAsString:(GEORPAddressField)value
{
    return GEORPAddressFieldAsString(value);
}
- (GEORPAddressField)StringAsField:(NSString *)str
{
    return StringAsGEORPAddressField(str);
}

- (void)_readFieldName {
    if (_flags.read_fieldName) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_fieldName) {
            static const uint32_t tags[] = {2, 0};
            GEORPCorrectedFieldReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasFieldName
{
    [self _readFieldName];
    return _fieldName != nil;
}
- (NSString *)fieldName
{
    [self _readFieldName];
    return _fieldName;
}
- (void)setFieldName:(NSString *)v
{
    _flags.read_fieldName = 1;
    _flags.wrote_fieldName = 1;
    _fieldName = v;
}

- (void)_readOriginalValue {
    if (_flags.read_originalValue) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_originalValue) {
            static const uint32_t tags[] = {3, 0};
            GEORPCorrectedFieldReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasOriginalValue
{
    [self _readOriginalValue];
    return _originalValue != nil;
}
- (NSString *)originalValue
{
    [self _readOriginalValue];
    return _originalValue;
}
- (void)setOriginalValue:(NSString *)v
{
    _flags.read_originalValue = 1;
    _flags.wrote_originalValue = 1;
    _originalValue = v;
}

- (void)_readCorrectedValue {
    if (_flags.read_correctedValue) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_correctedValue) {
            static const uint32_t tags[] = {4, 0};
            GEORPCorrectedFieldReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCorrectedValue
{
    [self _readCorrectedValue];
    return _correctedValue != nil;
}
- (NSString *)correctedValue
{
    [self _readCorrectedValue];
    return _correctedValue;
}
- (void)setCorrectedValue:(NSString *)v
{
    _flags.read_correctedValue = 1;
    _flags.wrote_correctedValue = 1;
    _correctedValue = v;
}

- (BOOL)isMarkedIncorrect
{
    return _isMarkedIncorrect;
}
- (void)setIsMarkedIncorrect:(BOOL)v
{
    _flags.wrote_isMarkedIncorrect = 1;
    _flags.has_isMarkedIncorrect = 1;
    _isMarkedIncorrect = v;
}
- (void)setHasIsMarkedIncorrect:(BOOL)f
{
    _flags.wrote_isMarkedIncorrect = 1;
    _flags.has_isMarkedIncorrect = f ? 1 : 0;
}
- (BOOL)hasIsMarkedIncorrect
{
    return (BOOL)_flags.has_isMarkedIncorrect;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_field)
    {
        [dict setObject:GEORPAddressFieldAsString(self->_field) forKey:@"field"];
    }

    {
        NSString * value = self.fieldName;
        if (value) {
            [dict setObject:value forKey:@"field_name"];
        }
    }

    {
        NSString * value = self.originalValue;
        if (value) {
            [dict setObject:value forKey:@"original_value"];
        }
    }

    {
        NSString * value = self.correctedValue;
        if (value) {
            [dict setObject:value forKey:@"corrected_value"];
        }
    }

    if (self->_flags.has_isMarkedIncorrect)
    {
        [dict setObject:@(self->_isMarkedIncorrect) forKey:@"is_marked_incorrect"];
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPCorrectedFieldReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPCorrectedFieldReadAllFrom(__unsafe_unretained GEORPCorrectedField *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPCorrectedFieldReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPCorrectedFieldReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPCorrectedFieldReadFrom(__unsafe_unretained GEORPCorrectedField *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPCorrectedFieldReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPCorrectedFieldReadSpecified(__unsafe_unretained GEORPCorrectedField *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_fieldName
        + self->_flags.read_originalValue
        + self->_flags.read_correctedValue
        ;
    #define requiredLazyFieldCount 2 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* field */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_field = YES;
                self->_field = PBReaderReadInt32(reader);

            }
            break;
            case 2 /* fieldName */:
            {
                if (!shouldParseTag || self->_flags.read_fieldName) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_fieldName) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_fieldName = PBReaderReadString(reader);
                self->_fieldName = new_fieldName;

                --tagsRemaining;
            }
            break;
            case 3 /* originalValue */:
            {
                if (!shouldParseTag || self->_flags.read_originalValue) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_originalValue) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_originalValue = PBReaderReadString(reader);
                self->_originalValue = new_originalValue;

                --tagsRemaining;
            }
            break;
            case 4 /* correctedValue */:
            {
                if (!shouldParseTag || self->_flags.read_correctedValue) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_correctedValue) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_correctedValue = PBReaderReadString(reader);
                self->_correctedValue = new_correctedValue;

                --tagsRemaining;
            }
            break;
            case 5 /* isMarkedIncorrect */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_isMarkedIncorrect = YES;
                self->_isMarkedIncorrect = PBReaderReadBOOL(reader);

            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
        }
        self->_flags.read_fieldName = YES;
        self->_flags.read_originalValue = YES;
        self->_flags.read_correctedValue = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 2 /* fieldName */:
                    self->_flags.read_fieldName = YES;
                    break;
                case 3 /* originalValue */:
                    self->_flags.read_originalValue = YES;
                    break;
                case 4 /* correctedValue */:
                    self->_flags.read_correctedValue = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPCorrectedFieldIsValid(reader);
}

BOOL GEORPCorrectedFieldIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* field */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 2 /* fieldName */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 3 /* originalValue */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 4 /* correctedValue */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 5 /* isMarkedIncorrect */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPCorrectedFieldReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPCorrectedFieldIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* field */
    {
        if (self->_flags.has_field)
        {
            PBDataWriterWriteInt32Field(writer, self->_field, 1);
        }
    }

    /* fieldName */
    {
        if (self->_fieldName)
        {
            PBDataWriterWriteStringField(writer, self->_fieldName, 2);
        }
    }

    /* originalValue */
    {
        if (self->_originalValue)
        {
            PBDataWriterWriteStringField(writer, self->_originalValue, 3);
        }
    }

    /* correctedValue */
    {
        if (self->_correctedValue)
        {
            PBDataWriterWriteStringField(writer, self->_correctedValue, 4);
        }
    }

    /* isMarkedIncorrect */
    {
        if (self->_flags.has_isMarkedIncorrect)
        {
            PBDataWriterWriteBOOLField(writer, self->_isMarkedIncorrect, 5);
        }
    }
}

BOOL GEORPCorrectedFieldIsDirty(__unsafe_unretained GEORPCorrectedField *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_field
        || self->_flags.wrote_fieldName
        || self->_flags.read_fieldName
        || self->_flags.wrote_originalValue
        || self->_flags.read_originalValue
        || self->_flags.wrote_correctedValue
        || self->_flags.read_correctedValue
        || self->_flags.wrote_isMarkedIncorrect
    ;


    return dirty;
}


- (void)copyTo:(GEORPCorrectedField *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (self->_flags.has_field)
    {
        other->_field = _field;
        other->_flags.has_field = YES;
    }
    if (_fieldName)
    {
        other.fieldName = _fieldName;
    }
    if (_originalValue)
    {
        other.originalValue = _originalValue;
    }
    if (_correctedValue)
    {
        other.correctedValue = _correctedValue;
    }
    if (self->_flags.has_isMarkedIncorrect)
    {
        other->_isMarkedIncorrect = _isMarkedIncorrect;
        other->_flags.has_isMarkedIncorrect = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPCorrectedField *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_field
                || _flags.wrote_fieldName
                || _flags.wrote_originalValue
                || _flags.wrote_correctedValue
                || _flags.wrote_isMarkedIncorrect
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPCorrectedFieldReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    if (self->_flags.has_field)
    {
        copy->_field = _field;
        copy->_flags.has_field = YES;
    }
    copy->_fieldName = [_fieldName copyWithZone:zone];
    copy->_originalValue = [_originalValue copyWithZone:zone];
    copy->_correctedValue = [_correctedValue copyWithZone:zone];
    if (self->_flags.has_isMarkedIncorrect)
    {
        copy->_isMarkedIncorrect = _isMarkedIncorrect;
        copy->_flags.has_isMarkedIncorrect = YES;
    }
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPCorrectedField *other = (GEORPCorrectedField *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_field && other->_flags.has_field && self->_field == other->_field) || (!self->_flags.has_field && !other->_flags.has_field))
    &&
    ((!self->_fieldName && !other->_fieldName) || [self->_fieldName isEqual:other->_fieldName])
    &&
    ((!self->_originalValue && !other->_originalValue) || [self->_originalValue isEqual:other->_originalValue])
    &&
    ((!self->_correctedValue && !other->_correctedValue) || [self->_correctedValue isEqual:other->_correctedValue])
    &&
    ((self->_flags.has_isMarkedIncorrect && other->_flags.has_isMarkedIncorrect && ((self->_isMarkedIncorrect && other->_isMarkedIncorrect) || (!self->_isMarkedIncorrect && !other->_isMarkedIncorrect))) || (!self->_flags.has_isMarkedIncorrect && !other->_flags.has_isMarkedIncorrect))
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_field ? PBHashInt((NSUInteger)self->_field) : 0)
    ^
    [self->_fieldName hash]
    ^
    [self->_originalValue hash]
    ^
    [self->_correctedValue hash]
    ^
    (self->_flags.has_isMarkedIncorrect ? PBHashInt((NSUInteger)self->_isMarkedIncorrect) : 0)
    ;
}

- (void)mergeFrom:(GEORPCorrectedField *)other
{
    [other readAll:NO];
    if (other->_flags.has_field)
    {
        self->_field = other->_field;
        self->_flags.has_field = 1;
    }
    if (other->_fieldName)
    {
        [self setFieldName:other->_fieldName];
    }
    if (other->_originalValue)
    {
        [self setOriginalValue:other->_originalValue];
    }
    if (other->_correctedValue)
    {
        [self setCorrectedValue:other->_correctedValue];
    }
    if (other->_flags.has_isMarkedIncorrect)
    {
        self->_isMarkedIncorrect = other->_isMarkedIncorrect;
        self->_flags.has_isMarkedIncorrect = 1;
    }
}


@end


