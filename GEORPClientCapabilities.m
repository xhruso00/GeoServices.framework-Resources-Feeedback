// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPClientCapabilities.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPClientCapabilities


- (BOOL)hasConstrainedProblemStatusSize
{
    return _hasConstrainedProblemStatusSize;
}
- (void)setHasConstrainedProblemStatusSize:(BOOL)v
{
    _flags.has_hasConstrainedProblemStatusSize = 1;
    _hasConstrainedProblemStatusSize = v;
}
- (void)setHasHasConstrainedProblemStatusSize:(BOOL)f
{
    _flags.has_hasConstrainedProblemStatusSize = f ? 1 : 0;
}
- (BOOL)hasHasConstrainedProblemStatusSize
{
    return (BOOL)_flags.has_hasConstrainedProblemStatusSize;
}

- (BOOL)hasNoOptInRequest
{
    return _hasNoOptInRequest;
}
- (void)setHasNoOptInRequest:(BOOL)v
{
    _flags.has_hasNoOptInRequest = 1;
    _hasNoOptInRequest = v;
}
- (void)setHasHasNoOptInRequest:(BOOL)f
{
    _flags.has_hasNoOptInRequest = f ? 1 : 0;
}
- (BOOL)hasHasNoOptInRequest
{
    return (BOOL)_flags.has_hasNoOptInRequest;
}

- (BOOL)hasFeatureHandle
{
    return _hasFeatureHandle;
}
- (void)setHasFeatureHandle:(BOOL)v
{
    _flags.has_hasFeatureHandle = 1;
    _hasFeatureHandle = v;
}
- (void)setHasHasFeatureHandle:(BOOL)f
{
    _flags.has_hasFeatureHandle = f ? 1 : 0;
}
- (BOOL)hasHasFeatureHandle
{
    return (BOOL)_flags.has_hasFeatureHandle;
}

- (BOOL)hasSupportForIdsBasedNotifications
{
    return _hasSupportForIdsBasedNotifications;
}
- (void)setHasSupportForIdsBasedNotifications:(BOOL)v
{
    _flags.has_hasSupportForIdsBasedNotifications = 1;
    _hasSupportForIdsBasedNotifications = v;
}
- (void)setHasHasSupportForIdsBasedNotifications:(BOOL)f
{
    _flags.has_hasSupportForIdsBasedNotifications = f ? 1 : 0;
}
- (BOOL)hasHasSupportForIdsBasedNotifications
{
    return (BOOL)_flags.has_hasSupportForIdsBasedNotifications;
}

- (GEOTransitMarketSupport)transitMarketSupport
{
    return _flags.has_transitMarketSupport ? _transitMarketSupport : GEOTransitMarketSupport_VERSION_1;
}
- (void)setTransitMarketSupport:(GEOTransitMarketSupport)v
{
    _flags.has_transitMarketSupport = 1;
    _transitMarketSupport = v;
}
- (void)setHasTransitMarketSupport:(BOOL)f
{
    _flags.has_transitMarketSupport = f ? 1 : 0;
}
- (BOOL)hasTransitMarketSupport
{
    return (BOOL)_flags.has_transitMarketSupport;
}
- (NSString *)transitMarketSupportAsString:(GEOTransitMarketSupport)value
{
    return GEOTransitMarketSupportAsString(value);
}
- (GEOTransitMarketSupport)StringAsTransitMarketSupport:(NSString *)str
{
    return StringAsGEOTransitMarketSupport(str);
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_hasConstrainedProblemStatusSize)
    {
        [dict setObject:@(self->_hasConstrainedProblemStatusSize) forKey:@"has_constrained_problem_status_size"];
    }

    if (self->_flags.has_hasNoOptInRequest)
    {
        [dict setObject:@(self->_hasNoOptInRequest) forKey:@"has_no_opt_in_request"];
    }

    if (self->_flags.has_hasFeatureHandle)
    {
        [dict setObject:@(self->_hasFeatureHandle) forKey:@"has_feature_handle"];
    }

    if (self->_flags.has_hasSupportForIdsBasedNotifications)
    {
        [dict setObject:@(self->_hasSupportForIdsBasedNotifications) forKey:@"has_support_for_ids_based_notifications"];
    }

    if (self->_flags.has_transitMarketSupport)
    {
        [dict setObject:GEOTransitMarketSupportAsString(self->_transitMarketSupport) forKey:@"transit_market_support"];
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively { /* noop */ }
BOOL GEORPClientCapabilitiesReadAllFrom(__unsafe_unretained GEORPClientCapabilities *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};

    @synchronized(reader) {
        BOOL result = GEORPClientCapabilitiesReadSpecified(self, reader, recursively ? recursiveTag : nil);
        return result;
    }
}
BOOL GEORPClientCapabilitiesReadFrom(__unsafe_unretained GEORPClientCapabilities *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPClientCapabilitiesReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPClientCapabilitiesReadSpecified(__unsafe_unretained GEORPClientCapabilities *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    #define shouldParseUnknown YES
    __attribute__((unused)) BOOL const recursively = (tags != nil && tags[0] == TAG_PARSE_ALL_RECURSIVE);
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
    #define shouldParseTag YES

        switch (tag) {

            case 1 /* hasConstrainedProblemStatusSize */:
            {
                self->_flags.has_hasConstrainedProblemStatusSize = YES;
                self->_hasConstrainedProblemStatusSize = PBReaderReadBOOL(reader);

            }
            break;
            case 2 /* hasNoOptInRequest */:
            {
                self->_flags.has_hasNoOptInRequest = YES;
                self->_hasNoOptInRequest = PBReaderReadBOOL(reader);

            }
            break;
            case 3 /* hasFeatureHandle */:
            {
                self->_flags.has_hasFeatureHandle = YES;
                self->_hasFeatureHandle = PBReaderReadBOOL(reader);

            }
            break;
            case 4 /* hasSupportForIdsBasedNotifications */:
            {
                self->_flags.has_hasSupportForIdsBasedNotifications = YES;
                self->_hasSupportForIdsBasedNotifications = PBReaderReadBOOL(reader);

            }
            break;
            case 5 /* transitMarketSupport */:
            {
                self->_flags.has_transitMarketSupport = YES;
                self->_transitMarketSupport = PBReaderReadInt32(reader);

            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }



    #undef shouldParseTag
    #undef shouldParseUnknown
    #undef recursively
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPClientCapabilitiesIsValid(reader);
}

BOOL GEORPClientCapabilitiesIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* hasConstrainedProblemStatusSize */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 2 /* hasNoOptInRequest */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 3 /* hasFeatureHandle */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 4 /* hasSupportForIdsBasedNotifications */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 5 /* transitMarketSupport */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPClientCapabilitiesReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{

    /* hasConstrainedProblemStatusSize */
    {
        if (self->_flags.has_hasConstrainedProblemStatusSize)
        {
            PBDataWriterWriteBOOLField(writer, self->_hasConstrainedProblemStatusSize, 1);
        }
    }

    /* hasNoOptInRequest */
    {
        if (self->_flags.has_hasNoOptInRequest)
        {
            PBDataWriterWriteBOOLField(writer, self->_hasNoOptInRequest, 2);
        }
    }

    /* hasFeatureHandle */
    {
        if (self->_flags.has_hasFeatureHandle)
        {
            PBDataWriterWriteBOOLField(writer, self->_hasFeatureHandle, 3);
        }
    }

    /* hasSupportForIdsBasedNotifications */
    {
        if (self->_flags.has_hasSupportForIdsBasedNotifications)
        {
            PBDataWriterWriteBOOLField(writer, self->_hasSupportForIdsBasedNotifications, 4);
        }
    }

    /* transitMarketSupport */
    {
        if (self->_flags.has_transitMarketSupport)
        {
            PBDataWriterWriteInt32Field(writer, self->_transitMarketSupport, 5);
        }
    }
}



- (void)copyTo:(GEORPClientCapabilities *)other
{
    [self readAll:NO];
    if (self->_flags.has_hasConstrainedProblemStatusSize)
    {
        other->_hasConstrainedProblemStatusSize = _hasConstrainedProblemStatusSize;
        other->_flags.has_hasConstrainedProblemStatusSize = YES;
    }
    if (self->_flags.has_hasNoOptInRequest)
    {
        other->_hasNoOptInRequest = _hasNoOptInRequest;
        other->_flags.has_hasNoOptInRequest = YES;
    }
    if (self->_flags.has_hasFeatureHandle)
    {
        other->_hasFeatureHandle = _hasFeatureHandle;
        other->_flags.has_hasFeatureHandle = YES;
    }
    if (self->_flags.has_hasSupportForIdsBasedNotifications)
    {
        other->_hasSupportForIdsBasedNotifications = _hasSupportForIdsBasedNotifications;
        other->_flags.has_hasSupportForIdsBasedNotifications = YES;
    }
    if (self->_flags.has_transitMarketSupport)
    {
        other->_transitMarketSupport = _transitMarketSupport;
        other->_flags.has_transitMarketSupport = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPClientCapabilities *copy = [[[self class] allocWithZone:zone] init];
    if (self->_flags.has_hasConstrainedProblemStatusSize)
    {
        copy->_hasConstrainedProblemStatusSize = _hasConstrainedProblemStatusSize;
        copy->_flags.has_hasConstrainedProblemStatusSize = YES;
    }
    if (self->_flags.has_hasNoOptInRequest)
    {
        copy->_hasNoOptInRequest = _hasNoOptInRequest;
        copy->_flags.has_hasNoOptInRequest = YES;
    }
    if (self->_flags.has_hasFeatureHandle)
    {
        copy->_hasFeatureHandle = _hasFeatureHandle;
        copy->_flags.has_hasFeatureHandle = YES;
    }
    if (self->_flags.has_hasSupportForIdsBasedNotifications)
    {
        copy->_hasSupportForIdsBasedNotifications = _hasSupportForIdsBasedNotifications;
        copy->_flags.has_hasSupportForIdsBasedNotifications = YES;
    }
    if (self->_flags.has_transitMarketSupport)
    {
        copy->_transitMarketSupport = _transitMarketSupport;
        copy->_flags.has_transitMarketSupport = YES;
    }
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPClientCapabilities *other = (GEORPClientCapabilities *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_hasConstrainedProblemStatusSize && other->_flags.has_hasConstrainedProblemStatusSize && ((self->_hasConstrainedProblemStatusSize && other->_hasConstrainedProblemStatusSize) || (!self->_hasConstrainedProblemStatusSize && !other->_hasConstrainedProblemStatusSize))) || (!self->_flags.has_hasConstrainedProblemStatusSize && !other->_flags.has_hasConstrainedProblemStatusSize))
    &&
    ((self->_flags.has_hasNoOptInRequest && other->_flags.has_hasNoOptInRequest && ((self->_hasNoOptInRequest && other->_hasNoOptInRequest) || (!self->_hasNoOptInRequest && !other->_hasNoOptInRequest))) || (!self->_flags.has_hasNoOptInRequest && !other->_flags.has_hasNoOptInRequest))
    &&
    ((self->_flags.has_hasFeatureHandle && other->_flags.has_hasFeatureHandle && ((self->_hasFeatureHandle && other->_hasFeatureHandle) || (!self->_hasFeatureHandle && !other->_hasFeatureHandle))) || (!self->_flags.has_hasFeatureHandle && !other->_flags.has_hasFeatureHandle))
    &&
    ((self->_flags.has_hasSupportForIdsBasedNotifications && other->_flags.has_hasSupportForIdsBasedNotifications && ((self->_hasSupportForIdsBasedNotifications && other->_hasSupportForIdsBasedNotifications) || (!self->_hasSupportForIdsBasedNotifications && !other->_hasSupportForIdsBasedNotifications))) || (!self->_flags.has_hasSupportForIdsBasedNotifications && !other->_flags.has_hasSupportForIdsBasedNotifications))
    &&
    ((self->_flags.has_transitMarketSupport && other->_flags.has_transitMarketSupport && self->_transitMarketSupport == other->_transitMarketSupport) || (!self->_flags.has_transitMarketSupport && !other->_flags.has_transitMarketSupport))
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_hasConstrainedProblemStatusSize ? PBHashInt((NSUInteger)self->_hasConstrainedProblemStatusSize) : 0)
    ^
    (self->_flags.has_hasNoOptInRequest ? PBHashInt((NSUInteger)self->_hasNoOptInRequest) : 0)
    ^
    (self->_flags.has_hasFeatureHandle ? PBHashInt((NSUInteger)self->_hasFeatureHandle) : 0)
    ^
    (self->_flags.has_hasSupportForIdsBasedNotifications ? PBHashInt((NSUInteger)self->_hasSupportForIdsBasedNotifications) : 0)
    ^
    (self->_flags.has_transitMarketSupport ? PBHashInt((NSUInteger)self->_transitMarketSupport) : 0)
    ;
}

- (void)mergeFrom:(GEORPClientCapabilities *)other
{
    [other readAll:NO];
    if (other->_flags.has_hasConstrainedProblemStatusSize)
    {
        self->_hasConstrainedProblemStatusSize = other->_hasConstrainedProblemStatusSize;
        self->_flags.has_hasConstrainedProblemStatusSize = 1;
    }
    if (other->_flags.has_hasNoOptInRequest)
    {
        self->_hasNoOptInRequest = other->_hasNoOptInRequest;
        self->_flags.has_hasNoOptInRequest = 1;
    }
    if (other->_flags.has_hasFeatureHandle)
    {
        self->_hasFeatureHandle = other->_hasFeatureHandle;
        self->_flags.has_hasFeatureHandle = 1;
    }
    if (other->_flags.has_hasSupportForIdsBasedNotifications)
    {
        self->_hasSupportForIdsBasedNotifications = other->_hasSupportForIdsBasedNotifications;
        self->_flags.has_hasSupportForIdsBasedNotifications = 1;
    }
    if (other->_flags.has_transitMarketSupport)
    {
        self->_transitMarketSupport = other->_transitMarketSupport;
        self->_flags.has_transitMarketSupport = 1;
    }
}


@end


