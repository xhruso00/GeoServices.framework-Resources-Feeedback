// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPProblemCorrections.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEORPCorrectedCoordinate.h>
#import <GeoServices/GEORPCorrectedField.h>
#import <GeoServices/GEORPCorrectedFlag.h>
#import <GeoServices/GEORPCorrectedLabel.h>
#import <GeoServices/GEORPCorrectedSearch.h>
#import <GeoServices/GEORPDirectionsProblem.h>
#import <GeoServices/GEORPMapLocation.h>
#import <GeoServices/GEORPMerchantLookupCorrections.h>
#import <GeoServices/GEORPPhotoWithMetadata.h>
#import <GeoServices/GEORPPlaceProblem.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPProblemCorrections

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readCorrectedFields {
    if (_flags.read_correctedFields) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_correctedFields) {
            static const uint32_t tags[] = {1, 0};
            GEORPProblemCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPCorrectedField *> *)correctedFields
{
    [self _readCorrectedFields];
    return _correctedFields;
}
- (void)setCorrectedFields:(NSMutableArray<GEORPCorrectedField *> *)v
{
    _flags.read_correctedFields = 1;
    _flags.wrote_correctedFields = 1;
    _correctedFields = v;
}
- (void)clearCorrectedFields
{
    _flags.read_correctedFields = 1;
    _flags.wrote_correctedFields = 1;
    [_correctedFields removeAllObjects];
}
- (void)addCorrectedField:(GEORPCorrectedField *)i
{
    [self _readCorrectedFields];
    [self _addNoFlagsCorrectedField:i];
    _flags.read_correctedFields = 1;
    _flags.wrote_correctedFields = 1;
}
- (void)_addNoFlagsCorrectedField:(GEORPCorrectedField *)i
{
    if (!_correctedFields)
    {
        _correctedFields = [[NSMutableArray alloc] init];
    }
    [_correctedFields addObject:i];
}
- (NSUInteger)correctedFieldsCount
{
    [self _readCorrectedFields];
    return [_correctedFields count];
}
- (GEORPCorrectedField *)correctedFieldAtIndex:(NSUInteger)idx
{
    [self _readCorrectedFields];
    return [_correctedFields objectAtIndex:idx];
}
+ (Class)correctedFieldType
{
    return [GEORPCorrectedField class];
}

- (void)_readCorrectedLabel {
    if (_flags.read_correctedLabel) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_correctedLabel) {
            static const uint32_t tags[] = {2, 0};
            GEORPProblemCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCorrectedLabel
{
    [self _readCorrectedLabel];
    return _correctedLabel != nil;
}
- (GEORPCorrectedLabel *)correctedLabel
{
    [self _readCorrectedLabel];
    return _correctedLabel;
}
- (void)setCorrectedLabel:(GEORPCorrectedLabel *)v
{
    _flags.read_correctedLabel = 1;
    _flags.wrote_correctedLabel = 1;
    _correctedLabel = v;
}

- (void)_readCorrectedCoordinate {
    if (_flags.read_correctedCoordinate) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_correctedCoordinate) {
            static const uint32_t tags[] = {3, 0};
            GEORPProblemCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCorrectedCoordinate
{
    [self _readCorrectedCoordinate];
    return _correctedCoordinate != nil;
}
- (GEORPCorrectedCoordinate *)correctedCoordinate
{
    [self _readCorrectedCoordinate];
    return _correctedCoordinate;
}
- (void)setCorrectedCoordinate:(GEORPCorrectedCoordinate *)v
{
    _flags.read_correctedCoordinate = 1;
    _flags.wrote_correctedCoordinate = 1;
    _correctedCoordinate = v;
}

- (void)_readCorrectedSearch {
    if (_flags.read_correctedSearch) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_correctedSearch) {
            static const uint32_t tags[] = {4, 0};
            GEORPProblemCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCorrectedSearch
{
    [self _readCorrectedSearch];
    return _correctedSearch != nil;
}
- (GEORPCorrectedSearch *)correctedSearch
{
    [self _readCorrectedSearch];
    return _correctedSearch;
}
- (void)setCorrectedSearch:(GEORPCorrectedSearch *)v
{
    _flags.read_correctedSearch = 1;
    _flags.wrote_correctedSearch = 1;
    _correctedSearch = v;
}

- (void)_readCorrectedMapLocation {
    if (_flags.read_correctedMapLocation) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_correctedMapLocation) {
            static const uint32_t tags[] = {5, 0};
            GEORPProblemCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCorrectedMapLocation
{
    [self _readCorrectedMapLocation];
    return _correctedMapLocation != nil;
}
- (GEORPMapLocation *)correctedMapLocation
{
    [self _readCorrectedMapLocation];
    return _correctedMapLocation;
}
- (void)setCorrectedMapLocation:(GEORPMapLocation *)v
{
    _flags.read_correctedMapLocation = 1;
    _flags.wrote_correctedMapLocation = 1;
    _correctedMapLocation = v;
}

- (void)_readComments {
    if (_flags.read_comments) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_comments) {
            static const uint32_t tags[] = {6, 0};
            GEORPProblemCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasComments
{
    [self _readComments];
    return _comments != nil;
}
- (NSString *)comments
{
    [self _readComments];
    return _comments;
}
- (void)setComments:(NSString *)v
{
    _flags.read_comments = 1;
    _flags.wrote_comments = 1;
    _comments = v;
}

- (void)_readPlaceProblem {
    if (_flags.read_placeProblem) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_placeProblem) {
            static const uint32_t tags[] = {8, 0};
            GEORPProblemCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasPlaceProblem
{
    [self _readPlaceProblem];
    return _placeProblem != nil;
}
- (GEORPPlaceProblem *)placeProblem
{
    [self _readPlaceProblem];
    return _placeProblem;
}
- (void)setPlaceProblem:(GEORPPlaceProblem *)v
{
    _flags.read_placeProblem = 1;
    _flags.wrote_placeProblem = 1;
    _placeProblem = v;
}

- (void)_readDirectionsProblem {
    if (_flags.read_directionsProblem) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_directionsProblem) {
            static const uint32_t tags[] = {9, 0};
            GEORPProblemCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasDirectionsProblem
{
    [self _readDirectionsProblem];
    return _directionsProblem != nil;
}
- (GEORPDirectionsProblem *)directionsProblem
{
    [self _readDirectionsProblem];
    return _directionsProblem;
}
- (void)setDirectionsProblem:(GEORPDirectionsProblem *)v
{
    _flags.read_directionsProblem = 1;
    _flags.wrote_directionsProblem = 1;
    _directionsProblem = v;
}

- (void)_readPhotoWithMetadatas {
    if (_flags.read_photoWithMetadatas) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_photoWithMetadatas) {
            static const uint32_t tags[] = {10, 0};
            GEORPProblemCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPPhotoWithMetadata *> *)photoWithMetadatas
{
    [self _readPhotoWithMetadatas];
    return _photoWithMetadatas;
}
- (void)setPhotoWithMetadatas:(NSMutableArray<GEORPPhotoWithMetadata *> *)v
{
    _flags.read_photoWithMetadatas = 1;
    _flags.wrote_photoWithMetadatas = 1;
    _photoWithMetadatas = v;
}
- (void)clearPhotoWithMetadatas
{
    _flags.read_photoWithMetadatas = 1;
    _flags.wrote_photoWithMetadatas = 1;
    [_photoWithMetadatas removeAllObjects];
}
- (void)addPhotoWithMetadata:(GEORPPhotoWithMetadata *)i
{
    [self _readPhotoWithMetadatas];
    [self _addNoFlagsPhotoWithMetadata:i];
    _flags.read_photoWithMetadatas = 1;
    _flags.wrote_photoWithMetadatas = 1;
}
- (void)_addNoFlagsPhotoWithMetadata:(GEORPPhotoWithMetadata *)i
{
    if (!_photoWithMetadatas)
    {
        _photoWithMetadatas = [[NSMutableArray alloc] init];
    }
    [_photoWithMetadatas addObject:i];
}
- (NSUInteger)photoWithMetadatasCount
{
    [self _readPhotoWithMetadatas];
    return [_photoWithMetadatas count];
}
- (GEORPPhotoWithMetadata *)photoWithMetadataAtIndex:(NSUInteger)idx
{
    [self _readPhotoWithMetadatas];
    return [_photoWithMetadatas objectAtIndex:idx];
}
+ (Class)photoWithMetadataType
{
    return [GEORPPhotoWithMetadata class];
}

- (BOOL)delayed
{
    return _delayed;
}
- (void)setDelayed:(BOOL)v
{
    _flags.wrote_delayed = 1;
    _flags.has_delayed = 1;
    _delayed = v;
}
- (void)setHasDelayed:(BOOL)f
{
    _flags.wrote_delayed = 1;
    _flags.has_delayed = f ? 1 : 0;
}
- (BOOL)hasDelayed
{
    return (BOOL)_flags.has_delayed;
}

- (void)_readCorrectedFlags {
    if (_flags.read_correctedFlags) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_correctedFlags) {
            static const uint32_t tags[] = {15, 0};
            GEORPProblemCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPCorrectedFlag *> *)correctedFlags
{
    [self _readCorrectedFlags];
    return _correctedFlags;
}
- (void)setCorrectedFlags:(NSMutableArray<GEORPCorrectedFlag *> *)v
{
    _flags.read_correctedFlags = 1;
    _flags.wrote_correctedFlags = 1;
    _correctedFlags = v;
}
- (void)clearCorrectedFlags
{
    _flags.read_correctedFlags = 1;
    _flags.wrote_correctedFlags = 1;
    [_correctedFlags removeAllObjects];
}
- (void)addCorrectedFlag:(GEORPCorrectedFlag *)i
{
    [self _readCorrectedFlags];
    [self _addNoFlagsCorrectedFlag:i];
    _flags.read_correctedFlags = 1;
    _flags.wrote_correctedFlags = 1;
}
- (void)_addNoFlagsCorrectedFlag:(GEORPCorrectedFlag *)i
{
    if (!_correctedFlags)
    {
        _correctedFlags = [[NSMutableArray alloc] init];
    }
    [_correctedFlags addObject:i];
}
- (NSUInteger)correctedFlagsCount
{
    [self _readCorrectedFlags];
    return [_correctedFlags count];
}
- (GEORPCorrectedFlag *)correctedFlagAtIndex:(NSUInteger)idx
{
    [self _readCorrectedFlags];
    return [_correctedFlags objectAtIndex:idx];
}
+ (Class)correctedFlagType
{
    return [GEORPCorrectedFlag class];
}

- (void)_readMerchantLookupCorrections {
    if (_flags.read_merchantLookupCorrections) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_merchantLookupCorrections) {
            static const uint32_t tags[] = {16, 0};
            GEORPProblemCorrectionsReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasMerchantLookupCorrections
{
    [self _readMerchantLookupCorrections];
    return _merchantLookupCorrections != nil;
}
- (GEORPMerchantLookupCorrections *)merchantLookupCorrections
{
    [self _readMerchantLookupCorrections];
    return _merchantLookupCorrections;
}
- (void)setMerchantLookupCorrections:(GEORPMerchantLookupCorrections *)v
{
    _flags.read_merchantLookupCorrections = 1;
    _flags.wrote_merchantLookupCorrections = 1;
    _merchantLookupCorrections = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if ([self->_correctedFields count])
    {
        NSMutableArray *correctedFieldsDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_correctedFields count]];
        for (GEORPCorrectedField * i_correctedField in self->_correctedFields)
        {
            [correctedFieldsDictReprs addObject:[i_correctedField dictionaryRepresentation]];
        }
        [dict setObject:correctedFieldsDictReprs forKey:@"corrected_field"];
    }

    {
        GEORPCorrectedLabel * value = self.correctedLabel;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"corrected_label"];
        }
    }

    {
        GEORPCorrectedCoordinate * value = self.correctedCoordinate;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"corrected_coordinate"];
        }
    }

    {
        GEORPCorrectedSearch * value = self.correctedSearch;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"corrected_search"];
        }
    }

    {
        GEORPMapLocation * value = self.correctedMapLocation;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"corrected_map_location"];
        }
    }

    {
        NSString * value = self.comments;
        if (value) {
            [dict setObject:value forKey:@"comments"];
        }
    }

    {
        GEORPPlaceProblem * value = self.placeProblem;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"place_problem"];
        }
    }

    {
        GEORPDirectionsProblem * value = self.directionsProblem;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"directions_problem"];
        }
    }

    if ([self->_photoWithMetadatas count])
    {
        NSMutableArray *photoWithMetadatasDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_photoWithMetadatas count]];
        for (GEORPPhotoWithMetadata * i_photoWithMetadata in self->_photoWithMetadatas)
        {
            [photoWithMetadatasDictReprs addObject:[i_photoWithMetadata dictionaryRepresentation]];
        }
        [dict setObject:photoWithMetadatasDictReprs forKey:@"photo_with_metadata"];
    }

    if (self->_flags.has_delayed)
    {
        [dict setObject:@(self->_delayed) forKey:@"delayed"];
    }

    if ([self->_correctedFlags count])
    {
        NSMutableArray *correctedFlagsDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_correctedFlags count]];
        for (GEORPCorrectedFlag * i_correctedFlag in self->_correctedFlags)
        {
            [correctedFlagsDictReprs addObject:[i_correctedFlag dictionaryRepresentation]];
        }
        [dict setObject:correctedFlagsDictReprs forKey:@"corrected_flag"];
    }

    {
        GEORPMerchantLookupCorrections * value = self.merchantLookupCorrections;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"merchant_lookup_corrections"];
        }
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPProblemCorrectionsReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPProblemCorrectionsReadAllFrom(__unsafe_unretained GEORPProblemCorrections *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPProblemCorrectionsReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPProblemCorrectionsReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPProblemCorrectionsReadFrom(__unsafe_unretained GEORPProblemCorrections *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPProblemCorrectionsReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPProblemCorrectionsReadSpecified(__unsafe_unretained GEORPProblemCorrections *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_correctedFields
        + self->_flags.read_correctedLabel
        + self->_flags.read_correctedCoordinate
        + self->_flags.read_correctedSearch
        + self->_flags.read_correctedMapLocation
        + self->_flags.read_comments
        + self->_flags.read_placeProblem
        + self->_flags.read_directionsProblem
        + self->_flags.read_photoWithMetadatas
        + self->_flags.read_correctedFlags
        + self->_flags.read_merchantLookupCorrections
        ;
    #define requiredLazyFieldCount 8 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* correctedFields */:
            {
                if (!shouldParseTag || self->_flags.read_correctedFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPCorrectedField *new_correctedField = [[GEORPCorrectedField alloc] init];
                [self _addNoFlagsCorrectedField:new_correctedField];
                PBDataReaderMark mark_correctedField;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_correctedField);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPCorrectedFieldReadAllFrom(new_correctedField, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_correctedField);

            }
            break;
            case 2 /* correctedLabel */:
            {
                if (!shouldParseTag || self->_flags.read_correctedLabel) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_correctedLabel) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPCorrectedLabel *new_correctedLabel = [[GEORPCorrectedLabel alloc] init];
                self->_correctedLabel = new_correctedLabel;
                PBDataReaderMark mark_correctedLabel;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_correctedLabel);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPCorrectedLabelReadAllFrom(new_correctedLabel, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_correctedLabel);

                --tagsRemaining;
            }
            break;
            case 3 /* correctedCoordinate */:
            {
                if (!shouldParseTag || self->_flags.read_correctedCoordinate) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_correctedCoordinate) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPCorrectedCoordinate *new_correctedCoordinate = [[GEORPCorrectedCoordinate alloc] init];
                self->_correctedCoordinate = new_correctedCoordinate;
                PBDataReaderMark mark_correctedCoordinate;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_correctedCoordinate);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPCorrectedCoordinateReadAllFrom(new_correctedCoordinate, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_correctedCoordinate);

                --tagsRemaining;
            }
            break;
            case 4 /* correctedSearch */:
            {
                if (!shouldParseTag || self->_flags.read_correctedSearch) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_correctedSearch) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPCorrectedSearch *new_correctedSearch = [[GEORPCorrectedSearch alloc] init];
                self->_correctedSearch = new_correctedSearch;
                PBDataReaderMark mark_correctedSearch;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_correctedSearch);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPCorrectedSearchReadAllFrom(new_correctedSearch, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_correctedSearch);

                --tagsRemaining;
            }
            break;
            case 5 /* correctedMapLocation */:
            {
                if (!shouldParseTag || self->_flags.read_correctedMapLocation) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_correctedMapLocation) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPMapLocation *new_correctedMapLocation = [[GEORPMapLocation alloc] init];
                self->_correctedMapLocation = new_correctedMapLocation;
                PBDataReaderMark mark_correctedMapLocation;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_correctedMapLocation);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPMapLocationReadAllFrom(new_correctedMapLocation, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_correctedMapLocation);

                --tagsRemaining;
            }
            break;
            case 6 /* comments */:
            {
                if (!shouldParseTag || self->_flags.read_comments) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_comments) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_comments = PBReaderReadString(reader);
                self->_comments = new_comments;

                --tagsRemaining;
            }
            break;
            case 8 /* placeProblem */:
            {
                if (!shouldParseTag || self->_flags.read_placeProblem) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_placeProblem) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPPlaceProblem *new_placeProblem = [[GEORPPlaceProblem alloc] init];
                self->_placeProblem = new_placeProblem;
                PBDataReaderMark mark_placeProblem;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_placeProblem);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPPlaceProblemReadAllFrom(new_placeProblem, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_placeProblem);

                --tagsRemaining;
            }
            break;
            case 9 /* directionsProblem */:
            {
                if (!shouldParseTag || self->_flags.read_directionsProblem) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_directionsProblem) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPDirectionsProblem *new_directionsProblem = [[GEORPDirectionsProblem alloc] init];
                self->_directionsProblem = new_directionsProblem;
                PBDataReaderMark mark_directionsProblem;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_directionsProblem);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPDirectionsProblemReadAllFrom(new_directionsProblem, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_directionsProblem);

                --tagsRemaining;
            }
            break;
            case 10 /* photoWithMetadatas */:
            {
                if (!shouldParseTag || self->_flags.read_photoWithMetadatas) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPPhotoWithMetadata *new_photoWithMetadata = [[GEORPPhotoWithMetadata alloc] init];
                [self _addNoFlagsPhotoWithMetadata:new_photoWithMetadata];
                PBDataReaderMark mark_photoWithMetadata;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_photoWithMetadata);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPPhotoWithMetadataReadAllFrom(new_photoWithMetadata, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_photoWithMetadata);

            }
            break;
            case 14 /* delayed */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_delayed = YES;
                self->_delayed = PBReaderReadBOOL(reader);

            }
            break;
            case 15 /* correctedFlags */:
            {
                if (!shouldParseTag || self->_flags.read_correctedFlags) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPCorrectedFlag *new_correctedFlag = [[GEORPCorrectedFlag alloc] init];
                [self _addNoFlagsCorrectedFlag:new_correctedFlag];
                PBDataReaderMark mark_correctedFlag;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_correctedFlag);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPCorrectedFlagReadAllFrom(new_correctedFlag, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_correctedFlag);

            }
            break;
            case 16 /* merchantLookupCorrections */:
            {
                if (!shouldParseTag || self->_flags.read_merchantLookupCorrections) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_merchantLookupCorrections) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPMerchantLookupCorrections *new_merchantLookupCorrections = [[GEORPMerchantLookupCorrections alloc] init];
                self->_merchantLookupCorrections = new_merchantLookupCorrections;
                PBDataReaderMark mark_merchantLookupCorrections;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_merchantLookupCorrections);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPMerchantLookupCorrectionsReadAllFrom(new_merchantLookupCorrections, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_merchantLookupCorrections);

                --tagsRemaining;
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
            for (GEORPCorrectedField * i in self->_correctedFields)
                [i readAll:YES];
            [self->_correctedLabel readAll:YES];
            [self->_correctedCoordinate readAll:YES];
            [self->_correctedSearch readAll:YES];
            [self->_correctedMapLocation readAll:YES];
            [self->_placeProblem readAll:YES];
            [self->_directionsProblem readAll:YES];
            for (GEORPPhotoWithMetadata * i in self->_photoWithMetadatas)
                [i readAll:YES];
            for (GEORPCorrectedFlag * i in self->_correctedFlags)
                [i readAll:YES];
            [self->_merchantLookupCorrections readAll:YES];
        }
        self->_flags.read_correctedFields = YES;
        self->_flags.read_correctedLabel = YES;
        self->_flags.read_correctedCoordinate = YES;
        self->_flags.read_correctedSearch = YES;
        self->_flags.read_correctedMapLocation = YES;
        self->_flags.read_comments = YES;
        self->_flags.read_placeProblem = YES;
        self->_flags.read_directionsProblem = YES;
        self->_flags.read_photoWithMetadatas = YES;
        self->_flags.read_correctedFlags = YES;
        self->_flags.read_merchantLookupCorrections = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* correctedFields */:
                    self->_flags.read_correctedFields = YES;
                    break;
                case 2 /* correctedLabel */:
                    self->_flags.read_correctedLabel = YES;
                    break;
                case 3 /* correctedCoordinate */:
                    self->_flags.read_correctedCoordinate = YES;
                    break;
                case 4 /* correctedSearch */:
                    self->_flags.read_correctedSearch = YES;
                    break;
                case 5 /* correctedMapLocation */:
                    self->_flags.read_correctedMapLocation = YES;
                    break;
                case 6 /* comments */:
                    self->_flags.read_comments = YES;
                    break;
                case 8 /* placeProblem */:
                    self->_flags.read_placeProblem = YES;
                    break;
                case 9 /* directionsProblem */:
                    self->_flags.read_directionsProblem = YES;
                    break;
                case 10 /* photoWithMetadatas */:
                    self->_flags.read_photoWithMetadatas = YES;
                    break;
                case 15 /* correctedFlags */:
                    self->_flags.read_correctedFlags = YES;
                    break;
                case 16 /* merchantLookupCorrections */:
                    self->_flags.read_merchantLookupCorrections = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPProblemCorrectionsIsValid(reader);
}

BOOL GEORPProblemCorrectionsIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* correctedFields */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_correctedField;
                    if (!PBReaderPlaceMark(reader, &mark_correctedField))
                        returnValue(NO);
                    if (!GEORPCorrectedFieldIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_correctedField);
                }
                break;
            case 2 /* correctedLabel */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_correctedLabel;
                    if (!PBReaderPlaceMark(reader, &mark_correctedLabel))
                        returnValue(NO);
                    if (!GEORPCorrectedLabelIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_correctedLabel);
                }
                break;
            case 3 /* correctedCoordinate */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_correctedCoordinate;
                    if (!PBReaderPlaceMark(reader, &mark_correctedCoordinate))
                        returnValue(NO);
                    if (!GEORPCorrectedCoordinateIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_correctedCoordinate);
                }
                break;
            case 4 /* correctedSearch */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_correctedSearch;
                    if (!PBReaderPlaceMark(reader, &mark_correctedSearch))
                        returnValue(NO);
                    if (!GEORPCorrectedSearchIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_correctedSearch);
                }
                break;
            case 5 /* correctedMapLocation */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_correctedMapLocation;
                    if (!PBReaderPlaceMark(reader, &mark_correctedMapLocation))
                        returnValue(NO);
                    if (!GEORPMapLocationIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_correctedMapLocation);
                }
                break;
            case 6 /* comments */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 8 /* placeProblem */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_placeProblem;
                    if (!PBReaderPlaceMark(reader, &mark_placeProblem))
                        returnValue(NO);
                    if (!GEORPPlaceProblemIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_placeProblem);
                }
                break;
            case 9 /* directionsProblem */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_directionsProblem;
                    if (!PBReaderPlaceMark(reader, &mark_directionsProblem))
                        returnValue(NO);
                    if (!GEORPDirectionsProblemIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_directionsProblem);
                }
                break;
            case 10 /* photoWithMetadatas */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_photoWithMetadata;
                    if (!PBReaderPlaceMark(reader, &mark_photoWithMetadata))
                        returnValue(NO);
                    if (!GEORPPhotoWithMetadataIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_photoWithMetadata);
                }
                break;
            case 14 /* delayed */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 15 /* correctedFlags */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_correctedFlag;
                    if (!PBReaderPlaceMark(reader, &mark_correctedFlag))
                        returnValue(NO);
                    if (!GEORPCorrectedFlagIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_correctedFlag);
                }
                break;
            case 16 /* merchantLookupCorrections */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_merchantLookupCorrections;
                    if (!PBReaderPlaceMark(reader, &mark_merchantLookupCorrections))
                        returnValue(NO);
                    if (!GEORPMerchantLookupCorrectionsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_merchantLookupCorrections);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPProblemCorrectionsReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPProblemCorrectionsIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* correctedFields */
    {
        for (GEORPCorrectedField * i_correctedField in self->_correctedFields)
        {
            PBDataWriterWriteSubmessage(writer, i_correctedField, 1);
        }

    }

    /* correctedLabel */
    {
        if (self->_correctedLabel != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_correctedLabel, 2);
        }
    }

    /* correctedCoordinate */
    {
        if (self->_correctedCoordinate != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_correctedCoordinate, 3);
        }
    }

    /* correctedSearch */
    {
        if (self->_correctedSearch != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_correctedSearch, 4);
        }
    }

    /* correctedMapLocation */
    {
        if (self->_correctedMapLocation != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_correctedMapLocation, 5);
        }
    }

    /* comments */
    {
        if (self->_comments)
        {
            PBDataWriterWriteStringField(writer, self->_comments, 6);
        }
    }

    /* placeProblem */
    {
        if (self->_placeProblem != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_placeProblem, 8);
        }
    }

    /* directionsProblem */
    {
        if (self->_directionsProblem != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_directionsProblem, 9);
        }
    }

    /* photoWithMetadatas */
    {
        for (GEORPPhotoWithMetadata * i_photoWithMetadata in self->_photoWithMetadatas)
        {
            PBDataWriterWriteSubmessage(writer, i_photoWithMetadata, 10);
        }

    }

    /* delayed */
    {
        if (self->_flags.has_delayed)
        {
            PBDataWriterWriteBOOLField(writer, self->_delayed, 14);
        }
    }

    /* correctedFlags */
    {
        for (GEORPCorrectedFlag * i_correctedFlag in self->_correctedFlags)
        {
            PBDataWriterWriteSubmessage(writer, i_correctedFlag, 15);
        }

    }

    /* merchantLookupCorrections */
    {
        if (self->_merchantLookupCorrections != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_merchantLookupCorrections, 16);
        }
    }
}

BOOL GEORPProblemCorrectionsIsDirty(__unsafe_unretained GEORPProblemCorrections *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_correctedFields
        || self->_flags.wrote_correctedLabel
        || (self->_flags.read_correctedLabel && GEORPCorrectedLabelIsDirty(self->_correctedLabel))
        || self->_flags.wrote_correctedCoordinate
        || (self->_flags.read_correctedCoordinate && GEORPCorrectedCoordinateIsDirty(self->_correctedCoordinate))
        || self->_flags.wrote_correctedSearch
        || (self->_flags.read_correctedSearch && GEORPCorrectedSearchIsDirty(self->_correctedSearch))
        || self->_flags.wrote_correctedMapLocation
        || (self->_flags.read_correctedMapLocation && GEORPMapLocationIsDirty(self->_correctedMapLocation))
        || self->_flags.wrote_comments
        || self->_flags.read_comments
        || self->_flags.wrote_placeProblem
        || self->_flags.read_placeProblem
        || self->_flags.wrote_directionsProblem
        || (self->_flags.read_directionsProblem && GEORPDirectionsProblemIsDirty(self->_directionsProblem))
        || self->_flags.wrote_photoWithMetadatas
        || self->_flags.wrote_delayed
        || self->_flags.wrote_correctedFlags
        || self->_flags.read_correctedFlags
        || self->_flags.wrote_merchantLookupCorrections
        || self->_flags.read_merchantLookupCorrections
    ;

    if (!dirty) {

            if (self->_flags.read_correctedFields) {
                for (GEORPCorrectedField *i in self->_correctedFields) {
                    if (GEORPCorrectedFieldIsDirty(i)) {
                        return YES;
                    }
                }
            }

            if (self->_flags.read_photoWithMetadatas) {
                for (GEORPPhotoWithMetadata *i in self->_photoWithMetadatas) {
                    if (GEORPPhotoWithMetadataIsDirty(i)) {
                        return YES;
                    }
                }
            }
    }

    return dirty;
}


- (void)copyTo:(GEORPProblemCorrections *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if ([self correctedFieldsCount])
    {
        [other clearCorrectedFields];
        NSUInteger correctedFieldsCnt = [self correctedFieldsCount];
        for (NSUInteger i = 0; i < correctedFieldsCnt; i++)
        {
            [other addCorrectedField:[self correctedFieldAtIndex:i]];
        }
    }
    if (_correctedLabel)
    {
        other.correctedLabel = _correctedLabel;
    }
    if (_correctedCoordinate)
    {
        other.correctedCoordinate = _correctedCoordinate;
    }
    if (_correctedSearch)
    {
        other.correctedSearch = _correctedSearch;
    }
    if (_correctedMapLocation)
    {
        other.correctedMapLocation = _correctedMapLocation;
    }
    if (_comments)
    {
        other.comments = _comments;
    }
    if (_placeProblem)
    {
        other.placeProblem = _placeProblem;
    }
    if (_directionsProblem)
    {
        other.directionsProblem = _directionsProblem;
    }
    if ([self photoWithMetadatasCount])
    {
        [other clearPhotoWithMetadatas];
        NSUInteger photoWithMetadatasCnt = [self photoWithMetadatasCount];
        for (NSUInteger i = 0; i < photoWithMetadatasCnt; i++)
        {
            [other addPhotoWithMetadata:[self photoWithMetadataAtIndex:i]];
        }
    }
    if (self->_flags.has_delayed)
    {
        other->_delayed = _delayed;
        other->_flags.has_delayed = YES;
    }
    if ([self correctedFlagsCount])
    {
        [other clearCorrectedFlags];
        NSUInteger correctedFlagsCnt = [self correctedFlagsCount];
        for (NSUInteger i = 0; i < correctedFlagsCnt; i++)
        {
            [other addCorrectedFlag:[self correctedFlagAtIndex:i]];
        }
    }
    if (_merchantLookupCorrections)
    {
        other.merchantLookupCorrections = _merchantLookupCorrections;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPProblemCorrections *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_correctedFields
                || _flags.wrote_correctedLabel
                || _flags.wrote_correctedCoordinate
                || _flags.wrote_correctedSearch
                || _flags.wrote_correctedMapLocation
                || _flags.wrote_comments
                || _flags.wrote_placeProblem
                || _flags.wrote_directionsProblem
                || _flags.wrote_photoWithMetadatas
                || _flags.wrote_delayed
                || _flags.wrote_correctedFlags
                || _flags.wrote_merchantLookupCorrections
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPProblemCorrectionsReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    for (GEORPCorrectedField * v in _correctedFields)
    {
        GEORPCorrectedField * vCopy = [v copyWithZone:zone];
        [copy addCorrectedField:vCopy];
    }
    copy->_correctedLabel = [_correctedLabel copyWithZone:zone];
    copy->_correctedCoordinate = [_correctedCoordinate copyWithZone:zone];
    copy->_correctedSearch = [_correctedSearch copyWithZone:zone];
    copy->_correctedMapLocation = [_correctedMapLocation copyWithZone:zone];
    copy->_comments = [_comments copyWithZone:zone];
    copy->_placeProblem = [_placeProblem copyWithZone:zone];
    copy->_directionsProblem = [_directionsProblem copyWithZone:zone];
    for (GEORPPhotoWithMetadata * v in _photoWithMetadatas)
    {
        GEORPPhotoWithMetadata * vCopy = [v copyWithZone:zone];
        [copy addPhotoWithMetadata:vCopy];
    }
    if (self->_flags.has_delayed)
    {
        copy->_delayed = _delayed;
        copy->_flags.has_delayed = YES;
    }
    for (GEORPCorrectedFlag * v in _correctedFlags)
    {
        GEORPCorrectedFlag * vCopy = [v copyWithZone:zone];
        [copy addCorrectedFlag:vCopy];
    }
    copy->_merchantLookupCorrections = [_merchantLookupCorrections copyWithZone:zone];
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPProblemCorrections *other = (GEORPProblemCorrections *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_correctedFields && !other->_correctedFields) || [self->_correctedFields isEqual:other->_correctedFields])

    &&
    ((!self->_correctedLabel && !other->_correctedLabel) || [self->_correctedLabel isEqual:other->_correctedLabel])
    &&
    ((!self->_correctedCoordinate && !other->_correctedCoordinate) || [self->_correctedCoordinate isEqual:other->_correctedCoordinate])
    &&
    ((!self->_correctedSearch && !other->_correctedSearch) || [self->_correctedSearch isEqual:other->_correctedSearch])
    &&
    ((!self->_correctedMapLocation && !other->_correctedMapLocation) || [self->_correctedMapLocation isEqual:other->_correctedMapLocation])
    &&
    ((!self->_comments && !other->_comments) || [self->_comments isEqual:other->_comments])
    &&
    ((!self->_placeProblem && !other->_placeProblem) || [self->_placeProblem isEqual:other->_placeProblem])
    &&
    ((!self->_directionsProblem && !other->_directionsProblem) || [self->_directionsProblem isEqual:other->_directionsProblem])
    &&
    ((!self->_photoWithMetadatas && !other->_photoWithMetadatas) || [self->_photoWithMetadatas isEqual:other->_photoWithMetadatas])

    &&
    ((self->_flags.has_delayed && other->_flags.has_delayed && ((self->_delayed && other->_delayed) || (!self->_delayed && !other->_delayed))) || (!self->_flags.has_delayed && !other->_flags.has_delayed))
    &&
    ((!self->_correctedFlags && !other->_correctedFlags) || [self->_correctedFlags isEqual:other->_correctedFlags])

    &&
    ((!self->_merchantLookupCorrections && !other->_merchantLookupCorrections) || [self->_merchantLookupCorrections isEqual:other->_merchantLookupCorrections])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_correctedFields hash]
    ^
    [self->_correctedLabel hash]
    ^
    [self->_correctedCoordinate hash]
    ^
    [self->_correctedSearch hash]
    ^
    [self->_correctedMapLocation hash]
    ^
    [self->_comments hash]
    ^
    [self->_placeProblem hash]
    ^
    [self->_directionsProblem hash]
    ^
    [self->_photoWithMetadatas hash]
    ^
    (self->_flags.has_delayed ? PBHashInt((NSUInteger)self->_delayed) : 0)
    ^
    [self->_correctedFlags hash]
    ^
    [self->_merchantLookupCorrections hash]
    ;
}

- (void)mergeFrom:(GEORPProblemCorrections *)other
{
    [other readAll:NO];
    for (GEORPCorrectedField * iter_correctedFields in other->_correctedFields)
    {
        [self addCorrectedField:iter_correctedFields];
    }
    if (self->_correctedLabel && other->_correctedLabel)
    {
        [self->_correctedLabel mergeFrom:other->_correctedLabel];
    }
    else if (!self->_correctedLabel && other->_correctedLabel)
    {
        [self setCorrectedLabel:other->_correctedLabel];
    }
    if (self->_correctedCoordinate && other->_correctedCoordinate)
    {
        [self->_correctedCoordinate mergeFrom:other->_correctedCoordinate];
    }
    else if (!self->_correctedCoordinate && other->_correctedCoordinate)
    {
        [self setCorrectedCoordinate:other->_correctedCoordinate];
    }
    if (self->_correctedSearch && other->_correctedSearch)
    {
        [self->_correctedSearch mergeFrom:other->_correctedSearch];
    }
    else if (!self->_correctedSearch && other->_correctedSearch)
    {
        [self setCorrectedSearch:other->_correctedSearch];
    }
    if (self->_correctedMapLocation && other->_correctedMapLocation)
    {
        [self->_correctedMapLocation mergeFrom:other->_correctedMapLocation];
    }
    else if (!self->_correctedMapLocation && other->_correctedMapLocation)
    {
        [self setCorrectedMapLocation:other->_correctedMapLocation];
    }
    if (other->_comments)
    {
        [self setComments:other->_comments];
    }
    if (self->_placeProblem && other->_placeProblem)
    {
        [self->_placeProblem mergeFrom:other->_placeProblem];
    }
    else if (!self->_placeProblem && other->_placeProblem)
    {
        [self setPlaceProblem:other->_placeProblem];
    }
    if (self->_directionsProblem && other->_directionsProblem)
    {
        [self->_directionsProblem mergeFrom:other->_directionsProblem];
    }
    else if (!self->_directionsProblem && other->_directionsProblem)
    {
        [self setDirectionsProblem:other->_directionsProblem];
    }
    for (GEORPPhotoWithMetadata * iter_photoWithMetadatas in other->_photoWithMetadatas)
    {
        [self addPhotoWithMetadata:iter_photoWithMetadatas];
    }
    if (other->_flags.has_delayed)
    {
        self->_delayed = other->_delayed;
        self->_flags.has_delayed = 1;
    }
    for (GEORPCorrectedFlag * iter_correctedFlags in other->_correctedFlags)
    {
        [self addCorrectedFlag:iter_correctedFlags];
    }
    if (self->_merchantLookupCorrections && other->_merchantLookupCorrections)
    {
        [self->_merchantLookupCorrections mergeFrom:other->_merchantLookupCorrections];
    }
    else if (!self->_merchantLookupCorrections && other->_merchantLookupCorrections)
    {
        [self setMerchantLookupCorrections:other->_merchantLookupCorrections];
    }
}


@end


