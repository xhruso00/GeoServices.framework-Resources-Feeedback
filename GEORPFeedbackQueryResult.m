// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPFeedbackQueryResult.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEORPFeedbackInfo.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPFeedbackQueryResult

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readFeedbackInfos {
    if (_flags.read_feedbackInfos) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_feedbackInfos) {
            static const uint32_t tags[] = {1, 0};
            GEORPFeedbackQueryResultReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<GEORPFeedbackInfo *> *)feedbackInfos
{
    [self _readFeedbackInfos];
    return _feedbackInfos;
}
- (void)setFeedbackInfos:(NSMutableArray<GEORPFeedbackInfo *> *)v
{
    _flags.read_feedbackInfos = 1;
    _flags.wrote_feedbackInfos = 1;
    _feedbackInfos = v;
}
- (void)clearFeedbackInfos
{
    _flags.read_feedbackInfos = 1;
    _flags.wrote_feedbackInfos = 1;
    [_feedbackInfos removeAllObjects];
}
- (void)addFeedbackInfo:(GEORPFeedbackInfo *)i
{
    [self _readFeedbackInfos];
    [self _addNoFlagsFeedbackInfo:i];
    _flags.read_feedbackInfos = 1;
    _flags.wrote_feedbackInfos = 1;
}
- (void)_addNoFlagsFeedbackInfo:(GEORPFeedbackInfo *)i
{
    if (!_feedbackInfos)
    {
        _feedbackInfos = [[NSMutableArray alloc] init];
    }
    [_feedbackInfos addObject:i];
}
- (NSUInteger)feedbackInfosCount
{
    [self _readFeedbackInfos];
    return [_feedbackInfos count];
}
- (GEORPFeedbackInfo *)feedbackInfoAtIndex:(NSUInteger)idx
{
    [self _readFeedbackInfos];
    return [_feedbackInfos objectAtIndex:idx];
}
+ (Class)feedbackInfoType
{
    return [GEORPFeedbackInfo class];
}

- (void)_readNextPageToken {
    if (_flags.read_nextPageToken) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_nextPageToken) {
            static const uint32_t tags[] = {2, 0};
            GEORPFeedbackQueryResultReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasNextPageToken
{
    [self _readNextPageToken];
    return _nextPageToken != nil;
}
- (NSData *)nextPageToken
{
    [self _readNextPageToken];
    return _nextPageToken;
}
- (void)setNextPageToken:(NSData *)v
{
    _flags.read_nextPageToken = 1;
    _flags.wrote_nextPageToken = 1;
    _nextPageToken = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if ([self->_feedbackInfos count])
    {
        NSMutableArray *feedbackInfosDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_feedbackInfos count]];
        for (GEORPFeedbackInfo * i_feedbackInfo in self->_feedbackInfos)
        {
            [feedbackInfosDictReprs addObject:[i_feedbackInfo dictionaryRepresentation]];
        }
        [dict setObject:feedbackInfosDictReprs forKey:@"feedback_info"];
    }

    {
        NSData * value = self.nextPageToken;
        if (value) {
            [dict setObject:value forKey:@"next_page_token"];
        }
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPFeedbackQueryResultReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPFeedbackQueryResultReadAllFrom(__unsafe_unretained GEORPFeedbackQueryResult *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPFeedbackQueryResultReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPFeedbackQueryResultReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPFeedbackQueryResultReadFrom(__unsafe_unretained GEORPFeedbackQueryResult *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPFeedbackQueryResultReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPFeedbackQueryResultReadSpecified(__unsafe_unretained GEORPFeedbackQueryResult *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_feedbackInfos
        + self->_flags.read_nextPageToken
        + self->_flags.read_unknownFields
        ;
    #define requiredLazyFieldCount 1 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL shouldParseUnknown = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                shouldParseUnknown = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            case TAG_UNKNOWN_FIELDS:
                shouldParseUnknown = YES;
                ++readLazyCount;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
        shouldParseUnknown = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !(readAll || shouldParseUnknown);
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* feedbackInfos */:
            {
                if (!shouldParseTag || self->_flags.read_feedbackInfos) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                GEORPFeedbackInfo *new_feedbackInfo = [[GEORPFeedbackInfo alloc] init];
                [self _addNoFlagsFeedbackInfo:new_feedbackInfo];
                PBDataReaderMark mark_feedbackInfo;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_feedbackInfo);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackInfoReadAllFrom(new_feedbackInfo, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_feedbackInfo);

            }
            break;
            case 2 /* nextPageToken */:
            {
                if (!shouldParseTag || self->_flags.read_nextPageToken) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_nextPageToken) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSData * new_nextPageToken = PBReaderReadData(reader);
                self->_nextPageToken = new_nextPageToken;

                --tagsRemaining;
            }
            break;
            default:
                if (!shouldParseUnknown || self->_flags.read_unknownFields) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }

    if (shouldParseUnknown) {
        self->_flags.read_unknownFields = YES;
    }

    if (readAll) {
        if (recursively) {
            for (GEORPFeedbackInfo * i in self->_feedbackInfos)
                [i readAll:YES];
        }
        self->_flags.read_feedbackInfos = YES;
        self->_flags.read_nextPageToken = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* feedbackInfos */:
                    self->_flags.read_feedbackInfos = YES;
                    break;
                case 2 /* nextPageToken */:
                    self->_flags.read_nextPageToken = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPFeedbackQueryResultIsValid(reader);
}

BOOL GEORPFeedbackQueryResultIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* feedbackInfos */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_feedbackInfo;
                    if (!PBReaderPlaceMark(reader, &mark_feedbackInfo))
                        returnValue(NO);
                    if (!GEORPFeedbackInfoIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_feedbackInfo);
                }
                break;
            case 2 /* nextPageToken */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPFeedbackQueryResultReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPFeedbackQueryResultIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* feedbackInfos */
    {
        for (GEORPFeedbackInfo * i_feedbackInfo in self->_feedbackInfos)
        {
            PBDataWriterWriteSubmessage(writer, i_feedbackInfo, 1);
        }

    }

    /* nextPageToken */
    {
        if (self->_nextPageToken)
        {
            PBDataWriterWriteDataField(writer, self->_nextPageToken, 2);
        }
    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}

BOOL GEORPFeedbackQueryResultIsDirty(__unsafe_unretained GEORPFeedbackQueryResult *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_feedbackInfos
        || self->_flags.wrote_nextPageToken
        || self->_flags.read_nextPageToken
        || self->_flags.wrote_unknownFields
    ;

    if (!dirty) {

            if (self->_flags.read_feedbackInfos) {
                for (GEORPFeedbackInfo *i in self->_feedbackInfos) {
                    if (GEORPFeedbackInfoIsDirty(i)) {
                        return YES;
                    }
                }
            }
    }

    return dirty;
}


- (void)copyTo:(GEORPFeedbackQueryResult *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if ([self feedbackInfosCount])
    {
        [other clearFeedbackInfos];
        NSUInteger feedbackInfosCnt = [self feedbackInfosCount];
        for (NSUInteger i = 0; i < feedbackInfosCnt; i++)
        {
            [other addFeedbackInfo:[self feedbackInfoAtIndex:i]];
        }
    }
    if (_nextPageToken)
    {
        other.nextPageToken = _nextPageToken;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPFeedbackQueryResult *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_feedbackInfos
                || _flags.wrote_nextPageToken
                || _flags.wrote_unknownFields
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPFeedbackQueryResultReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    for (GEORPFeedbackInfo * v in _feedbackInfos)
    {
        GEORPFeedbackInfo * vCopy = [v copyWithZone:zone];
        [copy addFeedbackInfo:vCopy];
    }
    copy->_nextPageToken = [_nextPageToken copyWithZone:zone];
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPFeedbackQueryResult *other = (GEORPFeedbackQueryResult *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_feedbackInfos && !other->_feedbackInfos) || [self->_feedbackInfos isEqual:other->_feedbackInfos])

    &&
    ((!self->_nextPageToken && !other->_nextPageToken) || [self->_nextPageToken isEqual:other->_nextPageToken])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_feedbackInfos hash]
    ^
    [self->_nextPageToken hash]
    ;
}

- (void)mergeFrom:(GEORPFeedbackQueryResult *)other
{
    [other readAll:NO];
    for (GEORPFeedbackInfo * iter_feedbackInfos in other->_feedbackInfos)
    {
        [self addFeedbackInfo:iter_feedbackInfos];
    }
    if (other->_nextPageToken)
    {
        [self setNextPageToken:other->_nextPageToken];
    }
}

- (PBUnknownFields *)unknownFields
{
    if (_flags.read_unknownFields) return _unknownFields;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return _unknownFields;
    @synchronized(reader) {
        if (!_flags.read_unknownFields) {
            static const uint32_t tags[] = {TAG_UNKNOWN_FIELDS, 0};
            GEORPFeedbackQueryResultReadSpecified(self, reader, tags);
        }
    }
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _flags.read_unknownFields = 1;
    _flags.wrote_unknownFields = 1;
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
    for (GEORPFeedbackInfo * v in self.feedbackInfos) {
        [v clearUnknownFields:YES];
    }
}

@end


