// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from community_feedback.proto

#import "GEORPFeedbackComponent.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#import <GeoServices/GEORPFeedbackComponentValue.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPFeedbackComponent


- (GEORPFeedbackComponentType)type
{
    return _flags.has_type ? _type : GEORPFeedbackComponentType_FEEDBACK_COMPONENT_TYPE_UNKNOWN;
}
- (void)setType:(GEORPFeedbackComponentType)v
{
    _flags.has_type = 1;
    _type = v;
}
- (void)setHasType:(BOOL)f
{
    _flags.has_type = f ? 1 : 0;
}
- (BOOL)hasType
{
    return (BOOL)_flags.has_type;
}
- (NSString *)typeAsString:(GEORPFeedbackComponentType)value
{
    return GEORPFeedbackComponentTypeAsString(value);
}
- (GEORPFeedbackComponentType)StringAsType:(NSString *)str
{
    return StringAsGEORPFeedbackComponentType(str);
}

- (GEOStatusCode)status
{
    return _flags.has_status ? _status : GEOStatusCode_STATUS_SUCCESS;
}
- (void)setStatus:(GEOStatusCode)v
{
    _flags.has_status = 1;
    _status = v;
}
- (void)setHasStatus:(BOOL)f
{
    _flags.has_status = f ? 1 : 0;
}
- (BOOL)hasStatus
{
    return (BOOL)_flags.has_status;
}
- (NSString *)statusAsString:(GEOStatusCode)value
{
    return GEOStatusCodeAsString(value);
}
- (GEOStatusCode)StringAsStatus:(NSString *)str
{
    return StringAsGEOStatusCode(str);
}

- (BOOL)hasValue
{
    return _value != nil;
}
- (GEORPFeedbackComponentValue *)value
{
    return _value;
}
- (void)setValue:(GEORPFeedbackComponentValue *)v
{
    _value = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_type)
    {
        [dict setObject:GEORPFeedbackComponentTypeAsString(self->_type) forKey:@"type"];
    }

    if (self->_flags.has_status)
    {
        [dict setObject:GEOStatusCodeAsString(self->_status) forKey:@"status"];
    }

    {
        GEORPFeedbackComponentValue * value = self.value;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"value"];
        }
    }


    if (_unknownFields)
        [dict setObject:[_unknownFields dictionaryRepresentation] forKey:@"Unknown Fields"];

    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively { /* noop */ }
BOOL GEORPFeedbackComponentReadAllFrom(__unsafe_unretained GEORPFeedbackComponent *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};

    @synchronized(reader) {
        BOOL result = GEORPFeedbackComponentReadSpecified(self, reader, recursively ? recursiveTag : nil);
        return result;
    }
}
BOOL GEORPFeedbackComponentReadFrom(__unsafe_unretained GEORPFeedbackComponent *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPFeedbackComponentReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPFeedbackComponentReadSpecified(__unsafe_unretained GEORPFeedbackComponent *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    #define shouldParseUnknown YES
    __attribute__((unused)) BOOL const recursively = (tags != nil && tags[0] == TAG_PARSE_ALL_RECURSIVE);
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
    #define shouldParseTag YES

        switch (tag) {

            case 1 /* type */:
            {
                self->_flags.has_type = YES;
                self->_type = PBReaderReadInt32(reader);

            }
            break;
            case 2 /* status */:
            {
                self->_flags.has_status = YES;
                self->_status = PBReaderReadInt32(reader);

            }
            break;
            case 3 /* value */:
            {
                GEORPFeedbackComponentValue *new_value = [[GEORPFeedbackComponentValue alloc] init];
                self->_value = new_value;
                PBDataReaderMark mark_value;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_value);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPFeedbackComponentValueReadAllFrom(new_value, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_value);

            }
            break;
            default:
                if (!self->_unknownFields)
                    self->_unknownFields = [[PBUnknownFields alloc] init];
                if (!PBUnknownFieldAdd(self->_unknownFields, tag, aType, reader))
                    return NO;
                break;
        }
    }



    #undef shouldParseTag
    #undef shouldParseUnknown
    #undef recursively
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPFeedbackComponentIsValid(reader);
}

BOOL GEORPFeedbackComponentIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* type */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 2 /* status */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt32(reader);
                break;
            case 3 /* value */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_value;
                    if (!PBReaderPlaceMark(reader, &mark_value))
                        returnValue(NO);
                    if (!GEORPFeedbackComponentValueIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_value);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPFeedbackComponentReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{

    /* type */
    {
        if (self->_flags.has_type)
        {
            PBDataWriterWriteInt32Field(writer, self->_type, 1);
        }
    }

    /* status */
    {
        if (self->_flags.has_status)
        {
            PBDataWriterWriteInt32Field(writer, self->_status, 2);
        }
    }

    /* value */
    {
        if (self->_value != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_value, 3);
        }
    }
    /* Unknown Fields */
    {
        [_unknownFields writeTo:writer];
    }
}



- (void)copyTo:(GEORPFeedbackComponent *)other
{
    [self readAll:NO];
    if (self->_flags.has_type)
    {
        other->_type = _type;
        other->_flags.has_type = YES;
    }
    if (self->_flags.has_status)
    {
        other->_status = _status;
        other->_flags.has_status = YES;
    }
    if (_value)
    {
        other.value = _value;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPFeedbackComponent *copy = [[[self class] allocWithZone:zone] init];
    if (self->_flags.has_type)
    {
        copy->_type = _type;
        copy->_flags.has_type = YES;
    }
    if (self->_flags.has_status)
    {
        copy->_status = _status;
        copy->_flags.has_status = YES;
    }
    copy->_value = [_value copyWithZone:zone];
    copy->_unknownFields = _unknownFields;
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPFeedbackComponent *other = (GEORPFeedbackComponent *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_type && other->_flags.has_type && self->_type == other->_type) || (!self->_flags.has_type && !other->_flags.has_type))
    &&
    ((self->_flags.has_status && other->_flags.has_status && self->_status == other->_status) || (!self->_flags.has_status && !other->_flags.has_status))
    &&
    ((!self->_value && !other->_value) || [self->_value isEqual:other->_value])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_type ? PBHashInt((NSUInteger)self->_type) : 0)
    ^
    (self->_flags.has_status ? PBHashInt((NSUInteger)self->_status) : 0)
    ^
    [self->_value hash]
    ;
}

- (void)mergeFrom:(GEORPFeedbackComponent *)other
{
    [other readAll:NO];
    if (other->_flags.has_type)
    {
        self->_type = other->_type;
        self->_flags.has_type = 1;
    }
    if (other->_flags.has_status)
    {
        self->_status = other->_status;
        self->_flags.has_status = 1;
    }
    if (self->_value && other->_value)
    {
        [self->_value mergeFrom:other->_value];
    }
    else if (!self->_value && other->_value)
    {
        [self setValue:other->_value];
    }
}

- (PBUnknownFields *)unknownFields
{
    return _unknownFields;
}
- (void)clearUnknownFields:(BOOL)recursively
{
    _unknownFields = nil;
    if (!recursively) {
        return;
    }
    [self readAll:NO];
    [_value clearUnknownFields:YES];
}

@end


