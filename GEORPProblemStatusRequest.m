// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPProblemStatusRequest.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEOABSecondPartyPlaceRequestClientMetaData.h>
#import <GeoServices/GEOPDAnalyticMetadata.h>
#import <GeoServices/GEORPClientCapabilities.h>
#import <GeoServices/GEORPUserCredentials.h>
#import <GeoServices/GEOServicesState.h>
#import <GeoServices/GEORPProblemStatusResponse.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPProblemStatusRequest

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readUserCredentials {
    if (_flags.read_userCredentials) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_userCredentials) {
            static const uint32_t tags[] = {1, 0};
            GEORPProblemStatusRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasUserCredentials
{
    [self _readUserCredentials];
    return _userCredentials != nil;
}
- (GEORPUserCredentials *)userCredentials
{
    [self _readUserCredentials];
    return _userCredentials;
}
- (void)setUserCredentials:(GEORPUserCredentials *)v
{
    _flags.read_userCredentials = 1;
    _flags.wrote_userCredentials = 1;
    _userCredentials = v;
}

- (void)_readStatusNotificationId {
    if (_flags.read_statusNotificationId) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_statusNotificationId) {
            static const uint32_t tags[] = {2, 0};
            GEORPProblemStatusRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasStatusNotificationId
{
    [self _readStatusNotificationId];
    return _statusNotificationId != nil;
}
- (NSString *)statusNotificationId
{
    [self _readStatusNotificationId];
    return _statusNotificationId;
}
- (void)setStatusNotificationId:(NSString *)v
{
    _flags.read_statusNotificationId = 1;
    _flags.wrote_statusNotificationId = 1;
    _statusNotificationId = v;
}

- (void)_readProblemIds {
    if (_flags.read_problemIds) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_problemIds) {
            static const uint32_t tags[] = {3, 0};
            GEORPProblemStatusRequestReadSpecified(self, reader, tags);
        }
    }
}
- (NSMutableArray<NSString *> *)problemIds
{
    [self _readProblemIds];
    return _problemIds;
}
- (void)setProblemIds:(NSMutableArray<NSString *> *)v
{
    _flags.read_problemIds = 1;
    _flags.wrote_problemIds = 1;
    _problemIds = v;
}
- (void)clearProblemIds
{
    _flags.read_problemIds = 1;
    _flags.wrote_problemIds = 1;
    [_problemIds removeAllObjects];
}
- (void)addProblemId:(NSString *)i
{
    [self _readProblemIds];
    [self _addNoFlagsProblemId:i];
    _flags.read_problemIds = 1;
    _flags.wrote_problemIds = 1;
}
- (void)_addNoFlagsProblemId:(NSString *)i
{
    if (!_problemIds)
    {
        _problemIds = [[NSMutableArray alloc] init];
    }
    [_problemIds addObject:i];
}
- (NSUInteger)problemIdsCount
{
    [self _readProblemIds];
    return [_problemIds count];
}
- (NSString *)problemIdAtIndex:(NSUInteger)idx
{
    [self _readProblemIds];
    return [_problemIds objectAtIndex:idx];
}
+ (Class)problemIdType
{
    return [NSString class];
}

- (void)_readClientCapabilities {
    if (_flags.read_clientCapabilities) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_clientCapabilities) {
            static const uint32_t tags[] = {4, 0};
            GEORPProblemStatusRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasClientCapabilities
{
    [self _readClientCapabilities];
    return _clientCapabilities != nil;
}
- (GEORPClientCapabilities *)clientCapabilities
{
    [self _readClientCapabilities];
    return _clientCapabilities;
}
- (void)setClientCapabilities:(GEORPClientCapabilities *)v
{
    _flags.read_clientCapabilities = 1;
    _flags.wrote_clientCapabilities = 1;
    _clientCapabilities = v;
}

- (void)_readAnalyticMetadata {
    if (_flags.read_analyticMetadata) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_analyticMetadata) {
            static const uint32_t tags[] = {5, 0};
            GEORPProblemStatusRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasAnalyticMetadata
{
    [self _readAnalyticMetadata];
    return _analyticMetadata != nil;
}
- (GEOPDAnalyticMetadata *)analyticMetadata
{
    [self _readAnalyticMetadata];
    return _analyticMetadata;
}
- (void)setAnalyticMetadata:(GEOPDAnalyticMetadata *)v
{
    _flags.read_analyticMetadata = 1;
    _flags.wrote_analyticMetadata = 1;
    _analyticMetadata = v;
}

- (void)_readAbAssignmentMetadata {
    if (_flags.read_abAssignmentMetadata) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_abAssignmentMetadata) {
            static const uint32_t tags[] = {6, 0};
            GEORPProblemStatusRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasAbAssignmentMetadata
{
    [self _readAbAssignmentMetadata];
    return _abAssignmentMetadata != nil;
}
- (GEOABSecondPartyPlaceRequestClientMetaData *)abAssignmentMetadata
{
    [self _readAbAssignmentMetadata];
    return _abAssignmentMetadata;
}
- (void)setAbAssignmentMetadata:(GEOABSecondPartyPlaceRequestClientMetaData *)v
{
    _flags.read_abAssignmentMetadata = 1;
    _flags.wrote_abAssignmentMetadata = 1;
    _abAssignmentMetadata = v;
}

- (void)_readServicesState {
    if (_flags.read_servicesState) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_servicesState) {
            static const uint32_t tags[] = {7, 0};
            GEORPProblemStatusRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasServicesState
{
    [self _readServicesState];
    return _servicesState != nil;
}
- (GEOServicesState *)servicesState
{
    [self _readServicesState];
    return _servicesState;
}
- (void)setServicesState:(GEOServicesState *)v
{
    _flags.read_servicesState = 1;
    _flags.wrote_servicesState = 1;
    _servicesState = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        GEORPUserCredentials * value = self.userCredentials;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"user_credentials"];
        }
    }

    {
        NSString * value = self.statusNotificationId;
        if (value) {
            [dict setObject:value forKey:@"status_notification_id"];
        }
    }

    if (self->_problemIds) {
        [dict setObject:self.problemIds forKey:@"problem_id"];
    }

    {
        GEORPClientCapabilities * value = self.clientCapabilities;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"client_capabilities"];
        }
    }

    {
        GEOPDAnalyticMetadata * value = self.analyticMetadata;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"analytic_metadata"];
        }
    }

    {
        GEOABSecondPartyPlaceRequestClientMetaData * value = self.abAssignmentMetadata;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"ab_assignment_metadata"];
        }
    }

    {
        GEOServicesState * value = self.servicesState;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"services_state"];
        }
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPProblemStatusRequestReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPProblemStatusRequestReadAllFrom(__unsafe_unretained GEORPProblemStatusRequest *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPProblemStatusRequestReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPProblemStatusRequestReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPProblemStatusRequestReadFrom(__unsafe_unretained GEORPProblemStatusRequest *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPProblemStatusRequestReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPProblemStatusRequestReadSpecified(__unsafe_unretained GEORPProblemStatusRequest *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_userCredentials
        + self->_flags.read_statusNotificationId
        + self->_flags.read_problemIds
        + self->_flags.read_clientCapabilities
        + self->_flags.read_analyticMetadata
        + self->_flags.read_abAssignmentMetadata
        + self->_flags.read_servicesState
        ;
    #define requiredLazyFieldCount 5 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* userCredentials */:
            {
                if (!shouldParseTag || self->_flags.read_userCredentials) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_userCredentials) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPUserCredentials *new_userCredentials = [[GEORPUserCredentials alloc] init];
                self->_userCredentials = new_userCredentials;
                PBDataReaderMark mark_userCredentials;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_userCredentials);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPUserCredentialsReadAllFrom(new_userCredentials, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_userCredentials);

                --tagsRemaining;
            }
            break;
            case 2 /* statusNotificationId */:
            {
                if (!shouldParseTag || self->_flags.read_statusNotificationId) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_statusNotificationId) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_statusNotificationId = PBReaderReadString(reader);
                self->_statusNotificationId = new_statusNotificationId;

                --tagsRemaining;
            }
            break;
            case 3 /* problemIds */:
            {
                if (!shouldParseTag || self->_flags.read_problemIds) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
            NSString *new_problemIds = PBReaderReadString(reader);
                if (new_problemIds)
                {
                    [self _addNoFlagsProblemId:new_problemIds];
                }

            }
            break;
            case 4 /* clientCapabilities */:
            {
                if (!shouldParseTag || self->_flags.read_clientCapabilities) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_clientCapabilities) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPClientCapabilities *new_clientCapabilities = [[GEORPClientCapabilities alloc] init];
                self->_clientCapabilities = new_clientCapabilities;
                PBDataReaderMark mark_clientCapabilities;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_clientCapabilities);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPClientCapabilitiesReadAllFrom(new_clientCapabilities, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_clientCapabilities);

                --tagsRemaining;
            }
            break;
            case 5 /* analyticMetadata */:
            {
                if (!shouldParseTag || self->_flags.read_analyticMetadata) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_analyticMetadata) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOPDAnalyticMetadata *new_analyticMetadata = [[GEOPDAnalyticMetadata alloc] init];
                self->_analyticMetadata = new_analyticMetadata;
                PBDataReaderMark mark_analyticMetadata;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_analyticMetadata);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPDAnalyticMetadataReadAllFrom(new_analyticMetadata, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_analyticMetadata);

                --tagsRemaining;
            }
            break;
            case 6 /* abAssignmentMetadata */:
            {
                if (!shouldParseTag || self->_flags.read_abAssignmentMetadata) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_abAssignmentMetadata) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOABSecondPartyPlaceRequestClientMetaData *new_abAssignmentMetadata = [[GEOABSecondPartyPlaceRequestClientMetaData alloc] init];
                self->_abAssignmentMetadata = new_abAssignmentMetadata;
                PBDataReaderMark mark_abAssignmentMetadata;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_abAssignmentMetadata);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom(new_abAssignmentMetadata, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_abAssignmentMetadata);

                --tagsRemaining;
            }
            break;
            case 7 /* servicesState */:
            {
                if (!shouldParseTag || self->_flags.read_servicesState) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_servicesState) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOServicesState *new_servicesState = [[GEOServicesState alloc] init];
                self->_servicesState = new_servicesState;
                PBDataReaderMark mark_servicesState;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_servicesState);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOServicesStateReadAllFrom(new_servicesState, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_servicesState);

                --tagsRemaining;
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
            [self->_userCredentials readAll:YES];
            [self->_clientCapabilities readAll:YES];
            [self->_analyticMetadata readAll:YES];
            [self->_abAssignmentMetadata readAll:YES];
            [self->_servicesState readAll:YES];
        }
        self->_flags.read_userCredentials = YES;
        self->_flags.read_statusNotificationId = YES;
        self->_flags.read_problemIds = YES;
        self->_flags.read_clientCapabilities = YES;
        self->_flags.read_analyticMetadata = YES;
        self->_flags.read_abAssignmentMetadata = YES;
        self->_flags.read_servicesState = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* userCredentials */:
                    self->_flags.read_userCredentials = YES;
                    break;
                case 2 /* statusNotificationId */:
                    self->_flags.read_statusNotificationId = YES;
                    break;
                case 3 /* problemIds */:
                    self->_flags.read_problemIds = YES;
                    break;
                case 4 /* clientCapabilities */:
                    self->_flags.read_clientCapabilities = YES;
                    break;
                case 5 /* analyticMetadata */:
                    self->_flags.read_analyticMetadata = YES;
                    break;
                case 6 /* abAssignmentMetadata */:
                    self->_flags.read_abAssignmentMetadata = YES;
                    break;
                case 7 /* servicesState */:
                    self->_flags.read_servicesState = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPProblemStatusRequestIsValid(reader);
}

BOOL GEORPProblemStatusRequestIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* userCredentials */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_userCredentials;
                    if (!PBReaderPlaceMark(reader, &mark_userCredentials))
                        returnValue(NO);
                    if (!GEORPUserCredentialsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_userCredentials);
                }
                break;
            case 2 /* statusNotificationId */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 3 /* problemIds */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 4 /* clientCapabilities */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_clientCapabilities;
                    if (!PBReaderPlaceMark(reader, &mark_clientCapabilities))
                        returnValue(NO);
                    if (!GEORPClientCapabilitiesIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_clientCapabilities);
                }
                break;
            case 5 /* analyticMetadata */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_analyticMetadata;
                    if (!PBReaderPlaceMark(reader, &mark_analyticMetadata))
                        returnValue(NO);
                    if (!GEOPDAnalyticMetadataIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_analyticMetadata);
                }
                break;
            case 6 /* abAssignmentMetadata */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_abAssignmentMetadata;
                    if (!PBReaderPlaceMark(reader, &mark_abAssignmentMetadata))
                        returnValue(NO);
                    if (!GEOABSecondPartyPlaceRequestClientMetaDataIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_abAssignmentMetadata);
                }
                break;
            case 7 /* servicesState */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_servicesState;
                    if (!PBReaderPlaceMark(reader, &mark_servicesState))
                        returnValue(NO);
                    if (!GEOServicesStateIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_servicesState);
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPProblemStatusRequestReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPProblemStatusRequestIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* userCredentials */
    {
        if (self->_userCredentials != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_userCredentials, 1);
        }
    }

    /* statusNotificationId */
    {
        if (self->_statusNotificationId)
        {
            PBDataWriterWriteStringField(writer, self->_statusNotificationId, 2);
        }
    }

    /* problemIds */
    {
        for (NSString * s_problemIds in self->_problemIds)
        {
            PBDataWriterWriteStringField(writer, s_problemIds, 3);
        }

    }

    /* clientCapabilities */
    {
        if (self->_clientCapabilities != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_clientCapabilities, 4);
        }
    }

    /* analyticMetadata */
    {
        if (self->_analyticMetadata != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_analyticMetadata, 5);
        }
    }

    /* abAssignmentMetadata */
    {
        if (self->_abAssignmentMetadata != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_abAssignmentMetadata, 6);
        }
    }

    /* servicesState */
    {
        if (self->_servicesState != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_servicesState, 7);
        }
    }
}

BOOL GEORPProblemStatusRequestIsDirty(__unsafe_unretained GEORPProblemStatusRequest *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_userCredentials
        || (self->_flags.read_userCredentials && GEORPUserCredentialsIsDirty(self->_userCredentials))
        || self->_flags.wrote_statusNotificationId
        || self->_flags.read_statusNotificationId
        || self->_flags.wrote_problemIds
        || self->_flags.read_problemIds
        || self->_flags.wrote_clientCapabilities
        || self->_flags.read_clientCapabilities
        || self->_flags.wrote_analyticMetadata
        || (self->_flags.read_analyticMetadata && GEOPDAnalyticMetadataIsDirty(self->_analyticMetadata))
        || self->_flags.wrote_abAssignmentMetadata
        || (self->_flags.read_abAssignmentMetadata && GEOABSecondPartyPlaceRequestClientMetaDataIsDirty(self->_abAssignmentMetadata))
        || self->_flags.wrote_servicesState
        || self->_flags.read_servicesState
    ;


    return dirty;
}


- (uint32_t)requestTypeCode
{
    return 1010;
}

- (Class)responseClass
{
    return [GEORPProblemStatusResponse class];
}

- (void)copyTo:(GEORPProblemStatusRequest *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_userCredentials)
    {
        other.userCredentials = _userCredentials;
    }
    if (_statusNotificationId)
    {
        other.statusNotificationId = _statusNotificationId;
    }
    if ([self problemIdsCount])
    {
        [other clearProblemIds];
        NSUInteger problemIdsCnt = [self problemIdsCount];
        for (NSUInteger i = 0; i < problemIdsCnt; i++)
        {
            [other addProblemId:[self problemIdAtIndex:i]];
        }
    }
    if (_clientCapabilities)
    {
        other.clientCapabilities = _clientCapabilities;
    }
    if (_analyticMetadata)
    {
        other.analyticMetadata = _analyticMetadata;
    }
    if (_abAssignmentMetadata)
    {
        other.abAssignmentMetadata = _abAssignmentMetadata;
    }
    if (_servicesState)
    {
        other.servicesState = _servicesState;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPProblemStatusRequest *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_userCredentials
                || _flags.wrote_statusNotificationId
                || _flags.wrote_problemIds
                || _flags.wrote_clientCapabilities
                || _flags.wrote_analyticMetadata
                || _flags.wrote_abAssignmentMetadata
                || _flags.wrote_servicesState
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPProblemStatusRequestReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_userCredentials = [_userCredentials copyWithZone:zone];
    copy->_statusNotificationId = [_statusNotificationId copyWithZone:zone];
    for (NSString * v in _problemIds)
    {
        NSString * vCopy = [v copyWithZone:zone];
        [copy addProblemId:vCopy];
    }
    copy->_clientCapabilities = [_clientCapabilities copyWithZone:zone];
    copy->_analyticMetadata = [_analyticMetadata copyWithZone:zone];
    copy->_abAssignmentMetadata = [_abAssignmentMetadata copyWithZone:zone];
    copy->_servicesState = [_servicesState copyWithZone:zone];
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPProblemStatusRequest *other = (GEORPProblemStatusRequest *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_userCredentials && !other->_userCredentials) || [self->_userCredentials isEqual:other->_userCredentials])
    &&
    ((!self->_statusNotificationId && !other->_statusNotificationId) || [self->_statusNotificationId isEqual:other->_statusNotificationId])
    &&
    ((!self->_problemIds && !other->_problemIds) || [self->_problemIds isEqual:other->_problemIds])

    &&
    ((!self->_clientCapabilities && !other->_clientCapabilities) || [self->_clientCapabilities isEqual:other->_clientCapabilities])
    &&
    ((!self->_analyticMetadata && !other->_analyticMetadata) || [self->_analyticMetadata isEqual:other->_analyticMetadata])
    &&
    ((!self->_abAssignmentMetadata && !other->_abAssignmentMetadata) || [self->_abAssignmentMetadata isEqual:other->_abAssignmentMetadata])
    &&
    ((!self->_servicesState && !other->_servicesState) || [self->_servicesState isEqual:other->_servicesState])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_userCredentials hash]
    ^
    [self->_statusNotificationId hash]
    ^
    [self->_problemIds hash]
    ^
    [self->_clientCapabilities hash]
    ^
    [self->_analyticMetadata hash]
    ^
    [self->_abAssignmentMetadata hash]
    ^
    [self->_servicesState hash]
    ;
}

- (void)mergeFrom:(GEORPProblemStatusRequest *)other
{
    [other readAll:NO];
    if (self->_userCredentials && other->_userCredentials)
    {
        [self->_userCredentials mergeFrom:other->_userCredentials];
    }
    else if (!self->_userCredentials && other->_userCredentials)
    {
        [self setUserCredentials:other->_userCredentials];
    }
    if (other->_statusNotificationId)
    {
        [self setStatusNotificationId:other->_statusNotificationId];
    }
    for (NSString * iter_problemIds in other->_problemIds)
    {
        [self addProblemId:iter_problemIds];
    }
    if (self->_clientCapabilities && other->_clientCapabilities)
    {
        [self->_clientCapabilities mergeFrom:other->_clientCapabilities];
    }
    else if (!self->_clientCapabilities && other->_clientCapabilities)
    {
        [self setClientCapabilities:other->_clientCapabilities];
    }
    if (self->_analyticMetadata && other->_analyticMetadata)
    {
        [self->_analyticMetadata mergeFrom:other->_analyticMetadata];
    }
    else if (!self->_analyticMetadata && other->_analyticMetadata)
    {
        [self setAnalyticMetadata:other->_analyticMetadata];
    }
    if (self->_abAssignmentMetadata && other->_abAssignmentMetadata)
    {
        [self->_abAssignmentMetadata mergeFrom:other->_abAssignmentMetadata];
    }
    else if (!self->_abAssignmentMetadata && other->_abAssignmentMetadata)
    {
        [self setAbAssignmentMetadata:other->_abAssignmentMetadata];
    }
    if (self->_servicesState && other->_servicesState)
    {
        [self->_servicesState mergeFrom:other->_servicesState];
    }
    else if (!self->_servicesState && other->_servicesState)
    {
        [self setServicesState:other->_servicesState];
    }
}


@end


