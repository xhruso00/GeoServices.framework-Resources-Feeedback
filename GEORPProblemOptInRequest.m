// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPProblemOptInRequest.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEORPUserCredentials.h>
#import <GeoServices/GEORPProblemOptInResponse.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPProblemOptInRequest

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readProblemId {
    if (_flags.read_problemId) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_problemId) {
            static const uint32_t tags[] = {1, 0};
            GEORPProblemOptInRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasProblemId
{
    [self _readProblemId];
    return _problemId != nil;
}
- (NSString *)problemId
{
    [self _readProblemId];
    return _problemId;
}
- (void)setProblemId:(NSString *)v
{
    _flags.read_problemId = 1;
    _flags.wrote_problemId = 1;
    _problemId = v;
}

- (BOOL)didOptIn
{
    return _didOptIn;
}
- (void)setDidOptIn:(BOOL)v
{
    _flags.wrote_didOptIn = 1;
    _flags.has_didOptIn = 1;
    _didOptIn = v;
}
- (void)setHasDidOptIn:(BOOL)f
{
    _flags.wrote_didOptIn = 1;
    _flags.has_didOptIn = f ? 1 : 0;
}
- (BOOL)hasDidOptIn
{
    return (BOOL)_flags.has_didOptIn;
}

- (void)_readUserCredentials {
    if (_flags.read_userCredentials) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_userCredentials) {
            static const uint32_t tags[] = {3, 0};
            GEORPProblemOptInRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasUserCredentials
{
    [self _readUserCredentials];
    return _userCredentials != nil;
}
- (GEORPUserCredentials *)userCredentials
{
    [self _readUserCredentials];
    return _userCredentials;
}
- (void)setUserCredentials:(GEORPUserCredentials *)v
{
    _flags.read_userCredentials = 1;
    _flags.wrote_userCredentials = 1;
    _userCredentials = v;
}

- (void)_readDevicePushToken {
    if (_flags.read_devicePushToken) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_devicePushToken) {
            static const uint32_t tags[] = {4, 0};
            GEORPProblemOptInRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasDevicePushToken
{
    [self _readDevicePushToken];
    return _devicePushToken != nil;
}
- (NSData *)devicePushToken
{
    [self _readDevicePushToken];
    return _devicePushToken;
}
- (void)setDevicePushToken:(NSData *)v
{
    _flags.read_devicePushToken = 1;
    _flags.wrote_devicePushToken = 1;
    _devicePushToken = v;
}

- (void)_readUserEmail {
    if (_flags.read_userEmail) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_userEmail) {
            static const uint32_t tags[] = {5, 0};
            GEORPProblemOptInRequestReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasUserEmail
{
    [self _readUserEmail];
    return _userEmail != nil;
}
- (NSString *)userEmail
{
    [self _readUserEmail];
    return _userEmail;
}
- (void)setUserEmail:(NSString *)v
{
    _flags.read_userEmail = 1;
    _flags.wrote_userEmail = 1;
    _userEmail = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        NSString * value = self.problemId;
        if (value) {
            [dict setObject:value forKey:@"problem_id"];
        }
    }

    if (self->_flags.has_didOptIn)
    {
        [dict setObject:@(self->_didOptIn) forKey:@"did_opt_in"];
    }

    {
        GEORPUserCredentials * value = self.userCredentials;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"user_credentials"];
        }
    }

    {
        NSData * value = self.devicePushToken;
        if (value) {
            [dict setObject:value forKey:@"device_push_token"];
        }
    }

    {
        NSString * value = self.userEmail;
        if (value) {
            [dict setObject:value forKey:@"user_email"];
        }
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPProblemOptInRequestReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPProblemOptInRequestReadAllFrom(__unsafe_unretained GEORPProblemOptInRequest *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPProblemOptInRequestReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPProblemOptInRequestReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPProblemOptInRequestReadFrom(__unsafe_unretained GEORPProblemOptInRequest *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPProblemOptInRequestReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPProblemOptInRequestReadSpecified(__unsafe_unretained GEORPProblemOptInRequest *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_problemId
        + self->_flags.read_userCredentials
        + self->_flags.read_devicePushToken
        + self->_flags.read_userEmail
        ;
    #define requiredLazyFieldCount 3 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* problemId */:
            {
                if (!shouldParseTag || self->_flags.read_problemId) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_problemId) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_problemId = PBReaderReadString(reader);
                self->_problemId = new_problemId;

                --tagsRemaining;
            }
            break;
            case 2 /* didOptIn */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_didOptIn = YES;
                self->_didOptIn = PBReaderReadBOOL(reader);

            }
            break;
            case 3 /* userCredentials */:
            {
                if (!shouldParseTag || self->_flags.read_userCredentials) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_userCredentials) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPUserCredentials *new_userCredentials = [[GEORPUserCredentials alloc] init];
                self->_userCredentials = new_userCredentials;
                PBDataReaderMark mark_userCredentials;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_userCredentials);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPUserCredentialsReadAllFrom(new_userCredentials, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_userCredentials);

                --tagsRemaining;
            }
            break;
            case 4 /* devicePushToken */:
            {
                if (!shouldParseTag || self->_flags.read_devicePushToken) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_devicePushToken) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSData * new_devicePushToken = PBReaderReadData(reader);
                self->_devicePushToken = new_devicePushToken;

                --tagsRemaining;
            }
            break;
            case 5 /* userEmail */:
            {
                if (!shouldParseTag || self->_flags.read_userEmail) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_userEmail) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_userEmail = PBReaderReadString(reader);
                self->_userEmail = new_userEmail;

                --tagsRemaining;
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
            [self->_userCredentials readAll:YES];
        }
        self->_flags.read_problemId = YES;
        self->_flags.read_userCredentials = YES;
        self->_flags.read_devicePushToken = YES;
        self->_flags.read_userEmail = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* problemId */:
                    self->_flags.read_problemId = YES;
                    break;
                case 3 /* userCredentials */:
                    self->_flags.read_userCredentials = YES;
                    break;
                case 4 /* devicePushToken */:
                    self->_flags.read_devicePushToken = YES;
                    break;
                case 5 /* userEmail */:
                    self->_flags.read_userEmail = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPProblemOptInRequestIsValid(reader);
}

BOOL GEORPProblemOptInRequestIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* problemId */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 2 /* didOptIn */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadBOOL(reader);
                break;
            case 3 /* userCredentials */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_userCredentials;
                    if (!PBReaderPlaceMark(reader, &mark_userCredentials))
                        returnValue(NO);
                    if (!GEORPUserCredentialsIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_userCredentials);
                }
                break;
            case 4 /* devicePushToken */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 5 /* userEmail */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPProblemOptInRequestReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPProblemOptInRequestIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* problemId */
    {
        if (self->_problemId)
        {
            PBDataWriterWriteStringField(writer, self->_problemId, 1);
        }
    }

    /* didOptIn */
    {
        if (self->_flags.has_didOptIn)
        {
            PBDataWriterWriteBOOLField(writer, self->_didOptIn, 2);
        }
    }

    /* userCredentials */
    {
        if (self->_userCredentials != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_userCredentials, 3);
        }
    }

    /* devicePushToken */
    {
        if (self->_devicePushToken)
        {
            PBDataWriterWriteDataField(writer, self->_devicePushToken, 4);
        }
    }

    /* userEmail */
    {
        if (self->_userEmail)
        {
            PBDataWriterWriteStringField(writer, self->_userEmail, 5);
        }
    }
}

BOOL GEORPProblemOptInRequestIsDirty(__unsafe_unretained GEORPProblemOptInRequest *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_problemId
        || self->_flags.read_problemId
        || self->_flags.wrote_didOptIn
        || self->_flags.wrote_userCredentials
        || (self->_flags.read_userCredentials && GEORPUserCredentialsIsDirty(self->_userCredentials))
        || self->_flags.wrote_devicePushToken
        || self->_flags.read_devicePushToken
        || self->_flags.wrote_userEmail
        || self->_flags.read_userEmail
    ;


    return dirty;
}


- (uint32_t)requestTypeCode
{
    return 1013;
}

- (Class)responseClass
{
    return [GEORPProblemOptInResponse class];
}

- (void)copyTo:(GEORPProblemOptInRequest *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_problemId)
    {
        other.problemId = _problemId;
    }
    if (self->_flags.has_didOptIn)
    {
        other->_didOptIn = _didOptIn;
        other->_flags.has_didOptIn = YES;
    }
    if (_userCredentials)
    {
        other.userCredentials = _userCredentials;
    }
    if (_devicePushToken)
    {
        other.devicePushToken = _devicePushToken;
    }
    if (_userEmail)
    {
        other.userEmail = _userEmail;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPProblemOptInRequest *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_problemId
                || _flags.wrote_didOptIn
                || _flags.wrote_userCredentials
                || _flags.wrote_devicePushToken
                || _flags.wrote_userEmail
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPProblemOptInRequestReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_problemId = [_problemId copyWithZone:zone];
    if (self->_flags.has_didOptIn)
    {
        copy->_didOptIn = _didOptIn;
        copy->_flags.has_didOptIn = YES;
    }
    copy->_userCredentials = [_userCredentials copyWithZone:zone];
    copy->_devicePushToken = [_devicePushToken copyWithZone:zone];
    copy->_userEmail = [_userEmail copyWithZone:zone];
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPProblemOptInRequest *other = (GEORPProblemOptInRequest *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_problemId && !other->_problemId) || [self->_problemId isEqual:other->_problemId])
    &&
    ((self->_flags.has_didOptIn && other->_flags.has_didOptIn && ((self->_didOptIn && other->_didOptIn) || (!self->_didOptIn && !other->_didOptIn))) || (!self->_flags.has_didOptIn && !other->_flags.has_didOptIn))
    &&
    ((!self->_userCredentials && !other->_userCredentials) || [self->_userCredentials isEqual:other->_userCredentials])
    &&
    ((!self->_devicePushToken && !other->_devicePushToken) || [self->_devicePushToken isEqual:other->_devicePushToken])
    &&
    ((!self->_userEmail && !other->_userEmail) || [self->_userEmail isEqual:other->_userEmail])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_problemId hash]
    ^
    (self->_flags.has_didOptIn ? PBHashInt((NSUInteger)self->_didOptIn) : 0)
    ^
    [self->_userCredentials hash]
    ^
    [self->_devicePushToken hash]
    ^
    [self->_userEmail hash]
    ;
}

- (void)mergeFrom:(GEORPProblemOptInRequest *)other
{
    [other readAll:NO];
    if (other->_problemId)
    {
        [self setProblemId:other->_problemId];
    }
    if (other->_flags.has_didOptIn)
    {
        self->_didOptIn = other->_didOptIn;
        self->_flags.has_didOptIn = 1;
    }
    if (self->_userCredentials && other->_userCredentials)
    {
        [self->_userCredentials mergeFrom:other->_userCredentials];
    }
    else if (!self->_userCredentials && other->_userCredentials)
    {
        [self setUserCredentials:other->_userCredentials];
    }
    if (other->_devicePushToken)
    {
        [self setDevicePushToken:other->_devicePushToken];
    }
    if (other->_userEmail)
    {
        [self setUserEmail:other->_userEmail];
    }
}


@end


