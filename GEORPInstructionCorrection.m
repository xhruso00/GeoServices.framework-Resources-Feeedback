// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPInstructionCorrection.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEORPPhotoWithMetadata.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPInstructionCorrection

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (uint32_t)routeStepIndex
{
    return _routeStepIndex;
}
- (void)setRouteStepIndex:(uint32_t)v
{
    _flags.wrote_routeStepIndex = 1;
    _flags.has_routeStepIndex = 1;
    _routeStepIndex = v;
}
- (void)setHasRouteStepIndex:(BOOL)f
{
    _flags.wrote_routeStepIndex = 1;
    _flags.has_routeStepIndex = f ? 1 : 0;
}
- (BOOL)hasRouteStepIndex
{
    return (BOOL)_flags.has_routeStepIndex;
}

- (void)_readComments {
    if (_flags.read_comments) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_comments) {
            static const uint32_t tags[] = {2, 0};
            GEORPInstructionCorrectionReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasComments
{
    [self _readComments];
    return _comments != nil;
}
- (NSString *)comments
{
    [self _readComments];
    return _comments;
}
- (void)setComments:(NSString *)v
{
    _flags.read_comments = 1;
    _flags.wrote_comments = 1;
    _comments = v;
}

- (void)_readPhoto {
    if (_flags.read_photo) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_photo) {
            static const uint32_t tags[] = {3, 0};
            GEORPInstructionCorrectionReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasPhoto
{
    [self _readPhoto];
    return _photo != nil;
}
- (GEORPPhotoWithMetadata *)photo
{
    [self _readPhoto];
    return _photo;
}
- (void)setPhoto:(GEORPPhotoWithMetadata *)v
{
    _flags.read_photo = 1;
    _flags.wrote_photo = 1;
    _photo = v;
}

- (uint32_t)routeStepSubstepIndex
{
    return _routeStepSubstepIndex;
}
- (void)setRouteStepSubstepIndex:(uint32_t)v
{
    _flags.wrote_routeStepSubstepIndex = 1;
    _flags.has_routeStepSubstepIndex = 1;
    _routeStepSubstepIndex = v;
}
- (void)setHasRouteStepSubstepIndex:(BOOL)f
{
    _flags.wrote_routeStepSubstepIndex = 1;
    _flags.has_routeStepSubstepIndex = f ? 1 : 0;
}
- (BOOL)hasRouteStepSubstepIndex
{
    return (BOOL)_flags.has_routeStepSubstepIndex;
}

- (void)_readRouteStepScreenshotImageData {
    if (_flags.read_routeStepScreenshotImageData) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_routeStepScreenshotImageData) {
            static const uint32_t tags[] = {5, 0};
            GEORPInstructionCorrectionReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasRouteStepScreenshotImageData
{
    [self _readRouteStepScreenshotImageData];
    return _routeStepScreenshotImageData != nil;
}
- (NSData *)routeStepScreenshotImageData
{
    [self _readRouteStepScreenshotImageData];
    return _routeStepScreenshotImageData;
}
- (void)setRouteStepScreenshotImageData:(NSData *)v
{
    _flags.read_routeStepScreenshotImageData = 1;
    _flags.wrote_routeStepScreenshotImageData = 1;
    _routeStepScreenshotImageData = v;
}

- (void)_readPhotoId {
    if (_flags.read_photoId) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_photoId) {
            static const uint32_t tags[] = {6, 0};
            GEORPInstructionCorrectionReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasPhotoId
{
    [self _readPhotoId];
    return _photoId != nil;
}
- (NSString *)photoId
{
    [self _readPhotoId];
    return _photoId;
}
- (void)setPhotoId:(NSString *)v
{
    _flags.read_photoId = 1;
    _flags.wrote_photoId = 1;
    _photoId = v;
}

- (void)_readRouteStepScreenshotImageId {
    if (_flags.read_routeStepScreenshotImageId) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_routeStepScreenshotImageId) {
            static const uint32_t tags[] = {7, 0};
            GEORPInstructionCorrectionReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasRouteStepScreenshotImageId
{
    [self _readRouteStepScreenshotImageId];
    return _routeStepScreenshotImageId != nil;
}
- (NSString *)routeStepScreenshotImageId
{
    [self _readRouteStepScreenshotImageId];
    return _routeStepScreenshotImageId;
}
- (void)setRouteStepScreenshotImageId:(NSString *)v
{
    _flags.read_routeStepScreenshotImageId = 1;
    _flags.wrote_routeStepScreenshotImageId = 1;
    _routeStepScreenshotImageId = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_routeStepIndex)
    {
        [dict setObject:@(self->_routeStepIndex) forKey:@"route_step_index"];
    }

    {
        NSString * value = self.comments;
        if (value) {
            [dict setObject:value forKey:@"comments"];
        }
    }

    {
        GEORPPhotoWithMetadata * value = self.photo;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"photo"];
        }
    }

    if (self->_flags.has_routeStepSubstepIndex)
    {
        [dict setObject:@(self->_routeStepSubstepIndex) forKey:@"route_step_substep_index"];
    }

    {
        NSData * value = self.routeStepScreenshotImageData;
        if (value) {
            [dict setObject:value forKey:@"route_step_screenshot_image_data"];
        }
    }

    {
        NSString * value = self.photoId;
        if (value) {
            [dict setObject:value forKey:@"photo_id"];
        }
    }

    {
        NSString * value = self.routeStepScreenshotImageId;
        if (value) {
            [dict setObject:value forKey:@"route_step_screenshot_image_id"];
        }
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPInstructionCorrectionReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPInstructionCorrectionReadAllFrom(__unsafe_unretained GEORPInstructionCorrection *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPInstructionCorrectionReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPInstructionCorrectionReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPInstructionCorrectionReadFrom(__unsafe_unretained GEORPInstructionCorrection *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPInstructionCorrectionReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPInstructionCorrectionReadSpecified(__unsafe_unretained GEORPInstructionCorrection *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_comments
        + self->_flags.read_photo
        + self->_flags.read_routeStepScreenshotImageData
        + self->_flags.read_photoId
        + self->_flags.read_routeStepScreenshotImageId
        ;
    #define requiredLazyFieldCount 4 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* routeStepIndex */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_routeStepIndex = YES;
                self->_routeStepIndex = PBReaderReadUint32(reader);

            }
            break;
            case 2 /* comments */:
            {
                if (!shouldParseTag || self->_flags.read_comments) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_comments) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_comments = PBReaderReadString(reader);
                self->_comments = new_comments;

                --tagsRemaining;
            }
            break;
            case 3 /* photo */:
            {
                if (!shouldParseTag || self->_flags.read_photo) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_photo) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEORPPhotoWithMetadata *new_photo = [[GEORPPhotoWithMetadata alloc] init];
                self->_photo = new_photo;
                PBDataReaderMark mark_photo;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_photo);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEORPPhotoWithMetadataReadAllFrom(new_photo, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_photo);

                --tagsRemaining;
            }
            break;
            case 4 /* routeStepSubstepIndex */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_routeStepSubstepIndex = YES;
                self->_routeStepSubstepIndex = PBReaderReadUint32(reader);

            }
            break;
            case 5 /* routeStepScreenshotImageData */:
            {
                if (!shouldParseTag || self->_flags.read_routeStepScreenshotImageData) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_routeStepScreenshotImageData) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSData * new_routeStepScreenshotImageData = PBReaderReadData(reader);
                self->_routeStepScreenshotImageData = new_routeStepScreenshotImageData;

                --tagsRemaining;
            }
            break;
            case 6 /* photoId */:
            {
                if (!shouldParseTag || self->_flags.read_photoId) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_photoId) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_photoId = PBReaderReadString(reader);
                self->_photoId = new_photoId;

                --tagsRemaining;
            }
            break;
            case 7 /* routeStepScreenshotImageId */:
            {
                if (!shouldParseTag || self->_flags.read_routeStepScreenshotImageId) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_routeStepScreenshotImageId) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_routeStepScreenshotImageId = PBReaderReadString(reader);
                self->_routeStepScreenshotImageId = new_routeStepScreenshotImageId;

                --tagsRemaining;
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
            [self->_photo readAll:YES];
        }
        self->_flags.read_comments = YES;
        self->_flags.read_photo = YES;
        self->_flags.read_routeStepScreenshotImageData = YES;
        self->_flags.read_photoId = YES;
        self->_flags.read_routeStepScreenshotImageId = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 2 /* comments */:
                    self->_flags.read_comments = YES;
                    break;
                case 3 /* photo */:
                    self->_flags.read_photo = YES;
                    break;
                case 5 /* routeStepScreenshotImageData */:
                    self->_flags.read_routeStepScreenshotImageData = YES;
                    break;
                case 6 /* photoId */:
                    self->_flags.read_photoId = YES;
                    break;
                case 7 /* routeStepScreenshotImageId */:
                    self->_flags.read_routeStepScreenshotImageId = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPInstructionCorrectionIsValid(reader);
}

BOOL GEORPInstructionCorrectionIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* routeStepIndex */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint32(reader);
                break;
            case 2 /* comments */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 3 /* photo */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_photo;
                    if (!PBReaderPlaceMark(reader, &mark_photo))
                        returnValue(NO);
                    if (!GEORPPhotoWithMetadataIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_photo);
                }
                break;
            case 4 /* routeStepSubstepIndex */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint32(reader);
                break;
            case 5 /* routeStepScreenshotImageData */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 6 /* photoId */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 7 /* routeStepScreenshotImageId */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPInstructionCorrectionReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPInstructionCorrectionIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* routeStepIndex */
    {
        if (self->_flags.has_routeStepIndex)
        {
            PBDataWriterWriteUint32Field(writer, self->_routeStepIndex, 1);
        }
    }

    /* comments */
    {
        if (self->_comments)
        {
            PBDataWriterWriteStringField(writer, self->_comments, 2);
        }
    }

    /* photo */
    {
        if (self->_photo != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_photo, 3);
        }
    }

    /* routeStepSubstepIndex */
    {
        if (self->_flags.has_routeStepSubstepIndex)
        {
            PBDataWriterWriteUint32Field(writer, self->_routeStepSubstepIndex, 4);
        }
    }

    /* routeStepScreenshotImageData */
    {
        if (self->_routeStepScreenshotImageData)
        {
            PBDataWriterWriteDataField(writer, self->_routeStepScreenshotImageData, 5);
        }
    }

    /* photoId */
    {
        if (self->_photoId)
        {
            PBDataWriterWriteStringField(writer, self->_photoId, 6);
        }
    }

    /* routeStepScreenshotImageId */
    {
        if (self->_routeStepScreenshotImageId)
        {
            PBDataWriterWriteStringField(writer, self->_routeStepScreenshotImageId, 7);
        }
    }
}

BOOL GEORPInstructionCorrectionIsDirty(__unsafe_unretained GEORPInstructionCorrection *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_routeStepIndex
        || self->_flags.wrote_comments
        || self->_flags.read_comments
        || self->_flags.wrote_photo
        || (self->_flags.read_photo && GEORPPhotoWithMetadataIsDirty(self->_photo))
        || self->_flags.wrote_routeStepSubstepIndex
        || self->_flags.wrote_routeStepScreenshotImageData
        || self->_flags.read_routeStepScreenshotImageData
        || self->_flags.wrote_photoId
        || self->_flags.read_photoId
        || self->_flags.wrote_routeStepScreenshotImageId
        || self->_flags.read_routeStepScreenshotImageId
    ;


    return dirty;
}


- (void)copyTo:(GEORPInstructionCorrection *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (self->_flags.has_routeStepIndex)
    {
        other->_routeStepIndex = _routeStepIndex;
        other->_flags.has_routeStepIndex = YES;
    }
    if (_comments)
    {
        other.comments = _comments;
    }
    if (_photo)
    {
        other.photo = _photo;
    }
    if (self->_flags.has_routeStepSubstepIndex)
    {
        other->_routeStepSubstepIndex = _routeStepSubstepIndex;
        other->_flags.has_routeStepSubstepIndex = YES;
    }
    if (_routeStepScreenshotImageData)
    {
        other.routeStepScreenshotImageData = _routeStepScreenshotImageData;
    }
    if (_photoId)
    {
        other.photoId = _photoId;
    }
    if (_routeStepScreenshotImageId)
    {
        other.routeStepScreenshotImageId = _routeStepScreenshotImageId;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPInstructionCorrection *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_routeStepIndex
                || _flags.wrote_comments
                || _flags.wrote_photo
                || _flags.wrote_routeStepSubstepIndex
                || _flags.wrote_routeStepScreenshotImageData
                || _flags.wrote_photoId
                || _flags.wrote_routeStepScreenshotImageId
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPInstructionCorrectionReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    if (self->_flags.has_routeStepIndex)
    {
        copy->_routeStepIndex = _routeStepIndex;
        copy->_flags.has_routeStepIndex = YES;
    }
    copy->_comments = [_comments copyWithZone:zone];
    copy->_photo = [_photo copyWithZone:zone];
    if (self->_flags.has_routeStepSubstepIndex)
    {
        copy->_routeStepSubstepIndex = _routeStepSubstepIndex;
        copy->_flags.has_routeStepSubstepIndex = YES;
    }
    copy->_routeStepScreenshotImageData = [_routeStepScreenshotImageData copyWithZone:zone];
    copy->_photoId = [_photoId copyWithZone:zone];
    copy->_routeStepScreenshotImageId = [_routeStepScreenshotImageId copyWithZone:zone];
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPInstructionCorrection *other = (GEORPInstructionCorrection *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_routeStepIndex && other->_flags.has_routeStepIndex && self->_routeStepIndex == other->_routeStepIndex) || (!self->_flags.has_routeStepIndex && !other->_flags.has_routeStepIndex))
    &&
    ((!self->_comments && !other->_comments) || [self->_comments isEqual:other->_comments])
    &&
    ((!self->_photo && !other->_photo) || [self->_photo isEqual:other->_photo])
    &&
    ((self->_flags.has_routeStepSubstepIndex && other->_flags.has_routeStepSubstepIndex && self->_routeStepSubstepIndex == other->_routeStepSubstepIndex) || (!self->_flags.has_routeStepSubstepIndex && !other->_flags.has_routeStepSubstepIndex))
    &&
    ((!self->_routeStepScreenshotImageData && !other->_routeStepScreenshotImageData) || [self->_routeStepScreenshotImageData isEqual:other->_routeStepScreenshotImageData])
    &&
    ((!self->_photoId && !other->_photoId) || [self->_photoId isEqual:other->_photoId])
    &&
    ((!self->_routeStepScreenshotImageId && !other->_routeStepScreenshotImageId) || [self->_routeStepScreenshotImageId isEqual:other->_routeStepScreenshotImageId])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_routeStepIndex ? PBHashInt((NSUInteger)self->_routeStepIndex) : 0)
    ^
    [self->_comments hash]
    ^
    [self->_photo hash]
    ^
    (self->_flags.has_routeStepSubstepIndex ? PBHashInt((NSUInteger)self->_routeStepSubstepIndex) : 0)
    ^
    [self->_routeStepScreenshotImageData hash]
    ^
    [self->_photoId hash]
    ^
    [self->_routeStepScreenshotImageId hash]
    ;
}

- (void)mergeFrom:(GEORPInstructionCorrection *)other
{
    [other readAll:NO];
    if (other->_flags.has_routeStepIndex)
    {
        self->_routeStepIndex = other->_routeStepIndex;
        self->_flags.has_routeStepIndex = 1;
    }
    if (other->_comments)
    {
        [self setComments:other->_comments];
    }
    if (self->_photo && other->_photo)
    {
        [self->_photo mergeFrom:other->_photo];
    }
    else if (!self->_photo && other->_photo)
    {
        [self setPhoto:other->_photo];
    }
    if (other->_flags.has_routeStepSubstepIndex)
    {
        self->_routeStepSubstepIndex = other->_routeStepSubstepIndex;
        self->_flags.has_routeStepSubstepIndex = 1;
    }
    if (other->_routeStepScreenshotImageData)
    {
        [self setRouteStepScreenshotImageData:other->_routeStepScreenshotImageData];
    }
    if (other->_photoId)
    {
        [self setPhotoId:other->_photoId];
    }
    if (other->_routeStepScreenshotImageId)
    {
        [self setRouteStepScreenshotImageId:other->_routeStepScreenshotImageId];
    }
}


@end


