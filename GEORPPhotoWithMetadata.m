// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPPhotoWithMetadata.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEOLatLng.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPPhotoWithMetadata

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readData {
    if (_flags.read_data) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_data) {
            static const uint32_t tags[] = {1, 0};
            GEORPPhotoWithMetadataReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasData
{
    [self _readData];
    return _data != nil;
}
- (NSData *)data
{
    [self _readData];
    return _data;
}
- (void)setData:(NSData *)v
{
    _flags.read_data = 1;
    _flags.wrote_data = 1;
    _data = v;
}

- (double)creationDate
{
    return _creationDate;
}
- (void)setCreationDate:(double)v
{
    _flags.wrote_creationDate = 1;
    _flags.has_creationDate = 1;
    _creationDate = v;
}
- (void)setHasCreationDate:(BOOL)f
{
    _flags.wrote_creationDate = 1;
    _flags.has_creationDate = f ? 1 : 0;
}
- (BOOL)hasCreationDate
{
    return (BOOL)_flags.has_creationDate;
}

- (void)_readGeotagCoordinate {
    if (_flags.read_geotagCoordinate) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_geotagCoordinate) {
            static const uint32_t tags[] = {3, 0};
            GEORPPhotoWithMetadataReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasGeotagCoordinate
{
    [self _readGeotagCoordinate];
    return _geotagCoordinate != nil;
}
- (GEOLatLng *)geotagCoordinate
{
    [self _readGeotagCoordinate];
    return _geotagCoordinate;
}
- (void)setGeotagCoordinate:(GEOLatLng *)v
{
    _flags.read_geotagCoordinate = 1;
    _flags.wrote_geotagCoordinate = 1;
    _geotagCoordinate = v;
}

- (double)geotagHorizontalAccuracy
{
    return _geotagHorizontalAccuracy;
}
- (void)setGeotagHorizontalAccuracy:(double)v
{
    _flags.wrote_geotagHorizontalAccuracy = 1;
    _flags.has_geotagHorizontalAccuracy = 1;
    _geotagHorizontalAccuracy = v;
}
- (void)setHasGeotagHorizontalAccuracy:(BOOL)f
{
    _flags.wrote_geotagHorizontalAccuracy = 1;
    _flags.has_geotagHorizontalAccuracy = f ? 1 : 0;
}
- (BOOL)hasGeotagHorizontalAccuracy
{
    return (BOOL)_flags.has_geotagHorizontalAccuracy;
}

- (double)geotagTimestamp
{
    return _geotagTimestamp;
}
- (void)setGeotagTimestamp:(double)v
{
    _flags.wrote_geotagTimestamp = 1;
    _flags.has_geotagTimestamp = 1;
    _geotagTimestamp = v;
}
- (void)setHasGeotagTimestamp:(BOOL)f
{
    _flags.wrote_geotagTimestamp = 1;
    _flags.has_geotagTimestamp = f ? 1 : 0;
}
- (BOOL)hasGeotagTimestamp
{
    return (BOOL)_flags.has_geotagTimestamp;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        NSData * value = self.data;
        if (value) {
            [dict setObject:value forKey:@"data"];
        }
    }

    if (self->_flags.has_creationDate)
    {
        [dict setObject:@(self->_creationDate) forKey:@"creation_date"];
    }

    {
        GEOLatLng * value = self.geotagCoordinate;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"geotag_coordinate"];
        }
    }

    if (self->_flags.has_geotagHorizontalAccuracy)
    {
        [dict setObject:@(self->_geotagHorizontalAccuracy) forKey:@"geotag_horizontal_accuracy"];
    }

    if (self->_flags.has_geotagTimestamp)
    {
        [dict setObject:@(self->_geotagTimestamp) forKey:@"geotag_timestamp"];
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPPhotoWithMetadataReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPPhotoWithMetadataReadAllFrom(__unsafe_unretained GEORPPhotoWithMetadata *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPPhotoWithMetadataReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPPhotoWithMetadataReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPPhotoWithMetadataReadFrom(__unsafe_unretained GEORPPhotoWithMetadata *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPPhotoWithMetadataReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPPhotoWithMetadataReadSpecified(__unsafe_unretained GEORPPhotoWithMetadata *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_data
        + self->_flags.read_geotagCoordinate
        ;
    #define requiredLazyFieldCount 1 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* data */:
            {
                if (!shouldParseTag || self->_flags.read_data) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_data) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSData * new_data = PBReaderReadData(reader);
                self->_data = new_data;

                --tagsRemaining;
            }
            break;
            case 2 /* creationDate */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_creationDate = YES;
                self->_creationDate = PBReaderReadDouble(reader);

            }
            break;
            case 3 /* geotagCoordinate */:
            {
                if (!shouldParseTag || self->_flags.read_geotagCoordinate) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_geotagCoordinate) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOLatLng *new_geotagCoordinate = [[GEOLatLng alloc] init];
                self->_geotagCoordinate = new_geotagCoordinate;
                PBDataReaderMark mark_geotagCoordinate;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_geotagCoordinate);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOLatLngReadAllFrom(new_geotagCoordinate, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_geotagCoordinate);

                --tagsRemaining;
            }
            break;
            case 4 /* geotagHorizontalAccuracy */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_geotagHorizontalAccuracy = YES;
                self->_geotagHorizontalAccuracy = PBReaderReadDouble(reader);

            }
            break;
            case 5 /* geotagTimestamp */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_geotagTimestamp = YES;
                self->_geotagTimestamp = PBReaderReadDouble(reader);

            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
            [self->_geotagCoordinate readAll:YES];
        }
        self->_flags.read_data = YES;
        self->_flags.read_geotagCoordinate = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* data */:
                    self->_flags.read_data = YES;
                    break;
                case 3 /* geotagCoordinate */:
                    self->_flags.read_geotagCoordinate = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPPhotoWithMetadataIsValid(reader);
}

BOOL GEORPPhotoWithMetadataIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* data */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 2 /* creationDate */:
                if (TYPE_FIXED64 != aType)
                    returnValue(NO);
                PBReaderReadDouble(reader);
                break;
            case 3 /* geotagCoordinate */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_geotagCoordinate;
                    if (!PBReaderPlaceMark(reader, &mark_geotagCoordinate))
                        returnValue(NO);
                    if (!GEOLatLngIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_geotagCoordinate);
                }
                break;
            case 4 /* geotagHorizontalAccuracy */:
                if (TYPE_FIXED64 != aType)
                    returnValue(NO);
                PBReaderReadDouble(reader);
                break;
            case 5 /* geotagTimestamp */:
                if (TYPE_FIXED64 != aType)
                    returnValue(NO);
                PBReaderReadDouble(reader);
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPPhotoWithMetadataReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPPhotoWithMetadataIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* data */
    {
        if (self->_data)
        {
            PBDataWriterWriteDataField(writer, self->_data, 1);
        }
    }

    /* creationDate */
    {
        if (self->_flags.has_creationDate)
        {
            PBDataWriterWriteDoubleField(writer, self->_creationDate, 2);
        }
    }

    /* geotagCoordinate */
    {
        if (self->_geotagCoordinate != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_geotagCoordinate, 3);
        }
    }

    /* geotagHorizontalAccuracy */
    {
        if (self->_flags.has_geotagHorizontalAccuracy)
        {
            PBDataWriterWriteDoubleField(writer, self->_geotagHorizontalAccuracy, 4);
        }
    }

    /* geotagTimestamp */
    {
        if (self->_flags.has_geotagTimestamp)
        {
            PBDataWriterWriteDoubleField(writer, self->_geotagTimestamp, 5);
        }
    }
}

BOOL GEORPPhotoWithMetadataIsDirty(__unsafe_unretained GEORPPhotoWithMetadata *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_data
        || self->_flags.read_data
        || self->_flags.wrote_creationDate
        || self->_flags.wrote_geotagCoordinate
        || self->_flags.read_geotagCoordinate
        || self->_flags.wrote_geotagHorizontalAccuracy
        || self->_flags.wrote_geotagTimestamp
    ;


    return dirty;
}


- (void)copyTo:(GEORPPhotoWithMetadata *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_data)
    {
        other.data = _data;
    }
    if (self->_flags.has_creationDate)
    {
        other->_creationDate = _creationDate;
        other->_flags.has_creationDate = YES;
    }
    if (_geotagCoordinate)
    {
        other.geotagCoordinate = _geotagCoordinate;
    }
    if (self->_flags.has_geotagHorizontalAccuracy)
    {
        other->_geotagHorizontalAccuracy = _geotagHorizontalAccuracy;
        other->_flags.has_geotagHorizontalAccuracy = YES;
    }
    if (self->_flags.has_geotagTimestamp)
    {
        other->_geotagTimestamp = _geotagTimestamp;
        other->_flags.has_geotagTimestamp = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPPhotoWithMetadata *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_data
                || _flags.wrote_creationDate
                || _flags.wrote_geotagCoordinate
                || _flags.wrote_geotagHorizontalAccuracy
                || _flags.wrote_geotagTimestamp
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPPhotoWithMetadataReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_data = [_data copyWithZone:zone];
    if (self->_flags.has_creationDate)
    {
        copy->_creationDate = _creationDate;
        copy->_flags.has_creationDate = YES;
    }
    copy->_geotagCoordinate = [_geotagCoordinate copyWithZone:zone];
    if (self->_flags.has_geotagHorizontalAccuracy)
    {
        copy->_geotagHorizontalAccuracy = _geotagHorizontalAccuracy;
        copy->_flags.has_geotagHorizontalAccuracy = YES;
    }
    if (self->_flags.has_geotagTimestamp)
    {
        copy->_geotagTimestamp = _geotagTimestamp;
        copy->_flags.has_geotagTimestamp = YES;
    }
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPPhotoWithMetadata *other = (GEORPPhotoWithMetadata *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_data && !other->_data) || [self->_data isEqual:other->_data])
    &&
    ((self->_flags.has_creationDate && other->_flags.has_creationDate && self->_creationDate == other->_creationDate) || (!self->_flags.has_creationDate && !other->_flags.has_creationDate))
    &&
    ((!self->_geotagCoordinate && !other->_geotagCoordinate) || [self->_geotagCoordinate isEqual:other->_geotagCoordinate])
    &&
    ((self->_flags.has_geotagHorizontalAccuracy && other->_flags.has_geotagHorizontalAccuracy && self->_geotagHorizontalAccuracy == other->_geotagHorizontalAccuracy) || (!self->_flags.has_geotagHorizontalAccuracy && !other->_flags.has_geotagHorizontalAccuracy))
    &&
    ((self->_flags.has_geotagTimestamp && other->_flags.has_geotagTimestamp && self->_geotagTimestamp == other->_geotagTimestamp) || (!self->_flags.has_geotagTimestamp && !other->_flags.has_geotagTimestamp))
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_data hash]
    ^
    (self->_flags.has_creationDate ? PBHashDouble(self->_creationDate) : 0)
    ^
    [self->_geotagCoordinate hash]
    ^
    (self->_flags.has_geotagHorizontalAccuracy ? PBHashDouble(self->_geotagHorizontalAccuracy) : 0)
    ^
    (self->_flags.has_geotagTimestamp ? PBHashDouble(self->_geotagTimestamp) : 0)
    ;
}

- (void)mergeFrom:(GEORPPhotoWithMetadata *)other
{
    [other readAll:NO];
    if (other->_data)
    {
        [self setData:other->_data];
    }
    if (other->_flags.has_creationDate)
    {
        self->_creationDate = other->_creationDate;
        self->_flags.has_creationDate = 1;
    }
    if (self->_geotagCoordinate && other->_geotagCoordinate)
    {
        [self->_geotagCoordinate mergeFrom:other->_geotagCoordinate];
    }
    else if (!self->_geotagCoordinate && other->_geotagCoordinate)
    {
        [self setGeotagCoordinate:other->_geotagCoordinate];
    }
    if (other->_flags.has_geotagHorizontalAccuracy)
    {
        self->_geotagHorizontalAccuracy = other->_geotagHorizontalAccuracy;
        self->_flags.has_geotagHorizontalAccuracy = 1;
    }
    if (other->_flags.has_geotagTimestamp)
    {
        self->_geotagTimestamp = other->_geotagTimestamp;
        self->_flags.has_geotagTimestamp = 1;
    }
}


@end


