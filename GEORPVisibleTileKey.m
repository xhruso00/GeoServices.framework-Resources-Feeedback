// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPVisibleTileKey.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif


NSString *GEORPVisibleTileKeyDescription(const GEORPVisibleTileKey *self)
{
    return [NSString stringWithFormat:@"GEORPVisibleTileKey<%p> %@", self, GEORPVisibleTileKeyDictionaryRepresentation(self)];
}

NSDictionary<NSString *, id> *GEORPVisibleTileKeyDictionaryRepresentation(const GEORPVisibleTileKey *self)
{
    NSMutableDictionary<NSString *, id> *dict = [NSMutableDictionary dictionary];
    if (self->_has.x)
    {
        [dict setObject:@(self->_x) forKey:@"x"];
    }
    if (self->_has.y)
    {
        [dict setObject:@(self->_y) forKey:@"y"];
    }
    if (self->_has.z)
    {
        [dict setObject:@(self->_z) forKey:@"z"];
    }
    return dict;
}

void GEORPVisibleTileKeyFromDictionaryRepresentation(NSDictionary<NSString *, id> *dict, GEORPVisibleTileKey *self)
{
    {
        id value = dict[@"x"];
        if (value != nil)
        {
            self->_has.x = 1;
            self->_x = [value unsignedIntValue];
        }
    }
    {
        id value = dict[@"y"];
        if (value != nil)
        {
            self->_has.y = 1;
            self->_y = [value unsignedIntValue];
        }
    }
    {
        id value = dict[@"z"];
        if (value != nil)
        {
            self->_has.z = 1;
            self->_z = [value unsignedIntValue];
        }
    }
}


id GEORPVisibleTileKeyReadValueForKeyPath(NSString *keyPath, __unsafe_unretained PBDataReader *reader)
{
    if (keyPath.length == 0) {
        return nil;
    }
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const id v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)

    NSUInteger dot = [keyPath rangeOfString:@"."].location;
    __attribute__((unused)) NSString *key, *nextKey;
    if (dot == NSNotFound) {
        key = keyPath;
        nextKey = nil;
    } else {
        key = [keyPath substringToIndex:dot];
        nextKey = [keyPath substringFromIndex:dot+1];
    }

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;

        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
    
        switch (tag) {

            case 1 /* x */:
                if (![key isEqualToString:@"z"]) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        returnValue(nil);
                } else {
                    returnValue(@(PBReaderReadUint32(reader)));
                }
                break;
            case 2 /* y */:
                if (![key isEqualToString:@"x"]) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        returnValue(nil);
                } else {
                    returnValue(@(PBReaderReadUint32(reader)));
                }
                break;
            case 3 /* z */:
                if (![key isEqualToString:@"y"]) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        returnValue(nil);
                } else {
                    returnValue(@(PBReaderReadUint32(reader)));
                }
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(nil);
                break;
        }
    }
    returnValue(nil);
    #undef returnValue
}

BOOL GEORPVisibleTileKeyReadFrom(GEORPVisibleTileKey *self, __unsafe_unretained PBDataReader *reader)
{
    return GEORPVisibleTileKeyReadAllFrom(self, reader, NO);
}

BOOL GEORPVisibleTileKeyReadAllFrom(GEORPVisibleTileKey *self, __unsafe_unretained PBDataReader *reader, BOOL recursively)
{
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;

        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
	
    	switch (tag) {	

            case 1 /* x */:
            {
                self->_has.x = YES;
                self->_x = PBReaderReadUint32(reader);
            }
            break;
            case 2 /* y */:
            {
                self->_has.y = YES;
                self->_y = PBReaderReadUint32(reader);
            }
            break;
            case 3 /* z */:
            {
                self->_has.z = YES;
                self->_z = PBReaderReadUint32(reader);
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }
    return !PBReaderHasError(reader);
}

void GEORPVisibleTileKeyWriteTo(const GEORPVisibleTileKey *self, __unsafe_unretained PBDataWriter *writer)
{
    /* x */
    {
        if (self->_has.x)
        {
            PBDataWriterWriteUint32Field(writer, self->_x, 1);
        }
    }
    /* y */
    {
        if (self->_has.y)
        {
            PBDataWriterWriteUint32Field(writer, self->_y, 2);
        }
    }
    /* z */
    {
        if (self->_has.z)
        {
            PBDataWriterWriteUint32Field(writer, self->_z, 3);
        }
    }
}

BOOL GEORPVisibleTileKeyEquals(const GEORPVisibleTileKey *a, const GEORPVisibleTileKey *b)
{
    return 0 == (memcmp(a, b, sizeof(GEORPVisibleTileKey)));
}

GEORPVISIBLETILEKEY_FUNCTION NSUInteger GEORPVisibleTileKeyHash(const GEORPVisibleTileKey *self)
{
    return PBHashBytes(self, sizeof(GEORPVisibleTileKey));
}

BOOL GEORPVisibleTileKeyIsValid(__unsafe_unretained PBDataReader *reader)
{
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    GEORPVisibleTileKey Self;
    BOOL result = GEORPVisibleTileKeyReadAllFrom(&Self, reader, YES);
    PBReaderRecallMark(reader, &resetMark);
    return result;
}


