// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPSuggestedRouteIndex.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPSuggestedRouteIndex


- (void)dealloc
{
    PBRepeatedUInt32Clear(&(self->_clusteredRouteRideSelections));
}

- (uint32_t)directionsResponseIndex
{
    return _directionsResponseIndex;
}
- (void)setDirectionsResponseIndex:(uint32_t)v
{
    _flags.has_directionsResponseIndex = 1;
    _directionsResponseIndex = v;
}
- (void)setHasDirectionsResponseIndex:(BOOL)f
{
    _flags.has_directionsResponseIndex = f ? 1 : 0;
}
- (BOOL)hasDirectionsResponseIndex
{
    return (BOOL)_flags.has_directionsResponseIndex;
}

- (uint32_t)directionsResponseSuggestedRoutesIndex
{
    return _directionsResponseSuggestedRoutesIndex;
}
- (void)setDirectionsResponseSuggestedRoutesIndex:(uint32_t)v
{
    _flags.has_directionsResponseSuggestedRoutesIndex = 1;
    _directionsResponseSuggestedRoutesIndex = v;
}
- (void)setHasDirectionsResponseSuggestedRoutesIndex:(BOOL)f
{
    _flags.has_directionsResponseSuggestedRoutesIndex = f ? 1 : 0;
}
- (BOOL)hasDirectionsResponseSuggestedRoutesIndex
{
    return (BOOL)_flags.has_directionsResponseSuggestedRoutesIndex;
}

- (NSUInteger)clusteredRouteRideSelectionsCount
{
    return _clusteredRouteRideSelections.count;
}
- (uint32_t *)clusteredRouteRideSelections
{
    return _clusteredRouteRideSelections.list;
}
- (void)clearClusteredRouteRideSelections
{
    PBRepeatedUInt32Clear(&_clusteredRouteRideSelections);
}
- (void)addClusteredRouteRideSelections:(uint32_t)i
{
    PBRepeatedUInt32Add(&_clusteredRouteRideSelections, i);
}
- (uint32_t)clusteredRouteRideSelectionsAtIndex:(NSUInteger)idx
{
    if (_clusteredRouteRideSelections.count <= idx)
    {
        [[NSException exceptionWithName:NSRangeException reason:[NSString stringWithFormat:@"idx (%tu) is out of range (%tu)", idx, _clusteredRouteRideSelections.count] userInfo:nil] raise];
    }
    return _clusteredRouteRideSelections.list[idx];
}
- (void)setClusteredRouteRideSelections:(uint32_t *)list count:(NSUInteger)count
{
    PBRepeatedUInt32Set(&_clusteredRouteRideSelections, list, count);
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_directionsResponseIndex)
    {
        [dict setObject:@(self->_directionsResponseIndex) forKey:@"directions_response_index"];
    }

    if (self->_flags.has_directionsResponseSuggestedRoutesIndex)
    {
        [dict setObject:@(self->_directionsResponseSuggestedRoutesIndex) forKey:@"directions_response_suggested_routes_index"];
    }

    [dict setObject:PBRepeatedUInt32NSArray(&(self->_clusteredRouteRideSelections)) forKey:@"clustered_route_ride_selections"];



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively { /* noop */ }
BOOL GEORPSuggestedRouteIndexReadAllFrom(__unsafe_unretained GEORPSuggestedRouteIndex *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};

    @synchronized(reader) {
        BOOL result = GEORPSuggestedRouteIndexReadSpecified(self, reader, recursively ? recursiveTag : nil);
        return result;
    }
}
BOOL GEORPSuggestedRouteIndexReadFrom(__unsafe_unretained GEORPSuggestedRouteIndex *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPSuggestedRouteIndexReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPSuggestedRouteIndexReadSpecified(__unsafe_unretained GEORPSuggestedRouteIndex *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    #define shouldParseUnknown YES
    __attribute__((unused)) BOOL const recursively = (tags != nil && tags[0] == TAG_PARSE_ALL_RECURSIVE);
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
    #define shouldParseTag YES

        switch (tag) {

            case 2 /* directionsResponseIndex */:
            {
                self->_flags.has_directionsResponseIndex = YES;
                self->_directionsResponseIndex = PBReaderReadUint32(reader);

            }
            break;
            case 3 /* directionsResponseSuggestedRoutesIndex */:
            {
                self->_flags.has_directionsResponseSuggestedRoutesIndex = YES;
                self->_directionsResponseSuggestedRoutesIndex = PBReaderReadUint32(reader);

            }
            break;
            case 5 /* clusteredRouteRideSelections */:
            {
            if (TYPE_LENGTH_DELIMITED == aType)
                {
                    PBDataReaderMark mark_clusteredRouteRideSelections;
                    BOOL markError = !PBReaderPlaceMark(reader, &mark_clusteredRouteRideSelections);
                    if (markError)
                    {
                        return NO;
                    }
                    while (PBReaderHasMoreData(reader))
                    {
                        uint32_t new_clusteredRouteRideSelections = PBReaderReadUint32(reader);
                        PBRepeatedUInt32Add(&(self->_clusteredRouteRideSelections), new_clusteredRouteRideSelections);
                    }
                    PBReaderRecallMark(reader, &mark_clusteredRouteRideSelections);
                }
                else
                {
                    PBRepeatedUInt32Add(&(self->_clusteredRouteRideSelections), PBReaderReadUint32(reader));
                }

            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }



    #undef shouldParseTag
    #undef shouldParseUnknown
    #undef recursively
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPSuggestedRouteIndexIsValid(reader);
}

BOOL GEORPSuggestedRouteIndexIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 2 /* directionsResponseIndex */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint32(reader);
                break;
            case 3 /* directionsResponseSuggestedRoutesIndex */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadUint32(reader);
                break;
            case 5 /* clusteredRouteRideSelections */:
                if (TYPE_LENGTH_DELIMITED == aType)
                {
                    PBDataReaderMark mark_clusteredRouteRideSelections;
                    if (!PBReaderPlaceMark(reader, &mark_clusteredRouteRideSelections))
                        returnValue(NO);
                    while (PBReaderHasMoreData(reader))
                        PBReaderReadUint32(reader);
                    PBReaderRecallMark(reader, &mark_clusteredRouteRideSelections);
                }
                else if (TYPE_VARINT != aType)
                    returnValue(NO);
                else
                    PBReaderReadUint32(reader);
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPSuggestedRouteIndexReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{

    /* directionsResponseIndex */
    {
        if (self->_flags.has_directionsResponseIndex)
        {
            PBDataWriterWriteUint32Field(writer, self->_directionsResponseIndex, 2);
        }
    }

    /* directionsResponseSuggestedRoutesIndex */
    {
        if (self->_flags.has_directionsResponseSuggestedRoutesIndex)
        {
            PBDataWriterWriteUint32Field(writer, self->_directionsResponseSuggestedRoutesIndex, 3);
        }
    }

    /* clusteredRouteRideSelections */
    {
        if (self->_clusteredRouteRideSelections.count)
        {
            NSUInteger i_clusteredRouteRideSelections;
            for (i_clusteredRouteRideSelections = 0; i_clusteredRouteRideSelections < self->_clusteredRouteRideSelections.count; i_clusteredRouteRideSelections++)
            {
                PBDataWriterWriteUint32Field(writer, self->_clusteredRouteRideSelections.list[i_clusteredRouteRideSelections], 5);
            }
        }

    }
}



- (void)copyTo:(GEORPSuggestedRouteIndex *)other
{
    [self readAll:NO];
    if (self->_flags.has_directionsResponseIndex)
    {
        other->_directionsResponseIndex = _directionsResponseIndex;
        other->_flags.has_directionsResponseIndex = YES;
    }
    if (self->_flags.has_directionsResponseSuggestedRoutesIndex)
    {
        other->_directionsResponseSuggestedRoutesIndex = _directionsResponseSuggestedRoutesIndex;
        other->_flags.has_directionsResponseSuggestedRoutesIndex = YES;
    }
    if ([self clusteredRouteRideSelectionsCount])
    {
        [other clearClusteredRouteRideSelections];
        NSUInteger clusteredRouteRideSelectionsCnt = [self clusteredRouteRideSelectionsCount];
        for (NSUInteger i = 0; i < clusteredRouteRideSelectionsCnt; i++)
        {
            [other addClusteredRouteRideSelections:[self clusteredRouteRideSelectionsAtIndex:i]];
        }
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPSuggestedRouteIndex *copy = [[[self class] allocWithZone:zone] init];
    if (self->_flags.has_directionsResponseIndex)
    {
        copy->_directionsResponseIndex = _directionsResponseIndex;
        copy->_flags.has_directionsResponseIndex = YES;
    }
    if (self->_flags.has_directionsResponseSuggestedRoutesIndex)
    {
        copy->_directionsResponseSuggestedRoutesIndex = _directionsResponseSuggestedRoutesIndex;
        copy->_flags.has_directionsResponseSuggestedRoutesIndex = YES;
    }
    PBRepeatedUInt32Copy(&(copy->_clusteredRouteRideSelections), &_clusteredRouteRideSelections);
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPSuggestedRouteIndex *other = (GEORPSuggestedRouteIndex *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_directionsResponseIndex && other->_flags.has_directionsResponseIndex && self->_directionsResponseIndex == other->_directionsResponseIndex) || (!self->_flags.has_directionsResponseIndex && !other->_flags.has_directionsResponseIndex))
    &&
    ((self->_flags.has_directionsResponseSuggestedRoutesIndex && other->_flags.has_directionsResponseSuggestedRoutesIndex && self->_directionsResponseSuggestedRoutesIndex == other->_directionsResponseSuggestedRoutesIndex) || (!self->_flags.has_directionsResponseSuggestedRoutesIndex && !other->_flags.has_directionsResponseSuggestedRoutesIndex))
    &&
    PBRepeatedUInt32IsEqual(&(self->_clusteredRouteRideSelections), &(other->_clusteredRouteRideSelections))

    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_directionsResponseIndex ? PBHashInt((NSUInteger)self->_directionsResponseIndex) : 0)
    ^
    (self->_flags.has_directionsResponseSuggestedRoutesIndex ? PBHashInt((NSUInteger)self->_directionsResponseSuggestedRoutesIndex) : 0)
    ^
    PBRepeatedUInt32Hash(&(self->_clusteredRouteRideSelections))
    ;
}

- (void)mergeFrom:(GEORPSuggestedRouteIndex *)other
{
    [other readAll:NO];
    if (other->_flags.has_directionsResponseIndex)
    {
        self->_directionsResponseIndex = other->_directionsResponseIndex;
        self->_flags.has_directionsResponseIndex = 1;
    }
    if (other->_flags.has_directionsResponseSuggestedRoutesIndex)
    {
        self->_directionsResponseSuggestedRoutesIndex = other->_directionsResponseSuggestedRoutesIndex;
        self->_flags.has_directionsResponseSuggestedRoutesIndex = 1;
    }
    NSUInteger clusteredRouteRideSelectionsCnt = [other clusteredRouteRideSelectionsCount];
    for (NSUInteger i = 0; i < clusteredRouteRideSelectionsCnt; i++)
    {
        [self addClusteredRouteRideSelections:[other clusteredRouteRideSelectionsAtIndex:i]];
    }
}


@end


