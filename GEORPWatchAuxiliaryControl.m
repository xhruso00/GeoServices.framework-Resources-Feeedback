// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPWatchAuxiliaryControl.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPWatchAuxiliaryControl

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (void)_readHardwareIdentifier {
    if (_flags.read_hardwareIdentifier) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_hardwareIdentifier) {
            static const uint32_t tags[] = {1, 0};
            GEORPWatchAuxiliaryControlReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasHardwareIdentifier
{
    [self _readHardwareIdentifier];
    return _hardwareIdentifier != nil;
}
- (NSString *)hardwareIdentifier
{
    [self _readHardwareIdentifier];
    return _hardwareIdentifier;
}
- (void)setHardwareIdentifier:(NSString *)v
{
    _flags.read_hardwareIdentifier = 1;
    _flags.wrote_hardwareIdentifier = 1;
    _hardwareIdentifier = v;
}

- (void)_readOsVersion {
    if (_flags.read_osVersion) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_osVersion) {
            static const uint32_t tags[] = {2, 0};
            GEORPWatchAuxiliaryControlReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasOsVersion
{
    [self _readOsVersion];
    return _osVersion != nil;
}
- (NSString *)osVersion
{
    [self _readOsVersion];
    return _osVersion;
}
- (void)setOsVersion:(NSString *)v
{
    _flags.read_osVersion = 1;
    _flags.wrote_osVersion = 1;
    _osVersion = v;
}

- (void)_readOsBuild {
    if (_flags.read_osBuild) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_osBuild) {
            static const uint32_t tags[] = {3, 0};
            GEORPWatchAuxiliaryControlReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasOsBuild
{
    [self _readOsBuild];
    return _osBuild != nil;
}
- (NSString *)osBuild
{
    [self _readOsBuild];
    return _osBuild;
}
- (void)setOsBuild:(NSString *)v
{
    _flags.read_osBuild = 1;
    _flags.wrote_osBuild = 1;
    _osBuild = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {
        NSString * value = self.hardwareIdentifier;
        if (value) {
            [dict setObject:value forKey:@"hardware_identifier"];
        }
    }

    {
        NSString * value = self.osVersion;
        if (value) {
            [dict setObject:value forKey:@"os_version"];
        }
    }

    {
        NSString * value = self.osBuild;
        if (value) {
            [dict setObject:value forKey:@"os_build"];
        }
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPWatchAuxiliaryControlReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPWatchAuxiliaryControlReadAllFrom(__unsafe_unretained GEORPWatchAuxiliaryControl *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPWatchAuxiliaryControlReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPWatchAuxiliaryControlReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPWatchAuxiliaryControlReadFrom(__unsafe_unretained GEORPWatchAuxiliaryControl *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPWatchAuxiliaryControlReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPWatchAuxiliaryControlReadSpecified(__unsafe_unretained GEORPWatchAuxiliaryControl *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_hardwareIdentifier
        + self->_flags.read_osVersion
        + self->_flags.read_osBuild
        ;
    #define requiredLazyFieldCount 2 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* hardwareIdentifier */:
            {
                if (!shouldParseTag || self->_flags.read_hardwareIdentifier) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_hardwareIdentifier) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_hardwareIdentifier = PBReaderReadString(reader);
                self->_hardwareIdentifier = new_hardwareIdentifier;

                --tagsRemaining;
            }
            break;
            case 2 /* osVersion */:
            {
                if (!shouldParseTag || self->_flags.read_osVersion) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_osVersion) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_osVersion = PBReaderReadString(reader);
                self->_osVersion = new_osVersion;

                --tagsRemaining;
            }
            break;
            case 3 /* osBuild */:
            {
                if (!shouldParseTag || self->_flags.read_osBuild) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_osBuild) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_osBuild = PBReaderReadString(reader);
                self->_osBuild = new_osBuild;

                --tagsRemaining;
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
        }
        self->_flags.read_hardwareIdentifier = YES;
        self->_flags.read_osVersion = YES;
        self->_flags.read_osBuild = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 1 /* hardwareIdentifier */:
                    self->_flags.read_hardwareIdentifier = YES;
                    break;
                case 2 /* osVersion */:
                    self->_flags.read_osVersion = YES;
                    break;
                case 3 /* osBuild */:
                    self->_flags.read_osBuild = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPWatchAuxiliaryControlIsValid(reader);
}

BOOL GEORPWatchAuxiliaryControlIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* hardwareIdentifier */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 2 /* osVersion */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 3 /* osBuild */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPWatchAuxiliaryControlReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPWatchAuxiliaryControlIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* hardwareIdentifier */
    {
        if (self->_hardwareIdentifier)
        {
            PBDataWriterWriteStringField(writer, self->_hardwareIdentifier, 1);
        }
    }

    /* osVersion */
    {
        if (self->_osVersion)
        {
            PBDataWriterWriteStringField(writer, self->_osVersion, 2);
        }
    }

    /* osBuild */
    {
        if (self->_osBuild)
        {
            PBDataWriterWriteStringField(writer, self->_osBuild, 3);
        }
    }
}

BOOL GEORPWatchAuxiliaryControlIsDirty(__unsafe_unretained GEORPWatchAuxiliaryControl *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_hardwareIdentifier
        || self->_flags.read_hardwareIdentifier
        || self->_flags.wrote_osVersion
        || self->_flags.read_osVersion
        || self->_flags.wrote_osBuild
        || self->_flags.read_osBuild
    ;


    return dirty;
}


- (void)copyTo:(GEORPWatchAuxiliaryControl *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (_hardwareIdentifier)
    {
        other.hardwareIdentifier = _hardwareIdentifier;
    }
    if (_osVersion)
    {
        other.osVersion = _osVersion;
    }
    if (_osBuild)
    {
        other.osBuild = _osBuild;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPWatchAuxiliaryControl *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_hardwareIdentifier
                || _flags.wrote_osVersion
                || _flags.wrote_osBuild
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPWatchAuxiliaryControlReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    copy->_hardwareIdentifier = [_hardwareIdentifier copyWithZone:zone];
    copy->_osVersion = [_osVersion copyWithZone:zone];
    copy->_osBuild = [_osBuild copyWithZone:zone];
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPWatchAuxiliaryControl *other = (GEORPWatchAuxiliaryControl *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((!self->_hardwareIdentifier && !other->_hardwareIdentifier) || [self->_hardwareIdentifier isEqual:other->_hardwareIdentifier])
    &&
    ((!self->_osVersion && !other->_osVersion) || [self->_osVersion isEqual:other->_osVersion])
    &&
    ((!self->_osBuild && !other->_osBuild) || [self->_osBuild isEqual:other->_osBuild])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    [self->_hardwareIdentifier hash]
    ^
    [self->_osVersion hash]
    ^
    [self->_osBuild hash]
    ;
}

- (void)mergeFrom:(GEORPWatchAuxiliaryControl *)other
{
    [other readAll:NO];
    if (other->_hardwareIdentifier)
    {
        [self setHardwareIdentifier:other->_hardwareIdentifier];
    }
    if (other->_osVersion)
    {
        [self setOsVersion:other->_osVersion];
    }
    if (other->_osBuild)
    {
        [self setOsBuild:other->_osBuild];
    }
}


@end


