// This file was automatically generated by gyb
// DO NOT EDIT!
// Compiled from reportaproblem.proto

#import "GEORPMerchantLookupContext.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>
#import <os/lock_private.h>

#import <GeoServices/GEOLocation.h>
#import <GeoServices/GEOPDMapsIdentifier.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled
#endif

@implementation GEORPMerchantLookupContext

- (instancetype)init
{
    self = [super init];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (instancetype)initWithData:(NSData *)data
{
    self = [super initWithData:data];
    if (self == nil) {
        return nil;
    }

    _readerLock = OS_UNFAIR_LOCK_INIT;
    return self;
}

- (int64_t)merchantIndustryCode
{
    return _merchantIndustryCode;
}
- (void)setMerchantIndustryCode:(int64_t)v
{
    _flags.wrote_merchantIndustryCode = 1;
    _flags.has_merchantIndustryCode = 1;
    _merchantIndustryCode = v;
}
- (void)setHasMerchantIndustryCode:(BOOL)f
{
    _flags.wrote_merchantIndustryCode = 1;
    _flags.has_merchantIndustryCode = f ? 1 : 0;
}
- (BOOL)hasMerchantIndustryCode
{
    return (BOOL)_flags.has_merchantIndustryCode;
}

- (void)_readMerchantId {
    if (_flags.read_merchantId) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_merchantId) {
            static const uint32_t tags[] = {2, 0};
            GEORPMerchantLookupContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasMerchantId
{
    [self _readMerchantId];
    return _merchantId != nil;
}
- (GEOPDMapsIdentifier *)merchantId
{
    [self _readMerchantId];
    return _merchantId;
}
- (void)setMerchantId:(GEOPDMapsIdentifier *)v
{
    _flags.read_merchantId = 1;
    _flags.wrote_merchantId = 1;
    _merchantId = v;
}

- (void)_readMerchantName {
    if (_flags.read_merchantName) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_merchantName) {
            static const uint32_t tags[] = {3, 0};
            GEORPMerchantLookupContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasMerchantName
{
    [self _readMerchantName];
    return _merchantName != nil;
}
- (NSString *)merchantName
{
    [self _readMerchantName];
    return _merchantName;
}
- (void)setMerchantName:(NSString *)v
{
    _flags.read_merchantName = 1;
    _flags.wrote_merchantName = 1;
    _merchantName = v;
}

- (void)_readMerchantRawName {
    if (_flags.read_merchantRawName) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_merchantRawName) {
            static const uint32_t tags[] = {4, 0};
            GEORPMerchantLookupContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasMerchantRawName
{
    [self _readMerchantRawName];
    return _merchantRawName != nil;
}
- (NSString *)merchantRawName
{
    [self _readMerchantRawName];
    return _merchantRawName;
}
- (void)setMerchantRawName:(NSString *)v
{
    _flags.read_merchantRawName = 1;
    _flags.wrote_merchantRawName = 1;
    _merchantRawName = v;
}

- (void)_readMerchantIndustryCategory {
    if (_flags.read_merchantIndustryCategory) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_merchantIndustryCategory) {
            static const uint32_t tags[] = {5, 0};
            GEORPMerchantLookupContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasMerchantIndustryCategory
{
    [self _readMerchantIndustryCategory];
    return _merchantIndustryCategory != nil;
}
- (NSString *)merchantIndustryCategory
{
    [self _readMerchantIndustryCategory];
    return _merchantIndustryCategory;
}
- (void)setMerchantIndustryCategory:(NSString *)v
{
    _flags.read_merchantIndustryCategory = 1;
    _flags.wrote_merchantIndustryCategory = 1;
    _merchantIndustryCategory = v;
}

- (void)_readMerchantUrl {
    if (_flags.read_merchantUrl) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_merchantUrl) {
            static const uint32_t tags[] = {6, 0};
            GEORPMerchantLookupContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasMerchantUrl
{
    [self _readMerchantUrl];
    return _merchantUrl != nil;
}
- (NSString *)merchantUrl
{
    [self _readMerchantUrl];
    return _merchantUrl;
}
- (void)setMerchantUrl:(NSString *)v
{
    _flags.read_merchantUrl = 1;
    _flags.wrote_merchantUrl = 1;
    _merchantUrl = v;
}

- (void)_readMerchantFormattedAddress {
    if (_flags.read_merchantFormattedAddress) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_merchantFormattedAddress) {
            static const uint32_t tags[] = {7, 0};
            GEORPMerchantLookupContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasMerchantFormattedAddress
{
    [self _readMerchantFormattedAddress];
    return _merchantFormattedAddress != nil;
}
- (NSString *)merchantFormattedAddress
{
    [self _readMerchantFormattedAddress];
    return _merchantFormattedAddress;
}
- (void)setMerchantFormattedAddress:(NSString *)v
{
    _flags.read_merchantFormattedAddress = 1;
    _flags.wrote_merchantFormattedAddress = 1;
    _merchantFormattedAddress = v;
}

- (void)_readMerchantAdamId {
    if (_flags.read_merchantAdamId) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_merchantAdamId) {
            static const uint32_t tags[] = {8, 0};
            GEORPMerchantLookupContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasMerchantAdamId
{
    [self _readMerchantAdamId];
    return _merchantAdamId != nil;
}
- (NSString *)merchantAdamId
{
    [self _readMerchantAdamId];
    return _merchantAdamId;
}
- (void)setMerchantAdamId:(NSString *)v
{
    _flags.read_merchantAdamId = 1;
    _flags.wrote_merchantAdamId = 1;
    _merchantAdamId = v;
}

- (double)transactionTime
{
    return _transactionTime;
}
- (void)setTransactionTime:(double)v
{
    _flags.wrote_transactionTime = 1;
    _flags.has_transactionTime = 1;
    _transactionTime = v;
}
- (void)setHasTransactionTime:(BOOL)f
{
    _flags.wrote_transactionTime = 1;
    _flags.has_transactionTime = f ? 1 : 0;
}
- (BOOL)hasTransactionTime
{
    return (BOOL)_flags.has_transactionTime;
}

- (void)_readTransactionType {
    if (_flags.read_transactionType) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_transactionType) {
            static const uint32_t tags[] = {10, 0};
            GEORPMerchantLookupContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasTransactionType
{
    [self _readTransactionType];
    return _transactionType != nil;
}
- (NSString *)transactionType
{
    [self _readTransactionType];
    return _transactionType;
}
- (void)setTransactionType:(NSString *)v
{
    _flags.read_transactionType = 1;
    _flags.wrote_transactionType = 1;
    _transactionType = v;
}

- (void)_readTransactionLocation {
    if (_flags.read_transactionLocation) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_transactionLocation) {
            static const uint32_t tags[] = {11, 0};
            GEORPMerchantLookupContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasTransactionLocation
{
    [self _readTransactionLocation];
    return _transactionLocation != nil;
}
- (GEOLocation *)transactionLocation
{
    [self _readTransactionLocation];
    return _transactionLocation;
}
- (void)setTransactionLocation:(GEOLocation *)v
{
    _flags.read_transactionLocation = 1;
    _flags.wrote_transactionLocation = 1;
    _transactionLocation = v;
}

- (void)_readCorrelationId {
    if (_flags.read_correlationId) return;
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (!reader) return;
    @synchronized(reader) {
        if (!_flags.read_correlationId) {
            static const uint32_t tags[] = {12, 0};
            GEORPMerchantLookupContextReadSpecified(self, reader, tags);
        }
    }
}
- (BOOL)hasCorrelationId
{
    [self _readCorrelationId];
    return _correlationId != nil;
}
- (NSString *)correlationId
{
    [self _readCorrelationId];
    return _correlationId;
}
- (void)setCorrelationId:(NSString *)v
{
    _flags.read_correlationId = 1;
    _flags.wrote_correlationId = 1;
    _correlationId = v;
}


- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    [self readAll:YES];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_flags.has_merchantIndustryCode)
    {
        [dict setObject:@(self->_merchantIndustryCode) forKey:@"merchant_industry_code"];
    }

    {
        GEOPDMapsIdentifier * value = self.merchantId;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"merchant_id"];
        }
    }

    {
        NSString * value = self.merchantName;
        if (value) {
            [dict setObject:value forKey:@"merchant_name"];
        }
    }

    {
        NSString * value = self.merchantRawName;
        if (value) {
            [dict setObject:value forKey:@"merchant_raw_name"];
        }
    }

    {
        NSString * value = self.merchantIndustryCategory;
        if (value) {
            [dict setObject:value forKey:@"merchant_industry_category"];
        }
    }

    {
        NSString * value = self.merchantUrl;
        if (value) {
            [dict setObject:value forKey:@"merchant_url"];
        }
    }

    {
        NSString * value = self.merchantFormattedAddress;
        if (value) {
            [dict setObject:value forKey:@"merchant_formatted_address"];
        }
    }

    {
        NSString * value = self.merchantAdamId;
        if (value) {
            [dict setObject:value forKey:@"merchant_adam_id"];
        }
    }

    if (self->_flags.has_transactionTime)
    {
        [dict setObject:@(self->_transactionTime) forKey:@"transaction_time"];
    }

    {
        NSString * value = self.transactionType;
        if (value) {
            [dict setObject:value forKey:@"transaction_type"];
        }
    }

    {
        GEOLocation * value = self.transactionLocation;
        if (value) {
            [dict setObject:[value dictionaryRepresentation] forKey:@"transaction_location"];
        }
    }

    {
        NSString * value = self.correlationId;
        if (value) {
            [dict setObject:value forKey:@"correlation_id"];
        }
    }



    return dict;
}


#define TAG_PARSE_ALL_RECURSIVE     (UINT32_MAX)
#define TAG_PARSE_ALL_NON_RECURSIVE (UINT32_MAX-1)
#define TAG_PARSE_INITIAL           (UINT32_MAX-2)
#define TAG_UNKNOWN_FIELDS          (UINT32_MAX-3)

- (void)readAll:(BOOL)recursively {
    os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    if (reader == nil) return;
    @synchronized(reader) {
        static const uint32_t recursiveTag[] = {TAG_PARSE_ALL_RECURSIVE, 0};
        static const uint32_t nonRecursiveTag[] = {TAG_PARSE_ALL_NON_RECURSIVE, 0};
        GEORPMerchantLookupContextReadSpecified(self, reader, recursively ? recursiveTag : nonRecursiveTag);
    }
}
BOOL GEORPMerchantLookupContextReadAllFrom(__unsafe_unretained GEORPMerchantLookupContext *self, __unsafe_unretained PBDataReader *reader, BOOL recursively) {
    if (self->_readerMarkLength != 0) {
        [NSException raise:NSInvalidArgumentException format:@"GEORPMerchantLookupContextReadAllFrom can only be called once per object"];
        return NO;
    }

    if (reader.position > UINT32_MAX || reader.length > UINT32_MAX) {
        os_log_fault(OS_LOG_DEFAULT, "Cannot decode data with position/length > UINT32_MAX");
        return NO;
    }

    static const uint32_t recursiveTag[] = {TAG_PARSE_INITIAL, TAG_PARSE_ALL_RECURSIVE, 0};
    static const uint32_t initialTag[] = {TAG_PARSE_INITIAL, 0};

    @synchronized(reader) {
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = reader;
        os_unfair_lock_unlock(&(self->_readerLock));

        self->_readerMarkPos = (uint32_t)reader.position;
        self->_readerMarkLength = (uint32_t)reader.length;
        BOOL result = GEORPMerchantLookupContextReadSpecified(self, reader, recursively ? recursiveTag : initialTag);
        return result;
    }
}

BOOL GEORPMerchantLookupContextReadFrom(__unsafe_unretained GEORPMerchantLookupContext *self, __unsafe_unretained PBDataReader *reader) {
    @synchronized(reader) {
        return GEORPMerchantLookupContextReadAllFrom(self, reader, NO);
    }
}

BOOL GEORPMerchantLookupContextReadSpecified(__unsafe_unretained GEORPMerchantLookupContext *self, __unsafe_unretained PBDataReader *reader, const uint32_t *tags) {
    if (reader == nil) {
        return NO;
    }
    reader->_length = (NSUInteger)self->_readerMarkLength;
    [reader seekToOffset:(NSUInteger)self->_readerMarkPos];
    uint32_t readLazyCount = 0
        + self->_flags.read_merchantId
        + self->_flags.read_merchantName
        + self->_flags.read_merchantRawName
        + self->_flags.read_merchantIndustryCategory
        + self->_flags.read_merchantUrl
        + self->_flags.read_merchantFormattedAddress
        + self->_flags.read_merchantAdamId
        + self->_flags.read_transactionType
        + self->_flags.read_transactionLocation
        + self->_flags.read_correlationId
        ;
    #define requiredLazyFieldCount 8 // objc_msg_parse_all_threshold = 0.8

    BOOL readAll = NO;
    __attribute__((unused)) BOOL recursively = NO;
    BOOL isInitial = NO;
    size_t tagsRemaining = 0;
    for (; tags[tagsRemaining] != 0; ++tagsRemaining) {
        switch (tags[tagsRemaining]) {
            case TAG_PARSE_ALL_RECURSIVE:
                recursively = YES;
                readAll = YES;
                break;
            case TAG_PARSE_ALL_NON_RECURSIVE:
                readAll = YES;
                break;
            case TAG_PARSE_INITIAL:
                isInitial = YES;
                break;
            default:
                ++readLazyCount;
                break;
            }
    }
    if (!readAll && readLazyCount >= requiredLazyFieldCount) {
        readAll = YES;
    }
    const BOOL stopWhenNoMoreTagsRemaining = !readAll;
    if (readAll || isInitial) tags = NULL;

    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }
        
        BOOL shouldParseTag = readAll;
        for (size_t i = 0; tags != NULL && !shouldParseTag && tags[i] != 0; ++i) {
            shouldParseTag = (tags[i] == tag);
        }

        switch (tag) {

            case 1 /* merchantIndustryCode */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_merchantIndustryCode = YES;
                self->_merchantIndustryCode = PBReaderReadInt64(reader);

            }
            break;
            case 2 /* merchantId */:
            {
                if (!shouldParseTag || self->_flags.read_merchantId) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_merchantId) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOPDMapsIdentifier *new_merchantId = [[GEOPDMapsIdentifier alloc] init];
                self->_merchantId = new_merchantId;
                PBDataReaderMark mark_merchantId;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_merchantId);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOPDMapsIdentifierReadAllFrom(new_merchantId, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_merchantId);

                --tagsRemaining;
            }
            break;
            case 3 /* merchantName */:
            {
                if (!shouldParseTag || self->_flags.read_merchantName) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_merchantName) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_merchantName = PBReaderReadString(reader);
                self->_merchantName = new_merchantName;

                --tagsRemaining;
            }
            break;
            case 4 /* merchantRawName */:
            {
                if (!shouldParseTag || self->_flags.read_merchantRawName) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_merchantRawName) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_merchantRawName = PBReaderReadString(reader);
                self->_merchantRawName = new_merchantRawName;

                --tagsRemaining;
            }
            break;
            case 5 /* merchantIndustryCategory */:
            {
                if (!shouldParseTag || self->_flags.read_merchantIndustryCategory) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_merchantIndustryCategory) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_merchantIndustryCategory = PBReaderReadString(reader);
                self->_merchantIndustryCategory = new_merchantIndustryCategory;

                --tagsRemaining;
            }
            break;
            case 6 /* merchantUrl */:
            {
                if (!shouldParseTag || self->_flags.read_merchantUrl) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_merchantUrl) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_merchantUrl = PBReaderReadString(reader);
                self->_merchantUrl = new_merchantUrl;

                --tagsRemaining;
            }
            break;
            case 7 /* merchantFormattedAddress */:
            {
                if (!shouldParseTag || self->_flags.read_merchantFormattedAddress) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_merchantFormattedAddress) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_merchantFormattedAddress = PBReaderReadString(reader);
                self->_merchantFormattedAddress = new_merchantFormattedAddress;

                --tagsRemaining;
            }
            break;
            case 8 /* merchantAdamId */:
            {
                if (!shouldParseTag || self->_flags.read_merchantAdamId) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_merchantAdamId) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_merchantAdamId = PBReaderReadString(reader);
                self->_merchantAdamId = new_merchantAdamId;

                --tagsRemaining;
            }
            break;
            case 9 /* transactionTime */:
            {
                if (!isInitial) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    break;
                }
                self->_flags.has_transactionTime = YES;
                self->_transactionTime = PBReaderReadDouble(reader);

            }
            break;
            case 10 /* transactionType */:
            {
                if (!shouldParseTag || self->_flags.read_transactionType) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_transactionType) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_transactionType = PBReaderReadString(reader);
                self->_transactionType = new_transactionType;

                --tagsRemaining;
            }
            break;
            case 11 /* transactionLocation */:
            {
                if (!shouldParseTag || self->_flags.read_transactionLocation) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_transactionLocation) {
                        --tagsRemaining;
                    }
                    break;
                }
                GEOLocation *new_transactionLocation = [[GEOLocation alloc] init];
                self->_transactionLocation = new_transactionLocation;
                PBDataReaderMark mark_transactionLocation;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_transactionLocation);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !GEOLocationReadAllFrom(new_transactionLocation, reader, recursively);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_transactionLocation);

                --tagsRemaining;
            }
            break;
            case 12 /* correlationId */:
            {
                if (!shouldParseTag || self->_flags.read_correlationId) {
                    if (!PBReaderSkipValueWithTag(reader, tag, aType))
                        return NO;
                    if (shouldParseTag && self->_flags.read_correlationId) {
                        --tagsRemaining;
                    }
                    break;
                }
                NSString * new_correlationId = PBReaderReadString(reader);
                self->_correlationId = new_correlationId;

                --tagsRemaining;
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
        if (stopWhenNoMoreTagsRemaining && tagsRemaining == 0) {
            break;
        }
    }


    if (readAll) {
        if (recursively) {
            [self->_merchantId readAll:YES];
            [self->_transactionLocation readAll:YES];
        }
        self->_flags.read_merchantId = YES;
        self->_flags.read_merchantName = YES;
        self->_flags.read_merchantRawName = YES;
        self->_flags.read_merchantIndustryCategory = YES;
        self->_flags.read_merchantUrl = YES;
        self->_flags.read_merchantFormattedAddress = YES;
        self->_flags.read_merchantAdamId = YES;
        self->_flags.read_transactionType = YES;
        self->_flags.read_transactionLocation = YES;
        self->_flags.read_correlationId = YES;
    } else {
        for (size_t i = 0; tags != NULL && tags[i] != 0; ++i) {
            switch (tags[i]) {
                case 2 /* merchantId */:
                    self->_flags.read_merchantId = YES;
                    break;
                case 3 /* merchantName */:
                    self->_flags.read_merchantName = YES;
                    break;
                case 4 /* merchantRawName */:
                    self->_flags.read_merchantRawName = YES;
                    break;
                case 5 /* merchantIndustryCategory */:
                    self->_flags.read_merchantIndustryCategory = YES;
                    break;
                case 6 /* merchantUrl */:
                    self->_flags.read_merchantUrl = YES;
                    break;
                case 7 /* merchantFormattedAddress */:
                    self->_flags.read_merchantFormattedAddress = YES;
                    break;
                case 8 /* merchantAdamId */:
                    self->_flags.read_merchantAdamId = YES;
                    break;
                case 10 /* transactionType */:
                    self->_flags.read_transactionType = YES;
                    break;
                case 11 /* transactionLocation */:
                    self->_flags.read_transactionLocation = YES;
                    break;
                case 12 /* correlationId */:
                    self->_flags.read_correlationId = YES;
                    break;
            }
        }
    }

    #undef requiredLazyFieldCount
    if (readAll) {
        // reader is __unsafe_unretained
        const BOOL hadError = PBReaderHasError(reader);
        os_unfair_lock_lock_with_options(&(self->_readerLock), OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
        self->_reader = nil;
        os_unfair_lock_unlock(&(self->_readerLock));
        return !hadError;
    }
    return !PBReaderHasError(reader);
}

+ (BOOL)isValid:(__unsafe_unretained PBDataReader *)reader
{
    return GEORPMerchantLookupContextIsValid(reader);
}

BOOL GEORPMerchantLookupContextIsValid(__unsafe_unretained PBDataReader *reader) {
    PBDataReaderMark resetMark;
    resetMark.pos = reader.position;
    resetMark.length = reader.length;
    #define returnValue(X) do { \
        const BOOL v = X; \
        PBReaderRecallMark(reader, &resetMark); \
        return v; \
    } while(0)
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;
        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* merchantIndustryCode */:
                if (TYPE_VARINT != aType)
                    returnValue(NO);
                PBReaderReadInt64(reader);
                break;
            case 2 /* merchantId */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_merchantId;
                    if (!PBReaderPlaceMark(reader, &mark_merchantId))
                        returnValue(NO);
                    if (!GEOPDMapsIdentifierIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_merchantId);
                }
                break;
            case 3 /* merchantName */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 4 /* merchantRawName */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 5 /* merchantIndustryCategory */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 6 /* merchantUrl */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 7 /* merchantFormattedAddress */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 8 /* merchantAdamId */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 9 /* transactionTime */:
                if (TYPE_FIXED64 != aType)
                    returnValue(NO);
                PBReaderReadDouble(reader);
                break;
            case 10 /* transactionType */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            case 11 /* transactionLocation */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                {
                    PBDataReaderMark mark_transactionLocation;
                    if (!PBReaderPlaceMark(reader, &mark_transactionLocation))
                        returnValue(NO);
                    if (!GEOLocationIsValid(reader))
                        returnValue(NO);
                    PBReaderRecallMark(reader, &mark_transactionLocation);
                }
                break;
            case 12 /* correlationId */:
                if (TYPE_LENGTH_DELIMITED != aType)
                    returnValue(NO);
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
                break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    returnValue(NO);
                break;
        }
    }
    returnValue(!PBReaderHasError(reader));
    #undef returnValue
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return GEORPMerchantLookupContextReadAllFrom(self, reader, NO);
}

- (void)writeTo:(PBDataWriter *)writer
{
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            if (!GEORPMerchantLookupContextIsDirty(self)) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                uint32_t length = (_readerMarkLength - _readerMarkPos);
                NSData *data = [reader readBytes:length];
                [writer writeData:data];
                return;
            }
        }
    }

    [self readAll:NO];

    /* merchantIndustryCode */
    {
        if (self->_flags.has_merchantIndustryCode)
        {
            PBDataWriterWriteInt64Field(writer, self->_merchantIndustryCode, 1);
        }
    }

    /* merchantId */
    {
        if (self->_merchantId != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_merchantId, 2);
        }
    }

    /* merchantName */
    {
        if (self->_merchantName)
        {
            PBDataWriterWriteStringField(writer, self->_merchantName, 3);
        }
    }

    /* merchantRawName */
    {
        if (self->_merchantRawName)
        {
            PBDataWriterWriteStringField(writer, self->_merchantRawName, 4);
        }
    }

    /* merchantIndustryCategory */
    {
        if (self->_merchantIndustryCategory)
        {
            PBDataWriterWriteStringField(writer, self->_merchantIndustryCategory, 5);
        }
    }

    /* merchantUrl */
    {
        if (self->_merchantUrl)
        {
            PBDataWriterWriteStringField(writer, self->_merchantUrl, 6);
        }
    }

    /* merchantFormattedAddress */
    {
        if (self->_merchantFormattedAddress)
        {
            PBDataWriterWriteStringField(writer, self->_merchantFormattedAddress, 7);
        }
    }

    /* merchantAdamId */
    {
        if (self->_merchantAdamId)
        {
            PBDataWriterWriteStringField(writer, self->_merchantAdamId, 8);
        }
    }

    /* transactionTime */
    {
        if (self->_flags.has_transactionTime)
        {
            PBDataWriterWriteDoubleField(writer, self->_transactionTime, 9);
        }
    }

    /* transactionType */
    {
        if (self->_transactionType)
        {
            PBDataWriterWriteStringField(writer, self->_transactionType, 10);
        }
    }

    /* transactionLocation */
    {
        if (self->_transactionLocation != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_transactionLocation, 11);
        }
    }

    /* correlationId */
    {
        if (self->_correlationId)
        {
            PBDataWriterWriteStringField(writer, self->_correlationId, 12);
        }
    }
}

BOOL GEORPMerchantLookupContextIsDirty(__unsafe_unretained GEORPMerchantLookupContext *self)
{
    if (self == nil) {
        return NO;
    }
    
    BOOL dirty = NO
        || self->_flags.wrote_merchantIndustryCode
        || self->_flags.wrote_merchantId
        || self->_flags.read_merchantId
        || self->_flags.wrote_merchantName
        || self->_flags.read_merchantName
        || self->_flags.wrote_merchantRawName
        || self->_flags.read_merchantRawName
        || self->_flags.wrote_merchantIndustryCategory
        || self->_flags.read_merchantIndustryCategory
        || self->_flags.wrote_merchantUrl
        || self->_flags.read_merchantUrl
        || self->_flags.wrote_merchantFormattedAddress
        || self->_flags.read_merchantFormattedAddress
        || self->_flags.wrote_merchantAdamId
        || self->_flags.read_merchantAdamId
        || self->_flags.wrote_transactionTime
        || self->_flags.wrote_transactionType
        || self->_flags.read_transactionType
        || self->_flags.wrote_transactionLocation
        || self->_flags.read_transactionLocation
        || self->_flags.wrote_correlationId
        || self->_flags.read_correlationId
    ;


    return dirty;
}


- (void)copyTo:(GEORPMerchantLookupContext *)other
{
    [self readAll:NO];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    other->_reader = _reader;
    other->_readerMarkPos = _readerMarkPos;
    other->_readerMarkLength = _readerMarkLength;
    os_unfair_lock_unlock(&_readerLock);
    if (self->_flags.has_merchantIndustryCode)
    {
        other->_merchantIndustryCode = _merchantIndustryCode;
        other->_flags.has_merchantIndustryCode = YES;
    }
    if (_merchantId)
    {
        other.merchantId = _merchantId;
    }
    if (_merchantName)
    {
        other.merchantName = _merchantName;
    }
    if (_merchantRawName)
    {
        other.merchantRawName = _merchantRawName;
    }
    if (_merchantIndustryCategory)
    {
        other.merchantIndustryCategory = _merchantIndustryCategory;
    }
    if (_merchantUrl)
    {
        other.merchantUrl = _merchantUrl;
    }
    if (_merchantFormattedAddress)
    {
        other.merchantFormattedAddress = _merchantFormattedAddress;
    }
    if (_merchantAdamId)
    {
        other.merchantAdamId = _merchantAdamId;
    }
    if (self->_flags.has_transactionTime)
    {
        other->_transactionTime = _transactionTime;
        other->_flags.has_transactionTime = YES;
    }
    if (_transactionType)
    {
        other.transactionType = _transactionType;
    }
    if (_transactionLocation)
    {
        other.transactionLocation = _transactionLocation;
    }
    if (_correlationId)
    {
        other.correlationId = _correlationId;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    GEORPMerchantLookupContext *copy = [[[self class] allocWithZone:zone] init];
    os_unfair_lock_lock_with_options(&_readerLock, OS_UNFAIR_LOCK_DATA_SYNCHRONIZATION);
    PBDataReader *reader = _reader;
    os_unfair_lock_unlock(&_readerLock);
    @synchronized(reader) {
        if (reader) {
            BOOL wroteAny = NO
                || _flags.wrote_merchantIndustryCode
                || _flags.wrote_merchantId
                || _flags.wrote_merchantName
                || _flags.wrote_merchantRawName
                || _flags.wrote_merchantIndustryCategory
                || _flags.wrote_merchantUrl
                || _flags.wrote_merchantFormattedAddress
                || _flags.wrote_merchantAdamId
                || _flags.wrote_transactionTime
                || _flags.wrote_transactionType
                || _flags.wrote_transactionLocation
                || _flags.wrote_correlationId
            ;
            if (!wroteAny) {
                reader->_length = (NSUInteger)_readerMarkLength;
                [reader seekToOffset:(NSUInteger)_readerMarkPos];
                GEORPMerchantLookupContextReadAllFrom(copy, reader, NO);
                return copy;
            }
            [self readAll:NO];
        }
    }
    if (self->_flags.has_merchantIndustryCode)
    {
        copy->_merchantIndustryCode = _merchantIndustryCode;
        copy->_flags.has_merchantIndustryCode = YES;
    }
    copy->_merchantId = [_merchantId copyWithZone:zone];
    copy->_merchantName = [_merchantName copyWithZone:zone];
    copy->_merchantRawName = [_merchantRawName copyWithZone:zone];
    copy->_merchantIndustryCategory = [_merchantIndustryCategory copyWithZone:zone];
    copy->_merchantUrl = [_merchantUrl copyWithZone:zone];
    copy->_merchantFormattedAddress = [_merchantFormattedAddress copyWithZone:zone];
    copy->_merchantAdamId = [_merchantAdamId copyWithZone:zone];
    if (self->_flags.has_transactionTime)
    {
        copy->_transactionTime = _transactionTime;
        copy->_flags.has_transactionTime = YES;
    }
    copy->_transactionType = [_transactionType copyWithZone:zone];
    copy->_transactionLocation = [_transactionLocation copyWithZone:zone];
    copy->_correlationId = [_correlationId copyWithZone:zone];
    return copy;
}


- (BOOL)isEqual:(id)object
{
    GEORPMerchantLookupContext *other = (GEORPMerchantLookupContext *)object;
    if (![other isMemberOfClass:[self class]]) {
        return NO;
    }
    [self readAll:YES];
    [other readAll:YES];


    return YES
    &&
    ((self->_flags.has_merchantIndustryCode && other->_flags.has_merchantIndustryCode && self->_merchantIndustryCode == other->_merchantIndustryCode) || (!self->_flags.has_merchantIndustryCode && !other->_flags.has_merchantIndustryCode))
    &&
    ((!self->_merchantId && !other->_merchantId) || [self->_merchantId isEqual:other->_merchantId])
    &&
    ((!self->_merchantName && !other->_merchantName) || [self->_merchantName isEqual:other->_merchantName])
    &&
    ((!self->_merchantRawName && !other->_merchantRawName) || [self->_merchantRawName isEqual:other->_merchantRawName])
    &&
    ((!self->_merchantIndustryCategory && !other->_merchantIndustryCategory) || [self->_merchantIndustryCategory isEqual:other->_merchantIndustryCategory])
    &&
    ((!self->_merchantUrl && !other->_merchantUrl) || [self->_merchantUrl isEqual:other->_merchantUrl])
    &&
    ((!self->_merchantFormattedAddress && !other->_merchantFormattedAddress) || [self->_merchantFormattedAddress isEqual:other->_merchantFormattedAddress])
    &&
    ((!self->_merchantAdamId && !other->_merchantAdamId) || [self->_merchantAdamId isEqual:other->_merchantAdamId])
    &&
    ((self->_flags.has_transactionTime && other->_flags.has_transactionTime && self->_transactionTime == other->_transactionTime) || (!self->_flags.has_transactionTime && !other->_flags.has_transactionTime))
    &&
    ((!self->_transactionType && !other->_transactionType) || [self->_transactionType isEqual:other->_transactionType])
    &&
    ((!self->_transactionLocation && !other->_transactionLocation) || [self->_transactionLocation isEqual:other->_transactionLocation])
    &&
    ((!self->_correlationId && !other->_correlationId) || [self->_correlationId isEqual:other->_correlationId])
    ;
}

- (NSUInteger)hash
{
    [self readAll:YES];
    NSUInteger value = 0;

    return value
    ^
    (self->_flags.has_merchantIndustryCode ? PBHashInt((NSUInteger)self->_merchantIndustryCode) : 0)
    ^
    [self->_merchantId hash]
    ^
    [self->_merchantName hash]
    ^
    [self->_merchantRawName hash]
    ^
    [self->_merchantIndustryCategory hash]
    ^
    [self->_merchantUrl hash]
    ^
    [self->_merchantFormattedAddress hash]
    ^
    [self->_merchantAdamId hash]
    ^
    (self->_flags.has_transactionTime ? PBHashDouble(self->_transactionTime) : 0)
    ^
    [self->_transactionType hash]
    ^
    [self->_transactionLocation hash]
    ^
    [self->_correlationId hash]
    ;
}

- (void)mergeFrom:(GEORPMerchantLookupContext *)other
{
    [other readAll:NO];
    if (other->_flags.has_merchantIndustryCode)
    {
        self->_merchantIndustryCode = other->_merchantIndustryCode;
        self->_flags.has_merchantIndustryCode = 1;
    }
    if (self->_merchantId && other->_merchantId)
    {
        [self->_merchantId mergeFrom:other->_merchantId];
    }
    else if (!self->_merchantId && other->_merchantId)
    {
        [self setMerchantId:other->_merchantId];
    }
    if (other->_merchantName)
    {
        [self setMerchantName:other->_merchantName];
    }
    if (other->_merchantRawName)
    {
        [self setMerchantRawName:other->_merchantRawName];
    }
    if (other->_merchantIndustryCategory)
    {
        [self setMerchantIndustryCategory:other->_merchantIndustryCategory];
    }
    if (other->_merchantUrl)
    {
        [self setMerchantUrl:other->_merchantUrl];
    }
    if (other->_merchantFormattedAddress)
    {
        [self setMerchantFormattedAddress:other->_merchantFormattedAddress];
    }
    if (other->_merchantAdamId)
    {
        [self setMerchantAdamId:other->_merchantAdamId];
    }
    if (other->_flags.has_transactionTime)
    {
        self->_transactionTime = other->_transactionTime;
        self->_flags.has_transactionTime = 1;
    }
    if (other->_transactionType)
    {
        [self setTransactionType:other->_transactionType];
    }
    if (self->_transactionLocation && other->_transactionLocation)
    {
        [self->_transactionLocation mergeFrom:other->_transactionLocation];
    }
    else if (!self->_transactionLocation && other->_transactionLocation)
    {
        [self setTransactionLocation:other->_transactionLocation];
    }
    if (other->_correlationId)
    {
        [self setCorrelationId:other->_correlationId];
    }
}


@end


